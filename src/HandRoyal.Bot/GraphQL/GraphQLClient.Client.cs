// <auto-generated/>
#pragma warning disable CS8073
#nullable enable annotations
#nullable disable warnings

namespace HandRoyal.Bot.GraphQL
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class CreateUserResult : global::System.IEquatable<CreateUserResult>, ICreateUserResult
    {
        public CreateUserResult(global::HandRoyal.Bot.GraphQL.ICreateUser_ActionQuery? actionQuery)
        {
            ActionQuery = actionQuery;
        }

        public global::HandRoyal.Bot.GraphQL.ICreateUser_ActionQuery? ActionQuery { get; }

        public virtual global::System.Boolean Equals(CreateUserResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((ActionQuery is null && other.ActionQuery is null) || ActionQuery != null && ActionQuery.Equals(other.ActionQuery)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CreateUserResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (ActionQuery != null)
                {
                    hash ^= 397 * ActionQuery.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class CreateUser_ActionQuery_Query_ActionQuery : global::System.IEquatable<CreateUser_ActionQuery_Query_ActionQuery>, ICreateUser_ActionQuery_Query_ActionQuery
    {
        public CreateUser_ActionQuery_Query_ActionQuery(global::System.String? createUser)
        {
            CreateUser = createUser;
        }

        public global::System.String? CreateUser { get; }

        public virtual global::System.Boolean Equals(CreateUser_ActionQuery_Query_ActionQuery? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((CreateUser is null && other.CreateUser is null) || CreateUser != null && CreateUser.Equals(other.CreateUser)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CreateUser_ActionQuery_Query_ActionQuery)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (CreateUser != null)
                {
                    hash ^= 397 * CreateUser.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface ICreateUserResult
    {
        public global::HandRoyal.Bot.GraphQL.ICreateUser_ActionQuery? ActionQuery { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface ICreateUser_ActionQuery
    {
        public global::System.String? CreateUser { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface ICreateUser_ActionQuery_Query_ActionQuery : ICreateUser_ActionQuery
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class CreateSessionResult : global::System.IEquatable<CreateSessionResult>, ICreateSessionResult
    {
        public CreateSessionResult(global::HandRoyal.Bot.GraphQL.ICreateSession_ActionQuery? actionQuery)
        {
            ActionQuery = actionQuery;
        }

        public global::HandRoyal.Bot.GraphQL.ICreateSession_ActionQuery? ActionQuery { get; }

        public virtual global::System.Boolean Equals(CreateSessionResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((ActionQuery is null && other.ActionQuery is null) || ActionQuery != null && ActionQuery.Equals(other.ActionQuery)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CreateSessionResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (ActionQuery != null)
                {
                    hash ^= 397 * ActionQuery.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class CreateSession_ActionQuery_Query_ActionQuery : global::System.IEquatable<CreateSession_ActionQuery_Query_ActionQuery>, ICreateSession_ActionQuery_Query_ActionQuery
    {
        public CreateSession_ActionQuery_Query_ActionQuery(global::System.String? createSession)
        {
            CreateSession = createSession;
        }

        public global::System.String? CreateSession { get; }

        public virtual global::System.Boolean Equals(CreateSession_ActionQuery_Query_ActionQuery? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((CreateSession is null && other.CreateSession is null) || CreateSession != null && CreateSession.Equals(other.CreateSession)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CreateSession_ActionQuery_Query_ActionQuery)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (CreateSession != null)
                {
                    hash ^= 397 * CreateSession.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface ICreateSessionResult
    {
        public global::HandRoyal.Bot.GraphQL.ICreateSession_ActionQuery? ActionQuery { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface ICreateSession_ActionQuery
    {
        public global::System.String? CreateSession { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface ICreateSession_ActionQuery_Query_ActionQuery : ICreateSession_ActionQuery
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class JoinSessionResult : global::System.IEquatable<JoinSessionResult>, IJoinSessionResult
    {
        public JoinSessionResult(global::HandRoyal.Bot.GraphQL.IJoinSession_ActionQuery? actionQuery)
        {
            ActionQuery = actionQuery;
        }

        public global::HandRoyal.Bot.GraphQL.IJoinSession_ActionQuery? ActionQuery { get; }

        public virtual global::System.Boolean Equals(JoinSessionResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((ActionQuery is null && other.ActionQuery is null) || ActionQuery != null && ActionQuery.Equals(other.ActionQuery)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((JoinSessionResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (ActionQuery != null)
                {
                    hash ^= 397 * ActionQuery.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class JoinSession_ActionQuery_Query_ActionQuery : global::System.IEquatable<JoinSession_ActionQuery_Query_ActionQuery>, IJoinSession_ActionQuery_Query_ActionQuery
    {
        public JoinSession_ActionQuery_Query_ActionQuery(global::System.String? joinSession)
        {
            JoinSession = joinSession;
        }

        public global::System.String? JoinSession { get; }

        public virtual global::System.Boolean Equals(JoinSession_ActionQuery_Query_ActionQuery? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((JoinSession is null && other.JoinSession is null) || JoinSession != null && JoinSession.Equals(other.JoinSession)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((JoinSession_ActionQuery_Query_ActionQuery)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (JoinSession != null)
                {
                    hash ^= 397 * JoinSession.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IJoinSessionResult
    {
        public global::HandRoyal.Bot.GraphQL.IJoinSession_ActionQuery? ActionQuery { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IJoinSession_ActionQuery
    {
        public global::System.String? JoinSession { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IJoinSession_ActionQuery_Query_ActionQuery : IJoinSession_ActionQuery
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class SubmitMoveResult : global::System.IEquatable<SubmitMoveResult>, ISubmitMoveResult
    {
        public SubmitMoveResult(global::HandRoyal.Bot.GraphQL.ISubmitMove_ActionQuery? actionQuery)
        {
            ActionQuery = actionQuery;
        }

        public global::HandRoyal.Bot.GraphQL.ISubmitMove_ActionQuery? ActionQuery { get; }

        public virtual global::System.Boolean Equals(SubmitMoveResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((ActionQuery is null && other.ActionQuery is null) || ActionQuery != null && ActionQuery.Equals(other.ActionQuery)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((SubmitMoveResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (ActionQuery != null)
                {
                    hash ^= 397 * ActionQuery.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class SubmitMove_ActionQuery_Query_ActionQuery : global::System.IEquatable<SubmitMove_ActionQuery_Query_ActionQuery>, ISubmitMove_ActionQuery_Query_ActionQuery
    {
        public SubmitMove_ActionQuery_Query_ActionQuery(global::System.String? submitMove)
        {
            SubmitMove = submitMove;
        }

        public global::System.String? SubmitMove { get; }

        public virtual global::System.Boolean Equals(SubmitMove_ActionQuery_Query_ActionQuery? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((SubmitMove is null && other.SubmitMove is null) || SubmitMove != null && SubmitMove.Equals(other.SubmitMove)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((SubmitMove_ActionQuery_Query_ActionQuery)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (SubmitMove != null)
                {
                    hash ^= 397 * SubmitMove.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface ISubmitMoveResult
    {
        public global::HandRoyal.Bot.GraphQL.ISubmitMove_ActionQuery? ActionQuery { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface ISubmitMove_ActionQuery
    {
        public global::System.String? SubmitMove { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface ISubmitMove_ActionQuery_Query_ActionQuery : ISubmitMove_ActionQuery
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class PickUpResult : global::System.IEquatable<PickUpResult>, IPickUpResult
    {
        public PickUpResult(global::HandRoyal.Bot.GraphQL.IPickUp_ActionQuery? actionQuery)
        {
            ActionQuery = actionQuery;
        }

        public global::HandRoyal.Bot.GraphQL.IPickUp_ActionQuery? ActionQuery { get; }

        public virtual global::System.Boolean Equals(PickUpResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((ActionQuery is null && other.ActionQuery is null) || ActionQuery != null && ActionQuery.Equals(other.ActionQuery)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((PickUpResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (ActionQuery != null)
                {
                    hash ^= 397 * ActionQuery.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class PickUp_ActionQuery_Query_ActionQuery : global::System.IEquatable<PickUp_ActionQuery_Query_ActionQuery>, IPickUp_ActionQuery_Query_ActionQuery
    {
        public PickUp_ActionQuery_Query_ActionQuery(global::System.String? pickUp)
        {
            PickUp = pickUp;
        }

        public global::System.String? PickUp { get; }

        public virtual global::System.Boolean Equals(PickUp_ActionQuery_Query_ActionQuery? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((PickUp is null && other.PickUp is null) || PickUp != null && PickUp.Equals(other.PickUp)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((PickUp_ActionQuery_Query_ActionQuery)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (PickUp != null)
                {
                    hash ^= 397 * PickUp.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IPickUpResult
    {
        public global::HandRoyal.Bot.GraphQL.IPickUp_ActionQuery? ActionQuery { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IPickUp_ActionQuery
    {
        public global::System.String? PickUp { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IPickUp_ActionQuery_Query_ActionQuery : IPickUp_ActionQuery
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class PickUpManyResult : global::System.IEquatable<PickUpManyResult>, IPickUpManyResult
    {
        public PickUpManyResult(global::HandRoyal.Bot.GraphQL.IPickUpMany_ActionQuery? actionQuery)
        {
            ActionQuery = actionQuery;
        }

        public global::HandRoyal.Bot.GraphQL.IPickUpMany_ActionQuery? ActionQuery { get; }

        public virtual global::System.Boolean Equals(PickUpManyResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((ActionQuery is null && other.ActionQuery is null) || ActionQuery != null && ActionQuery.Equals(other.ActionQuery)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((PickUpManyResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (ActionQuery != null)
                {
                    hash ^= 397 * ActionQuery.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class PickUpMany_ActionQuery_Query_ActionQuery : global::System.IEquatable<PickUpMany_ActionQuery_Query_ActionQuery>, IPickUpMany_ActionQuery_Query_ActionQuery
    {
        public PickUpMany_ActionQuery_Query_ActionQuery(global::System.String? pickUpMany)
        {
            PickUpMany = pickUpMany;
        }

        public global::System.String? PickUpMany { get; }

        public virtual global::System.Boolean Equals(PickUpMany_ActionQuery_Query_ActionQuery? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((PickUpMany is null && other.PickUpMany is null) || PickUpMany != null && PickUpMany.Equals(other.PickUpMany)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((PickUpMany_ActionQuery_Query_ActionQuery)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (PickUpMany != null)
                {
                    hash ^= 397 * PickUpMany.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IPickUpManyResult
    {
        public global::HandRoyal.Bot.GraphQL.IPickUpMany_ActionQuery? ActionQuery { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IPickUpMany_ActionQuery
    {
        public global::System.String? PickUpMany { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IPickUpMany_ActionQuery_Query_ActionQuery : IPickUpMany_ActionQuery
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class RegisterMatchingResult : global::System.IEquatable<RegisterMatchingResult>, IRegisterMatchingResult
    {
        public RegisterMatchingResult(global::HandRoyal.Bot.GraphQL.IRegisterMatching_ActionQuery? actionQuery)
        {
            ActionQuery = actionQuery;
        }

        public global::HandRoyal.Bot.GraphQL.IRegisterMatching_ActionQuery? ActionQuery { get; }

        public virtual global::System.Boolean Equals(RegisterMatchingResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((ActionQuery is null && other.ActionQuery is null) || ActionQuery != null && ActionQuery.Equals(other.ActionQuery)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((RegisterMatchingResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (ActionQuery != null)
                {
                    hash ^= 397 * ActionQuery.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class RegisterMatching_ActionQuery_Query_ActionQuery : global::System.IEquatable<RegisterMatching_ActionQuery_Query_ActionQuery>, IRegisterMatching_ActionQuery_Query_ActionQuery
    {
        public RegisterMatching_ActionQuery_Query_ActionQuery(global::System.String? registerMatching)
        {
            RegisterMatching = registerMatching;
        }

        public global::System.String? RegisterMatching { get; }

        public virtual global::System.Boolean Equals(RegisterMatching_ActionQuery_Query_ActionQuery? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((RegisterMatching is null && other.RegisterMatching is null) || RegisterMatching != null && RegisterMatching.Equals(other.RegisterMatching)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((RegisterMatching_ActionQuery_Query_ActionQuery)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (RegisterMatching != null)
                {
                    hash ^= 397 * RegisterMatching.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IRegisterMatchingResult
    {
        public global::HandRoyal.Bot.GraphQL.IRegisterMatching_ActionQuery? ActionQuery { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IRegisterMatching_ActionQuery
    {
        public global::System.String? RegisterMatching { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IRegisterMatching_ActionQuery_Query_ActionQuery : IRegisterMatching_ActionQuery
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class CancelMatchingResult : global::System.IEquatable<CancelMatchingResult>, ICancelMatchingResult
    {
        public CancelMatchingResult(global::HandRoyal.Bot.GraphQL.ICancelMatching_ActionQuery? actionQuery)
        {
            ActionQuery = actionQuery;
        }

        public global::HandRoyal.Bot.GraphQL.ICancelMatching_ActionQuery? ActionQuery { get; }

        public virtual global::System.Boolean Equals(CancelMatchingResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((ActionQuery is null && other.ActionQuery is null) || ActionQuery != null && ActionQuery.Equals(other.ActionQuery)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CancelMatchingResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (ActionQuery != null)
                {
                    hash ^= 397 * ActionQuery.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class CancelMatching_ActionQuery_Query_ActionQuery : global::System.IEquatable<CancelMatching_ActionQuery_Query_ActionQuery>, ICancelMatching_ActionQuery_Query_ActionQuery
    {
        public CancelMatching_ActionQuery_Query_ActionQuery(global::System.String? cancelMatching)
        {
            CancelMatching = cancelMatching;
        }

        public global::System.String? CancelMatching { get; }

        public virtual global::System.Boolean Equals(CancelMatching_ActionQuery_Query_ActionQuery? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((CancelMatching is null && other.CancelMatching is null) || CancelMatching != null && CancelMatching.Equals(other.CancelMatching)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CancelMatching_ActionQuery_Query_ActionQuery)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (CancelMatching != null)
                {
                    hash ^= 397 * CancelMatching.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface ICancelMatchingResult
    {
        public global::HandRoyal.Bot.GraphQL.ICancelMatching_ActionQuery? ActionQuery { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface ICancelMatching_ActionQuery
    {
        public global::System.String? CancelMatching { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface ICancelMatching_ActionQuery_Query_ActionQuery : ICancelMatching_ActionQuery
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class GetUserDataResult : global::System.IEquatable<GetUserDataResult>, IGetUserDataResult
    {
        public GetUserDataResult(global::HandRoyal.Bot.GraphQL.IGetUserData_StateQuery? stateQuery)
        {
            StateQuery = stateQuery;
        }

        public global::HandRoyal.Bot.GraphQL.IGetUserData_StateQuery? StateQuery { get; }

        public virtual global::System.Boolean Equals(GetUserDataResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((StateQuery is null && other.StateQuery is null) || StateQuery != null && StateQuery.Equals(other.StateQuery)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetUserDataResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (StateQuery != null)
                {
                    hash ^= 397 * StateQuery.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class GetUserData_StateQuery_Query_StateQuery : global::System.IEquatable<GetUserData_StateQuery_Query_StateQuery>, IGetUserData_StateQuery_Query_StateQuery
    {
        public GetUserData_StateQuery_Query_StateQuery(global::HandRoyal.Bot.GraphQL.IGetUserData_StateQuery_GetUserData? getUserData)
        {
            GetUserData = getUserData;
        }

        public global::HandRoyal.Bot.GraphQL.IGetUserData_StateQuery_GetUserData? GetUserData { get; }

        public virtual global::System.Boolean Equals(GetUserData_StateQuery_Query_StateQuery? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((GetUserData is null && other.GetUserData is null) || GetUserData != null && GetUserData.Equals(other.GetUserData)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetUserData_StateQuery_Query_StateQuery)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (GetUserData != null)
                {
                    hash ^= 397 * GetUserData.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class GetUserData_StateQuery_GetUserData_UserData : global::System.IEquatable<GetUserData_StateQuery_GetUserData_UserData>, IGetUserData_StateQuery_GetUserData_UserData
    {
        public GetUserData_StateQuery_GetUserData_UserData(global::Libplanet.Crypto.Address id, global::System.String? name, global::System.Collections.Generic.IReadOnlyList<global::Libplanet.Crypto.Address>? registeredGloves, global::Libplanet.Crypto.Address equippedGlove, global::Libplanet.Crypto.Address sessionId, global::System.Int64 balance, global::System.Collections.Generic.IReadOnlyList<global::HandRoyal.Bot.GraphQL.IGetUserData_StateQuery_GetUserData_OwnedGloves?>? ownedGloves)
        {
            Id = id;
            Name = name;
            RegisteredGloves = registeredGloves;
            EquippedGlove = equippedGlove;
            SessionId = sessionId;
            Balance = balance;
            OwnedGloves = ownedGloves;
        }

        public global::Libplanet.Crypto.Address Id { get; }
        public global::System.String? Name { get; }
        public global::System.Collections.Generic.IReadOnlyList<global::Libplanet.Crypto.Address>? RegisteredGloves { get; }
        public global::Libplanet.Crypto.Address EquippedGlove { get; }
        public global::Libplanet.Crypto.Address SessionId { get; }
        public global::System.Int64 Balance { get; }
        public global::System.Collections.Generic.IReadOnlyList<global::HandRoyal.Bot.GraphQL.IGetUserData_StateQuery_GetUserData_OwnedGloves?>? OwnedGloves { get; }

        public virtual global::System.Boolean Equals(GetUserData_StateQuery_GetUserData_UserData? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)) && global::StrawberryShake.Internal.ComparisonHelper.SequenceEqual(RegisteredGloves, other.RegisteredGloves) && EquippedGlove.Equals(other.EquippedGlove) && SessionId.Equals(other.SessionId) && global::System.Object.Equals(Balance, other.Balance) && global::StrawberryShake.Internal.ComparisonHelper.SequenceEqual(OwnedGloves, other.OwnedGloves);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetUserData_StateQuery_GetUserData_UserData)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                if (RegisteredGloves != null)
                {
                    foreach (var RegisteredGloves_elm in RegisteredGloves)
                    {
                        hash ^= 397 * RegisteredGloves_elm.GetHashCode();
                    }
                }

                hash ^= 397 * EquippedGlove.GetHashCode();
                hash ^= 397 * SessionId.GetHashCode();
                hash ^= 397 * Balance.GetHashCode();
                if (OwnedGloves != null)
                {
                    foreach (var OwnedGloves_elm in OwnedGloves)
                    {
                        if (OwnedGloves_elm != null)
                        {
                            hash ^= 397 * OwnedGloves_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class GetUserData_StateQuery_GetUserData_OwnedGloves_GloveInfo : global::System.IEquatable<GetUserData_StateQuery_GetUserData_OwnedGloves_GloveInfo>, IGetUserData_StateQuery_GetUserData_OwnedGloves_GloveInfo
    {
        public GetUserData_StateQuery_GetUserData_OwnedGloves_GloveInfo(global::Libplanet.Crypto.Address id, global::System.Int32 count)
        {
            Id = id;
            Count = count;
        }

        public global::Libplanet.Crypto.Address Id { get; }
        public global::System.Int32 Count { get; }

        public virtual global::System.Boolean Equals(GetUserData_StateQuery_GetUserData_OwnedGloves_GloveInfo? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && global::System.Object.Equals(Count, other.Count);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetUserData_StateQuery_GetUserData_OwnedGloves_GloveInfo)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Count.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IGetUserDataResult
    {
        public global::HandRoyal.Bot.GraphQL.IGetUserData_StateQuery? StateQuery { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IGetUserData_StateQuery
    {
        public global::HandRoyal.Bot.GraphQL.IGetUserData_StateQuery_GetUserData? GetUserData { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IGetUserData_StateQuery_Query_StateQuery : IGetUserData_StateQuery
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IGetUserData_StateQuery_GetUserData
    {
        public global::Libplanet.Crypto.Address Id { get; }
        public global::System.String? Name { get; }
        public global::System.Collections.Generic.IReadOnlyList<global::Libplanet.Crypto.Address>? RegisteredGloves { get; }
        public global::Libplanet.Crypto.Address EquippedGlove { get; }
        public global::Libplanet.Crypto.Address SessionId { get; }
        public global::System.Int64 Balance { get; }
        public global::System.Collections.Generic.IReadOnlyList<global::HandRoyal.Bot.GraphQL.IGetUserData_StateQuery_GetUserData_OwnedGloves?>? OwnedGloves { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IGetUserData_StateQuery_GetUserData_UserData : IGetUserData_StateQuery_GetUserData
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IGetUserData_StateQuery_GetUserData_OwnedGloves
    {
        public global::Libplanet.Crypto.Address Id { get; }
        public global::System.Int32 Count { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IGetUserData_StateQuery_GetUserData_OwnedGloves_GloveInfo : IGetUserData_StateQuery_GetUserData_OwnedGloves
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class TransactionResultResult : global::System.IEquatable<TransactionResultResult>, ITransactionResultResult
    {
        public TransactionResultResult(global::HandRoyal.Bot.GraphQL.ITransactionResult_Transaction? transaction)
        {
            Transaction = transaction;
        }

        public global::HandRoyal.Bot.GraphQL.ITransactionResult_Transaction? Transaction { get; }

        public virtual global::System.Boolean Equals(TransactionResultResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Transaction is null && other.Transaction is null) || Transaction != null && Transaction.Equals(other.Transaction)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((TransactionResultResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Transaction != null)
                {
                    hash ^= 397 * Transaction.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class TransactionResult_Transaction_Query_Transaction : global::System.IEquatable<TransactionResult_Transaction_Query_Transaction>, ITransactionResult_Transaction_Query_Transaction
    {
        public TransactionResult_Transaction_Query_Transaction(global::HandRoyal.Bot.GraphQL.ITransactionResult_Transaction_TransactionResult? transactionResult)
        {
            TransactionResult = transactionResult;
        }

        public global::HandRoyal.Bot.GraphQL.ITransactionResult_Transaction_TransactionResult? TransactionResult { get; }

        public virtual global::System.Boolean Equals(TransactionResult_Transaction_Query_Transaction? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((TransactionResult is null && other.TransactionResult is null) || TransactionResult != null && TransactionResult.Equals(other.TransactionResult)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((TransactionResult_Transaction_Query_Transaction)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (TransactionResult != null)
                {
                    hash ^= 397 * TransactionResult.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class TransactionResult_Transaction_TransactionResult_TxResultValue : global::System.IEquatable<TransactionResult_Transaction_TransactionResult_TxResultValue>, ITransactionResult_Transaction_TransactionResult_TxResultValue
    {
        public TransactionResult_Transaction_TransactionResult_TxResultValue(global::HandRoyal.Bot.GraphQL.TxStatus txStatus, global::System.Int64? blockIndex, global::System.Collections.Generic.IReadOnlyList<global::System.String?>? exceptionNames)
        {
            TxStatus = txStatus;
            BlockIndex = blockIndex;
            ExceptionNames = exceptionNames;
        }

        public global::HandRoyal.Bot.GraphQL.TxStatus TxStatus { get; }
        public global::System.Int64? BlockIndex { get; }
        public global::System.Collections.Generic.IReadOnlyList<global::System.String?>? ExceptionNames { get; }

        public virtual global::System.Boolean Equals(TransactionResult_Transaction_TransactionResult_TxResultValue? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (TxStatus.Equals(other.TxStatus)) && global::System.Object.Equals(BlockIndex, other.BlockIndex) && global::StrawberryShake.Internal.ComparisonHelper.SequenceEqual(ExceptionNames, other.ExceptionNames);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((TransactionResult_Transaction_TransactionResult_TxResultValue)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * TxStatus.GetHashCode();
                if (BlockIndex != null)
                {
                    hash ^= 397 * BlockIndex.GetHashCode();
                }

                if (ExceptionNames != null)
                {
                    foreach (var ExceptionNames_elm in ExceptionNames)
                    {
                        if (ExceptionNames_elm != null)
                        {
                            hash ^= 397 * ExceptionNames_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface ITransactionResultResult
    {
        public global::HandRoyal.Bot.GraphQL.ITransactionResult_Transaction? Transaction { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface ITransactionResult_Transaction
    {
        public global::HandRoyal.Bot.GraphQL.ITransactionResult_Transaction_TransactionResult? TransactionResult { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface ITransactionResult_Transaction_Query_Transaction : ITransactionResult_Transaction
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface ITransactionResult_Transaction_TransactionResult
    {
        public global::HandRoyal.Bot.GraphQL.TxStatus TxStatus { get; }
        public global::System.Int64? BlockIndex { get; }
        public global::System.Collections.Generic.IReadOnlyList<global::System.String?>? ExceptionNames { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface ITransactionResult_Transaction_TransactionResult_TxResultValue : ITransactionResult_Transaction_TransactionResult
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class UnsignedTransactionResult : global::System.IEquatable<UnsignedTransactionResult>, IUnsignedTransactionResult
    {
        public UnsignedTransactionResult(global::HandRoyal.Bot.GraphQL.IUnsignedTransaction_Transaction? transaction)
        {
            Transaction = transaction;
        }

        public global::HandRoyal.Bot.GraphQL.IUnsignedTransaction_Transaction? Transaction { get; }

        public virtual global::System.Boolean Equals(UnsignedTransactionResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Transaction is null && other.Transaction is null) || Transaction != null && Transaction.Equals(other.Transaction)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((UnsignedTransactionResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Transaction != null)
                {
                    hash ^= 397 * Transaction.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class UnsignedTransaction_Transaction_Query_Transaction : global::System.IEquatable<UnsignedTransaction_Transaction_Query_Transaction>, IUnsignedTransaction_Transaction_Query_Transaction
    {
        public UnsignedTransaction_Transaction_Query_Transaction(global::System.String? unsignedTransaction)
        {
            UnsignedTransaction = unsignedTransaction;
        }

        public global::System.String? UnsignedTransaction { get; }

        public virtual global::System.Boolean Equals(UnsignedTransaction_Transaction_Query_Transaction? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((UnsignedTransaction is null && other.UnsignedTransaction is null) || UnsignedTransaction != null && UnsignedTransaction.Equals(other.UnsignedTransaction)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((UnsignedTransaction_Transaction_Query_Transaction)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (UnsignedTransaction != null)
                {
                    hash ^= 397 * UnsignedTransaction.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IUnsignedTransactionResult
    {
        public global::HandRoyal.Bot.GraphQL.IUnsignedTransaction_Transaction? Transaction { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IUnsignedTransaction_Transaction
    {
        public global::System.String? UnsignedTransaction { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IUnsignedTransaction_Transaction_Query_Transaction : IUnsignedTransaction_Transaction
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class GetSessionResult : global::System.IEquatable<GetSessionResult>, IGetSessionResult
    {
        public GetSessionResult(global::HandRoyal.Bot.GraphQL.IGetSession_StateQuery? stateQuery)
        {
            StateQuery = stateQuery;
        }

        public global::HandRoyal.Bot.GraphQL.IGetSession_StateQuery? StateQuery { get; }

        public virtual global::System.Boolean Equals(GetSessionResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((StateQuery is null && other.StateQuery is null) || StateQuery != null && StateQuery.Equals(other.StateQuery)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetSessionResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (StateQuery != null)
                {
                    hash ^= 397 * StateQuery.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class GetSession_StateQuery_Query_StateQuery : global::System.IEquatable<GetSession_StateQuery_Query_StateQuery>, IGetSession_StateQuery_Query_StateQuery
    {
        public GetSession_StateQuery_Query_StateQuery(global::HandRoyal.Bot.GraphQL.IGetSession_StateQuery_Session? session)
        {
            Session = session;
        }

        public global::HandRoyal.Bot.GraphQL.IGetSession_StateQuery_Session? Session { get; }

        public virtual global::System.Boolean Equals(GetSession_StateQuery_Query_StateQuery? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Session is null && other.Session is null) || Session != null && Session.Equals(other.Session)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetSession_StateQuery_Query_StateQuery)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Session != null)
                {
                    hash ^= 397 * Session.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class GetSession_StateQuery_Session_Session : global::System.IEquatable<GetSession_StateQuery_Session_Session>, IGetSession_StateQuery_Session_Session
    {
        public GetSession_StateQuery_Session_Session(global::HandRoyal.Bot.GraphQL.IGetSession_StateQuery_Session_Metadata? metadata, global::HandRoyal.Bot.GraphQL.SessionState state, global::System.Collections.Generic.IReadOnlyList<global::HandRoyal.Bot.GraphQL.IGetSession_StateQuery_Session_Players?>? players, global::System.Collections.Generic.IReadOnlyList<global::HandRoyal.Bot.GraphQL.IGetSession_StateQuery_Session_Phases?>? phases, global::System.Int64 creationHeight, global::System.Int64 startHeight, global::System.Int64 height)
        {
            Metadata = metadata;
            State = state;
            Players = players;
            Phases = phases;
            CreationHeight = creationHeight;
            StartHeight = startHeight;
            Height = height;
        }

        public global::HandRoyal.Bot.GraphQL.IGetSession_StateQuery_Session_Metadata? Metadata { get; }
        public global::HandRoyal.Bot.GraphQL.SessionState State { get; }
        public global::System.Collections.Generic.IReadOnlyList<global::HandRoyal.Bot.GraphQL.IGetSession_StateQuery_Session_Players?>? Players { get; }
        public global::System.Collections.Generic.IReadOnlyList<global::HandRoyal.Bot.GraphQL.IGetSession_StateQuery_Session_Phases?>? Phases { get; }
        public global::System.Int64 CreationHeight { get; }
        public global::System.Int64 StartHeight { get; }
        public global::System.Int64 Height { get; }

        public virtual global::System.Boolean Equals(GetSession_StateQuery_Session_Session? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Metadata is null && other.Metadata is null) || Metadata != null && Metadata.Equals(other.Metadata))) && State.Equals(other.State) && global::StrawberryShake.Internal.ComparisonHelper.SequenceEqual(Players, other.Players) && global::StrawberryShake.Internal.ComparisonHelper.SequenceEqual(Phases, other.Phases) && global::System.Object.Equals(CreationHeight, other.CreationHeight) && global::System.Object.Equals(StartHeight, other.StartHeight) && global::System.Object.Equals(Height, other.Height);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetSession_StateQuery_Session_Session)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Metadata != null)
                {
                    hash ^= 397 * Metadata.GetHashCode();
                }

                hash ^= 397 * State.GetHashCode();
                if (Players != null)
                {
                    foreach (var Players_elm in Players)
                    {
                        if (Players_elm != null)
                        {
                            hash ^= 397 * Players_elm.GetHashCode();
                        }
                    }
                }

                if (Phases != null)
                {
                    foreach (var Phases_elm in Phases)
                    {
                        if (Phases_elm != null)
                        {
                            hash ^= 397 * Phases_elm.GetHashCode();
                        }
                    }
                }

                hash ^= 397 * CreationHeight.GetHashCode();
                hash ^= 397 * StartHeight.GetHashCode();
                hash ^= 397 * Height.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class GetSession_StateQuery_Session_Metadata_SessionMetadata : global::System.IEquatable<GetSession_StateQuery_Session_Metadata_SessionMetadata>, IGetSession_StateQuery_Session_Metadata_SessionMetadata
    {
        public GetSession_StateQuery_Session_Metadata_SessionMetadata(global::Libplanet.Crypto.Address id, global::Libplanet.Crypto.Address organizer, global::Libplanet.Crypto.Address prize, global::System.Int32 maximumUser, global::System.Int32 minimumUser, global::System.Int32 remainingUser, global::System.Int64 startAfter, global::System.Int32 maxRounds, global::System.Int64 roundLength, global::System.Int64 roundInterval, global::System.Int32 initialHealthPoint, global::System.Int32 numberOfGloves, global::System.Collections.Generic.IReadOnlyList<global::Libplanet.Crypto.Address>? users)
        {
            Id = id;
            Organizer = organizer;
            Prize = prize;
            MaximumUser = maximumUser;
            MinimumUser = minimumUser;
            RemainingUser = remainingUser;
            StartAfter = startAfter;
            MaxRounds = maxRounds;
            RoundLength = roundLength;
            RoundInterval = roundInterval;
            InitialHealthPoint = initialHealthPoint;
            NumberOfGloves = numberOfGloves;
            Users = users;
        }

        public global::Libplanet.Crypto.Address Id { get; }
        public global::Libplanet.Crypto.Address Organizer { get; }
        public global::Libplanet.Crypto.Address Prize { get; }
        public global::System.Int32 MaximumUser { get; }
        public global::System.Int32 MinimumUser { get; }
        public global::System.Int32 RemainingUser { get; }
        public global::System.Int64 StartAfter { get; }
        public global::System.Int32 MaxRounds { get; }
        public global::System.Int64 RoundLength { get; }
        public global::System.Int64 RoundInterval { get; }
        public global::System.Int32 InitialHealthPoint { get; }
        public global::System.Int32 NumberOfGloves { get; }
        public global::System.Collections.Generic.IReadOnlyList<global::Libplanet.Crypto.Address>? Users { get; }

        public virtual global::System.Boolean Equals(GetSession_StateQuery_Session_Metadata_SessionMetadata? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && Organizer.Equals(other.Organizer) && Prize.Equals(other.Prize) && global::System.Object.Equals(MaximumUser, other.MaximumUser) && global::System.Object.Equals(MinimumUser, other.MinimumUser) && global::System.Object.Equals(RemainingUser, other.RemainingUser) && global::System.Object.Equals(StartAfter, other.StartAfter) && global::System.Object.Equals(MaxRounds, other.MaxRounds) && global::System.Object.Equals(RoundLength, other.RoundLength) && global::System.Object.Equals(RoundInterval, other.RoundInterval) && global::System.Object.Equals(InitialHealthPoint, other.InitialHealthPoint) && global::System.Object.Equals(NumberOfGloves, other.NumberOfGloves) && global::StrawberryShake.Internal.ComparisonHelper.SequenceEqual(Users, other.Users);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetSession_StateQuery_Session_Metadata_SessionMetadata)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Organizer.GetHashCode();
                hash ^= 397 * Prize.GetHashCode();
                hash ^= 397 * MaximumUser.GetHashCode();
                hash ^= 397 * MinimumUser.GetHashCode();
                hash ^= 397 * RemainingUser.GetHashCode();
                hash ^= 397 * StartAfter.GetHashCode();
                hash ^= 397 * MaxRounds.GetHashCode();
                hash ^= 397 * RoundLength.GetHashCode();
                hash ^= 397 * RoundInterval.GetHashCode();
                hash ^= 397 * InitialHealthPoint.GetHashCode();
                hash ^= 397 * NumberOfGloves.GetHashCode();
                if (Users != null)
                {
                    foreach (var Users_elm in Users)
                    {
                        hash ^= 397 * Users_elm.GetHashCode();
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class GetSession_StateQuery_Session_Players_Player : global::System.IEquatable<GetSession_StateQuery_Session_Players_Player>, IGetSession_StateQuery_Session_Players_Player
    {
        public GetSession_StateQuery_Session_Players_Player(global::Libplanet.Crypto.Address id, global::System.Collections.Generic.IReadOnlyList<global::Libplanet.Crypto.Address>? gloves, global::HandRoyal.Bot.GraphQL.PlayerState state)
        {
            Id = id;
            Gloves = gloves;
            State = state;
        }

        public global::Libplanet.Crypto.Address Id { get; }
        public global::System.Collections.Generic.IReadOnlyList<global::Libplanet.Crypto.Address>? Gloves { get; }
        public global::HandRoyal.Bot.GraphQL.PlayerState State { get; }

        public virtual global::System.Boolean Equals(GetSession_StateQuery_Session_Players_Player? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && global::StrawberryShake.Internal.ComparisonHelper.SequenceEqual(Gloves, other.Gloves) && State.Equals(other.State);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetSession_StateQuery_Session_Players_Player)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Gloves != null)
                {
                    foreach (var Gloves_elm in Gloves)
                    {
                        hash ^= 397 * Gloves_elm.GetHashCode();
                    }
                }

                hash ^= 397 * State.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class GetSession_StateQuery_Session_Phases_Phase : global::System.IEquatable<GetSession_StateQuery_Session_Phases_Phase>, IGetSession_StateQuery_Session_Phases_Phase
    {
        public GetSession_StateQuery_Session_Phases_Phase(global::System.Int64 height, global::System.Collections.Generic.IReadOnlyList<global::HandRoyal.Bot.GraphQL.IGetSession_StateQuery_Session_Phases_Matches?>? matches)
        {
            Height = height;
            Matches = matches;
        }

        public global::System.Int64 Height { get; }
        public global::System.Collections.Generic.IReadOnlyList<global::HandRoyal.Bot.GraphQL.IGetSession_StateQuery_Session_Phases_Matches?>? Matches { get; }

        public virtual global::System.Boolean Equals(GetSession_StateQuery_Session_Phases_Phase? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::System.Object.Equals(Height, other.Height)) && global::StrawberryShake.Internal.ComparisonHelper.SequenceEqual(Matches, other.Matches);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetSession_StateQuery_Session_Phases_Phase)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Height.GetHashCode();
                if (Matches != null)
                {
                    foreach (var Matches_elm in Matches)
                    {
                        if (Matches_elm != null)
                        {
                            hash ^= 397 * Matches_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class GetSession_StateQuery_Session_Phases_Matches_Match : global::System.IEquatable<GetSession_StateQuery_Session_Phases_Matches_Match>, IGetSession_StateQuery_Session_Phases_Matches_Match
    {
        public GetSession_StateQuery_Session_Phases_Matches_Match(global::System.Int64 startHeight, global::System.Collections.Generic.IReadOnlyList<global::System.Int32>? players, global::HandRoyal.Bot.GraphQL.MatchState state, global::System.Collections.Generic.IReadOnlyList<global::HandRoyal.Bot.GraphQL.IGetSession_StateQuery_Session_Phases_Matches_Rounds?>? rounds, global::System.Int32 winner)
        {
            StartHeight = startHeight;
            Players = players;
            State = state;
            Rounds = rounds;
            Winner = winner;
        }

        public global::System.Int64 StartHeight { get; }
        public global::System.Collections.Generic.IReadOnlyList<global::System.Int32>? Players { get; }
        public global::HandRoyal.Bot.GraphQL.MatchState State { get; }
        public global::System.Collections.Generic.IReadOnlyList<global::HandRoyal.Bot.GraphQL.IGetSession_StateQuery_Session_Phases_Matches_Rounds?>? Rounds { get; }
        public global::System.Int32 Winner { get; }

        public virtual global::System.Boolean Equals(GetSession_StateQuery_Session_Phases_Matches_Match? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::System.Object.Equals(StartHeight, other.StartHeight)) && global::StrawberryShake.Internal.ComparisonHelper.SequenceEqual(Players, other.Players) && State.Equals(other.State) && global::StrawberryShake.Internal.ComparisonHelper.SequenceEqual(Rounds, other.Rounds) && global::System.Object.Equals(Winner, other.Winner);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetSession_StateQuery_Session_Phases_Matches_Match)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * StartHeight.GetHashCode();
                if (Players != null)
                {
                    foreach (var Players_elm in Players)
                    {
                        hash ^= 397 * Players_elm.GetHashCode();
                    }
                }

                hash ^= 397 * State.GetHashCode();
                if (Rounds != null)
                {
                    foreach (var Rounds_elm in Rounds)
                    {
                        if (Rounds_elm != null)
                        {
                            hash ^= 397 * Rounds_elm.GetHashCode();
                        }
                    }
                }

                hash ^= 397 * Winner.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class GetSession_StateQuery_Session_Phases_Matches_Rounds_Round : global::System.IEquatable<GetSession_StateQuery_Session_Phases_Matches_Rounds_Round>, IGetSession_StateQuery_Session_Phases_Matches_Rounds_Round
    {
        public GetSession_StateQuery_Session_Phases_Matches_Rounds_Round(global::HandRoyal.Bot.GraphQL.IGetSession_StateQuery_Session_Phases_Matches_Rounds_Condition1? condition1, global::HandRoyal.Bot.GraphQL.IGetSession_StateQuery_Session_Phases_Matches_Rounds_Condition2? condition2, global::System.Int32 winner)
        {
            Condition1 = condition1;
            Condition2 = condition2;
            Winner = winner;
        }

        public global::HandRoyal.Bot.GraphQL.IGetSession_StateQuery_Session_Phases_Matches_Rounds_Condition1? Condition1 { get; }
        public global::HandRoyal.Bot.GraphQL.IGetSession_StateQuery_Session_Phases_Matches_Rounds_Condition2? Condition2 { get; }
        public global::System.Int32 Winner { get; }

        public virtual global::System.Boolean Equals(GetSession_StateQuery_Session_Phases_Matches_Rounds_Round? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Condition1 is null && other.Condition1 is null) || Condition1 != null && Condition1.Equals(other.Condition1))) && ((Condition2 is null && other.Condition2 is null) || Condition2 != null && Condition2.Equals(other.Condition2)) && global::System.Object.Equals(Winner, other.Winner);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetSession_StateQuery_Session_Phases_Matches_Rounds_Round)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Condition1 != null)
                {
                    hash ^= 397 * Condition1.GetHashCode();
                }

                if (Condition2 != null)
                {
                    hash ^= 397 * Condition2.GetHashCode();
                }

                hash ^= 397 * Winner.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class GetSession_StateQuery_Session_Phases_Matches_Rounds_Condition1_Condition : global::System.IEquatable<GetSession_StateQuery_Session_Phases_Matches_Rounds_Condition1_Condition>, IGetSession_StateQuery_Session_Phases_Matches_Rounds_Condition1_Condition
    {
        public GetSession_StateQuery_Session_Phases_Matches_Rounds_Condition1_Condition(global::System.Int32 healthPoint, global::System.Collections.Generic.IReadOnlyList<global::System.Boolean>? gloveUsed, global::System.Int32 submission)
        {
            HealthPoint = healthPoint;
            GloveUsed = gloveUsed;
            Submission = submission;
        }

        public global::System.Int32 HealthPoint { get; }
        public global::System.Collections.Generic.IReadOnlyList<global::System.Boolean>? GloveUsed { get; }
        public global::System.Int32 Submission { get; }

        public virtual global::System.Boolean Equals(GetSession_StateQuery_Session_Phases_Matches_Rounds_Condition1_Condition? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::System.Object.Equals(HealthPoint, other.HealthPoint)) && global::StrawberryShake.Internal.ComparisonHelper.SequenceEqual(GloveUsed, other.GloveUsed) && global::System.Object.Equals(Submission, other.Submission);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetSession_StateQuery_Session_Phases_Matches_Rounds_Condition1_Condition)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * HealthPoint.GetHashCode();
                if (GloveUsed != null)
                {
                    foreach (var GloveUsed_elm in GloveUsed)
                    {
                        hash ^= 397 * GloveUsed_elm.GetHashCode();
                    }
                }

                hash ^= 397 * Submission.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class GetSession_StateQuery_Session_Phases_Matches_Rounds_Condition2_Condition : global::System.IEquatable<GetSession_StateQuery_Session_Phases_Matches_Rounds_Condition2_Condition>, IGetSession_StateQuery_Session_Phases_Matches_Rounds_Condition2_Condition
    {
        public GetSession_StateQuery_Session_Phases_Matches_Rounds_Condition2_Condition(global::System.Int32 healthPoint, global::System.Collections.Generic.IReadOnlyList<global::System.Boolean>? gloveUsed, global::System.Int32 submission)
        {
            HealthPoint = healthPoint;
            GloveUsed = gloveUsed;
            Submission = submission;
        }

        public global::System.Int32 HealthPoint { get; }
        public global::System.Collections.Generic.IReadOnlyList<global::System.Boolean>? GloveUsed { get; }
        public global::System.Int32 Submission { get; }

        public virtual global::System.Boolean Equals(GetSession_StateQuery_Session_Phases_Matches_Rounds_Condition2_Condition? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::System.Object.Equals(HealthPoint, other.HealthPoint)) && global::StrawberryShake.Internal.ComparisonHelper.SequenceEqual(GloveUsed, other.GloveUsed) && global::System.Object.Equals(Submission, other.Submission);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetSession_StateQuery_Session_Phases_Matches_Rounds_Condition2_Condition)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * HealthPoint.GetHashCode();
                if (GloveUsed != null)
                {
                    foreach (var GloveUsed_elm in GloveUsed)
                    {
                        hash ^= 397 * GloveUsed_elm.GetHashCode();
                    }
                }

                hash ^= 397 * Submission.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IGetSessionResult
    {
        public global::HandRoyal.Bot.GraphQL.IGetSession_StateQuery? StateQuery { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IGetSession_StateQuery
    {
        public global::HandRoyal.Bot.GraphQL.IGetSession_StateQuery_Session? Session { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IGetSession_StateQuery_Query_StateQuery : IGetSession_StateQuery
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IGetSession_StateQuery_Session
    {
        public global::HandRoyal.Bot.GraphQL.IGetSession_StateQuery_Session_Metadata? Metadata { get; }
        public global::HandRoyal.Bot.GraphQL.SessionState State { get; }
        public global::System.Collections.Generic.IReadOnlyList<global::HandRoyal.Bot.GraphQL.IGetSession_StateQuery_Session_Players?>? Players { get; }
        public global::System.Collections.Generic.IReadOnlyList<global::HandRoyal.Bot.GraphQL.IGetSession_StateQuery_Session_Phases?>? Phases { get; }
        public global::System.Int64 CreationHeight { get; }
        public global::System.Int64 StartHeight { get; }
        public global::System.Int64 Height { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IGetSession_StateQuery_Session_Session : IGetSession_StateQuery_Session
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IGetSession_StateQuery_Session_Metadata
    {
        public global::Libplanet.Crypto.Address Id { get; }
        public global::Libplanet.Crypto.Address Organizer { get; }
        public global::Libplanet.Crypto.Address Prize { get; }
        public global::System.Int32 MaximumUser { get; }
        public global::System.Int32 MinimumUser { get; }
        public global::System.Int32 RemainingUser { get; }
        public global::System.Int64 StartAfter { get; }
        public global::System.Int32 MaxRounds { get; }
        public global::System.Int64 RoundLength { get; }
        public global::System.Int64 RoundInterval { get; }
        public global::System.Int32 InitialHealthPoint { get; }
        public global::System.Int32 NumberOfGloves { get; }
        public global::System.Collections.Generic.IReadOnlyList<global::Libplanet.Crypto.Address>? Users { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IGetSession_StateQuery_Session_Metadata_SessionMetadata : IGetSession_StateQuery_Session_Metadata
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IGetSession_StateQuery_Session_Players
    {
        public global::Libplanet.Crypto.Address Id { get; }
        public global::System.Collections.Generic.IReadOnlyList<global::Libplanet.Crypto.Address>? Gloves { get; }
        public global::HandRoyal.Bot.GraphQL.PlayerState State { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IGetSession_StateQuery_Session_Players_Player : IGetSession_StateQuery_Session_Players
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IGetSession_StateQuery_Session_Phases
    {
        public global::System.Int64 Height { get; }
        public global::System.Collections.Generic.IReadOnlyList<global::HandRoyal.Bot.GraphQL.IGetSession_StateQuery_Session_Phases_Matches?>? Matches { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IGetSession_StateQuery_Session_Phases_Phase : IGetSession_StateQuery_Session_Phases
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IGetSession_StateQuery_Session_Phases_Matches
    {
        public global::System.Int64 StartHeight { get; }
        public global::System.Collections.Generic.IReadOnlyList<global::System.Int32>? Players { get; }
        public global::HandRoyal.Bot.GraphQL.MatchState State { get; }
        public global::System.Collections.Generic.IReadOnlyList<global::HandRoyal.Bot.GraphQL.IGetSession_StateQuery_Session_Phases_Matches_Rounds?>? Rounds { get; }
        public global::System.Int32 Winner { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IGetSession_StateQuery_Session_Phases_Matches_Match : IGetSession_StateQuery_Session_Phases_Matches
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IGetSession_StateQuery_Session_Phases_Matches_Rounds
    {
        public global::HandRoyal.Bot.GraphQL.IGetSession_StateQuery_Session_Phases_Matches_Rounds_Condition1? Condition1 { get; }
        public global::HandRoyal.Bot.GraphQL.IGetSession_StateQuery_Session_Phases_Matches_Rounds_Condition2? Condition2 { get; }
        public global::System.Int32 Winner { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IGetSession_StateQuery_Session_Phases_Matches_Rounds_Round : IGetSession_StateQuery_Session_Phases_Matches_Rounds
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IGetSession_StateQuery_Session_Phases_Matches_Rounds_Condition1
    {
        public global::System.Int32 HealthPoint { get; }
        public global::System.Collections.Generic.IReadOnlyList<global::System.Boolean>? GloveUsed { get; }
        public global::System.Int32 Submission { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IGetSession_StateQuery_Session_Phases_Matches_Rounds_Condition1_Condition : IGetSession_StateQuery_Session_Phases_Matches_Rounds_Condition1
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IGetSession_StateQuery_Session_Phases_Matches_Rounds_Condition2
    {
        public global::System.Int32 HealthPoint { get; }
        public global::System.Collections.Generic.IReadOnlyList<global::System.Boolean>? GloveUsed { get; }
        public global::System.Int32 Submission { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IGetSession_StateQuery_Session_Phases_Matches_Rounds_Condition2_Condition : IGetSession_StateQuery_Session_Phases_Matches_Rounds_Condition2
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class GetUserScopedSessionResult : global::System.IEquatable<GetUserScopedSessionResult>, IGetUserScopedSessionResult
    {
        public GetUserScopedSessionResult(global::HandRoyal.Bot.GraphQL.IGetUserScopedSession_StateQuery? stateQuery)
        {
            StateQuery = stateQuery;
        }

        public global::HandRoyal.Bot.GraphQL.IGetUserScopedSession_StateQuery? StateQuery { get; }

        public virtual global::System.Boolean Equals(GetUserScopedSessionResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((StateQuery is null && other.StateQuery is null) || StateQuery != null && StateQuery.Equals(other.StateQuery)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetUserScopedSessionResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (StateQuery != null)
                {
                    hash ^= 397 * StateQuery.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class GetUserScopedSession_StateQuery_Query_StateQuery : global::System.IEquatable<GetUserScopedSession_StateQuery_Query_StateQuery>, IGetUserScopedSession_StateQuery_Query_StateQuery
    {
        public GetUserScopedSession_StateQuery_Query_StateQuery(global::HandRoyal.Bot.GraphQL.IGetUserScopedSession_StateQuery_UserScopedSession? userScopedSession)
        {
            UserScopedSession = userScopedSession;
        }

        public global::HandRoyal.Bot.GraphQL.IGetUserScopedSession_StateQuery_UserScopedSession? UserScopedSession { get; }

        public virtual global::System.Boolean Equals(GetUserScopedSession_StateQuery_Query_StateQuery? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((UserScopedSession is null && other.UserScopedSession is null) || UserScopedSession != null && UserScopedSession.Equals(other.UserScopedSession)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetUserScopedSession_StateQuery_Query_StateQuery)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (UserScopedSession != null)
                {
                    hash ^= 397 * UserScopedSession.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class GetUserScopedSession_StateQuery_UserScopedSession_SessionEventData : global::System.IEquatable<GetUserScopedSession_StateQuery_UserScopedSession_SessionEventData>, IGetUserScopedSession_StateQuery_UserScopedSession_SessionEventData
    {
        public GetUserScopedSession_StateQuery_UserScopedSession_SessionEventData(global::Libplanet.Crypto.Address? sessionId, global::System.Int64 height, global::HandRoyal.Bot.GraphQL.SessionState sessionState, global::Libplanet.Crypto.Address? organizerAddress, global::Libplanet.Crypto.Address? opponentAddress, global::System.Int64 currentInterval, global::System.Boolean isPlayer, global::System.Collections.Generic.IReadOnlyList<global::Libplanet.Crypto.Address>? myGloves, global::System.Collections.Generic.IReadOnlyList<global::Libplanet.Crypto.Address>? opponentGloves, global::System.Int32? playersLeft, global::System.Int32? currentPhaseIndex, global::System.Int32? currentUserRoundIndex, global::HandRoyal.Bot.GraphQL.IGetUserScopedSession_StateQuery_UserScopedSession_MyCondition? myCondition, global::HandRoyal.Bot.GraphQL.IGetUserScopedSession_StateQuery_UserScopedSession_OpponentCondition? opponentCondition, global::System.String? lastRoundWinner, global::HandRoyal.Bot.GraphQL.MatchState? currentUserMatchState, global::HandRoyal.Bot.GraphQL.PlayerState? playerState, global::System.Int64 intervalEndHeight)
        {
            SessionId = sessionId;
            Height = height;
            SessionState = sessionState;
            OrganizerAddress = organizerAddress;
            OpponentAddress = opponentAddress;
            CurrentInterval = currentInterval;
            IsPlayer = isPlayer;
            MyGloves = myGloves;
            OpponentGloves = opponentGloves;
            PlayersLeft = playersLeft;
            CurrentPhaseIndex = currentPhaseIndex;
            CurrentUserRoundIndex = currentUserRoundIndex;
            MyCondition = myCondition;
            OpponentCondition = opponentCondition;
            LastRoundWinner = lastRoundWinner;
            CurrentUserMatchState = currentUserMatchState;
            PlayerState = playerState;
            IntervalEndHeight = intervalEndHeight;
        }

        public global::Libplanet.Crypto.Address? SessionId { get; }
        public global::System.Int64 Height { get; }
        public global::HandRoyal.Bot.GraphQL.SessionState SessionState { get; }
        public global::Libplanet.Crypto.Address? OrganizerAddress { get; }
        public global::Libplanet.Crypto.Address? OpponentAddress { get; }
        public global::System.Int64 CurrentInterval { get; }
        public global::System.Boolean IsPlayer { get; }
        public global::System.Collections.Generic.IReadOnlyList<global::Libplanet.Crypto.Address>? MyGloves { get; }
        public global::System.Collections.Generic.IReadOnlyList<global::Libplanet.Crypto.Address>? OpponentGloves { get; }
        public global::System.Int32? PlayersLeft { get; }
        public global::System.Int32? CurrentPhaseIndex { get; }
        public global::System.Int32? CurrentUserRoundIndex { get; }
        public global::HandRoyal.Bot.GraphQL.IGetUserScopedSession_StateQuery_UserScopedSession_MyCondition? MyCondition { get; }
        public global::HandRoyal.Bot.GraphQL.IGetUserScopedSession_StateQuery_UserScopedSession_OpponentCondition? OpponentCondition { get; }
        public global::System.String? LastRoundWinner { get; }
        public global::HandRoyal.Bot.GraphQL.MatchState? CurrentUserMatchState { get; }
        public global::HandRoyal.Bot.GraphQL.PlayerState? PlayerState { get; }
        public global::System.Int64 IntervalEndHeight { get; }

        public virtual global::System.Boolean Equals(GetUserScopedSession_StateQuery_UserScopedSession_SessionEventData? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((SessionId is null && other.SessionId is null) || SessionId != null && SessionId.Equals(other.SessionId))) && global::System.Object.Equals(Height, other.Height) && SessionState.Equals(other.SessionState) && ((OrganizerAddress is null && other.OrganizerAddress is null) || OrganizerAddress != null && OrganizerAddress.Equals(other.OrganizerAddress)) && ((OpponentAddress is null && other.OpponentAddress is null) || OpponentAddress != null && OpponentAddress.Equals(other.OpponentAddress)) && global::System.Object.Equals(CurrentInterval, other.CurrentInterval) && global::System.Object.Equals(IsPlayer, other.IsPlayer) && global::StrawberryShake.Internal.ComparisonHelper.SequenceEqual(MyGloves, other.MyGloves) && global::StrawberryShake.Internal.ComparisonHelper.SequenceEqual(OpponentGloves, other.OpponentGloves) && global::System.Object.Equals(PlayersLeft, other.PlayersLeft) && global::System.Object.Equals(CurrentPhaseIndex, other.CurrentPhaseIndex) && global::System.Object.Equals(CurrentUserRoundIndex, other.CurrentUserRoundIndex) && ((MyCondition is null && other.MyCondition is null) || MyCondition != null && MyCondition.Equals(other.MyCondition)) && ((OpponentCondition is null && other.OpponentCondition is null) || OpponentCondition != null && OpponentCondition.Equals(other.OpponentCondition)) && ((LastRoundWinner is null && other.LastRoundWinner is null) || LastRoundWinner != null && LastRoundWinner.Equals(other.LastRoundWinner)) && ((CurrentUserMatchState is null && other.CurrentUserMatchState is null) || CurrentUserMatchState != null && CurrentUserMatchState.Equals(other.CurrentUserMatchState)) && ((PlayerState is null && other.PlayerState is null) || PlayerState != null && PlayerState.Equals(other.PlayerState)) && global::System.Object.Equals(IntervalEndHeight, other.IntervalEndHeight);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetUserScopedSession_StateQuery_UserScopedSession_SessionEventData)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (SessionId != null)
                {
                    hash ^= 397 * SessionId.GetHashCode();
                }

                hash ^= 397 * Height.GetHashCode();
                hash ^= 397 * SessionState.GetHashCode();
                if (OrganizerAddress != null)
                {
                    hash ^= 397 * OrganizerAddress.GetHashCode();
                }

                if (OpponentAddress != null)
                {
                    hash ^= 397 * OpponentAddress.GetHashCode();
                }

                hash ^= 397 * CurrentInterval.GetHashCode();
                hash ^= 397 * IsPlayer.GetHashCode();
                if (MyGloves != null)
                {
                    foreach (var MyGloves_elm in MyGloves)
                    {
                        hash ^= 397 * MyGloves_elm.GetHashCode();
                    }
                }

                if (OpponentGloves != null)
                {
                    foreach (var OpponentGloves_elm in OpponentGloves)
                    {
                        hash ^= 397 * OpponentGloves_elm.GetHashCode();
                    }
                }

                if (PlayersLeft != null)
                {
                    hash ^= 397 * PlayersLeft.GetHashCode();
                }

                if (CurrentPhaseIndex != null)
                {
                    hash ^= 397 * CurrentPhaseIndex.GetHashCode();
                }

                if (CurrentUserRoundIndex != null)
                {
                    hash ^= 397 * CurrentUserRoundIndex.GetHashCode();
                }

                if (MyCondition != null)
                {
                    hash ^= 397 * MyCondition.GetHashCode();
                }

                if (OpponentCondition != null)
                {
                    hash ^= 397 * OpponentCondition.GetHashCode();
                }

                if (LastRoundWinner != null)
                {
                    hash ^= 397 * LastRoundWinner.GetHashCode();
                }

                if (CurrentUserMatchState != null)
                {
                    hash ^= 397 * CurrentUserMatchState.GetHashCode();
                }

                if (PlayerState != null)
                {
                    hash ^= 397 * PlayerState.GetHashCode();
                }

                hash ^= 397 * IntervalEndHeight.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class GetUserScopedSession_StateQuery_UserScopedSession_MyCondition_Condition : global::System.IEquatable<GetUserScopedSession_StateQuery_UserScopedSession_MyCondition_Condition>, IGetUserScopedSession_StateQuery_UserScopedSession_MyCondition_Condition
    {
        public GetUserScopedSession_StateQuery_UserScopedSession_MyCondition_Condition(global::System.Int32 healthPoint, global::System.Collections.Generic.IReadOnlyList<global::System.Boolean>? gloveUsed, global::System.Int32 submission, global::System.Collections.Generic.IReadOnlyList<global::HandRoyal.Bot.GraphQL.IGetUserScopedSession_StateQuery_UserScopedSession_MyCondition_ActiveEffectData?>? activeEffectData)
        {
            HealthPoint = healthPoint;
            GloveUsed = gloveUsed;
            Submission = submission;
            ActiveEffectData = activeEffectData;
        }

        public global::System.Int32 HealthPoint { get; }
        public global::System.Collections.Generic.IReadOnlyList<global::System.Boolean>? GloveUsed { get; }
        public global::System.Int32 Submission { get; }
        public global::System.Collections.Generic.IReadOnlyList<global::HandRoyal.Bot.GraphQL.IGetUserScopedSession_StateQuery_UserScopedSession_MyCondition_ActiveEffectData?>? ActiveEffectData { get; }

        public virtual global::System.Boolean Equals(GetUserScopedSession_StateQuery_UserScopedSession_MyCondition_Condition? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::System.Object.Equals(HealthPoint, other.HealthPoint)) && global::StrawberryShake.Internal.ComparisonHelper.SequenceEqual(GloveUsed, other.GloveUsed) && global::System.Object.Equals(Submission, other.Submission) && global::StrawberryShake.Internal.ComparisonHelper.SequenceEqual(ActiveEffectData, other.ActiveEffectData);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetUserScopedSession_StateQuery_UserScopedSession_MyCondition_Condition)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * HealthPoint.GetHashCode();
                if (GloveUsed != null)
                {
                    foreach (var GloveUsed_elm in GloveUsed)
                    {
                        hash ^= 397 * GloveUsed_elm.GetHashCode();
                    }
                }

                hash ^= 397 * Submission.GetHashCode();
                if (ActiveEffectData != null)
                {
                    foreach (var ActiveEffectData_elm in ActiveEffectData)
                    {
                        if (ActiveEffectData_elm != null)
                        {
                            hash ^= 397 * ActiveEffectData_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class GetUserScopedSession_StateQuery_UserScopedSession_OpponentCondition_Condition : global::System.IEquatable<GetUserScopedSession_StateQuery_UserScopedSession_OpponentCondition_Condition>, IGetUserScopedSession_StateQuery_UserScopedSession_OpponentCondition_Condition
    {
        public GetUserScopedSession_StateQuery_UserScopedSession_OpponentCondition_Condition(global::System.Int32 healthPoint, global::System.Collections.Generic.IReadOnlyList<global::System.Boolean>? gloveUsed, global::System.Int32 submission, global::System.Collections.Generic.IReadOnlyList<global::HandRoyal.Bot.GraphQL.IGetUserScopedSession_StateQuery_UserScopedSession_OpponentCondition_ActiveEffectData?>? activeEffectData)
        {
            HealthPoint = healthPoint;
            GloveUsed = gloveUsed;
            Submission = submission;
            ActiveEffectData = activeEffectData;
        }

        public global::System.Int32 HealthPoint { get; }
        public global::System.Collections.Generic.IReadOnlyList<global::System.Boolean>? GloveUsed { get; }
        public global::System.Int32 Submission { get; }
        public global::System.Collections.Generic.IReadOnlyList<global::HandRoyal.Bot.GraphQL.IGetUserScopedSession_StateQuery_UserScopedSession_OpponentCondition_ActiveEffectData?>? ActiveEffectData { get; }

        public virtual global::System.Boolean Equals(GetUserScopedSession_StateQuery_UserScopedSession_OpponentCondition_Condition? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::System.Object.Equals(HealthPoint, other.HealthPoint)) && global::StrawberryShake.Internal.ComparisonHelper.SequenceEqual(GloveUsed, other.GloveUsed) && global::System.Object.Equals(Submission, other.Submission) && global::StrawberryShake.Internal.ComparisonHelper.SequenceEqual(ActiveEffectData, other.ActiveEffectData);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetUserScopedSession_StateQuery_UserScopedSession_OpponentCondition_Condition)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * HealthPoint.GetHashCode();
                if (GloveUsed != null)
                {
                    foreach (var GloveUsed_elm in GloveUsed)
                    {
                        hash ^= 397 * GloveUsed_elm.GetHashCode();
                    }
                }

                hash ^= 397 * Submission.GetHashCode();
                if (ActiveEffectData != null)
                {
                    foreach (var ActiveEffectData_elm in ActiveEffectData)
                    {
                        if (ActiveEffectData_elm != null)
                        {
                            hash ^= 397 * ActiveEffectData_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class GetUserScopedSession_StateQuery_UserScopedSession_MyCondition_ActiveEffectData_EffectData : global::System.IEquatable<GetUserScopedSession_StateQuery_UserScopedSession_MyCondition_ActiveEffectData_EffectData>, IGetUserScopedSession_StateQuery_UserScopedSession_MyCondition_ActiveEffectData_EffectData
    {
        public GetUserScopedSession_StateQuery_UserScopedSession_MyCondition_ActiveEffectData_EffectData(global::HandRoyal.Bot.GraphQL.EffectType type, global::System.Int32 duration, global::System.Collections.Generic.IReadOnlyList<global::System.Int32>? parameters)
        {
            Type = type;
            Duration = duration;
            Parameters = parameters;
        }

        public global::HandRoyal.Bot.GraphQL.EffectType Type { get; }
        public global::System.Int32 Duration { get; }
        public global::System.Collections.Generic.IReadOnlyList<global::System.Int32>? Parameters { get; }

        public virtual global::System.Boolean Equals(GetUserScopedSession_StateQuery_UserScopedSession_MyCondition_ActiveEffectData_EffectData? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Type.Equals(other.Type)) && global::System.Object.Equals(Duration, other.Duration) && global::StrawberryShake.Internal.ComparisonHelper.SequenceEqual(Parameters, other.Parameters);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetUserScopedSession_StateQuery_UserScopedSession_MyCondition_ActiveEffectData_EffectData)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Type.GetHashCode();
                hash ^= 397 * Duration.GetHashCode();
                if (Parameters != null)
                {
                    foreach (var Parameters_elm in Parameters)
                    {
                        hash ^= 397 * Parameters_elm.GetHashCode();
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class GetUserScopedSession_StateQuery_UserScopedSession_OpponentCondition_ActiveEffectData_EffectData : global::System.IEquatable<GetUserScopedSession_StateQuery_UserScopedSession_OpponentCondition_ActiveEffectData_EffectData>, IGetUserScopedSession_StateQuery_UserScopedSession_OpponentCondition_ActiveEffectData_EffectData
    {
        public GetUserScopedSession_StateQuery_UserScopedSession_OpponentCondition_ActiveEffectData_EffectData(global::HandRoyal.Bot.GraphQL.EffectType type, global::System.Int32 duration, global::System.Collections.Generic.IReadOnlyList<global::System.Int32>? parameters)
        {
            Type = type;
            Duration = duration;
            Parameters = parameters;
        }

        public global::HandRoyal.Bot.GraphQL.EffectType Type { get; }
        public global::System.Int32 Duration { get; }
        public global::System.Collections.Generic.IReadOnlyList<global::System.Int32>? Parameters { get; }

        public virtual global::System.Boolean Equals(GetUserScopedSession_StateQuery_UserScopedSession_OpponentCondition_ActiveEffectData_EffectData? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Type.Equals(other.Type)) && global::System.Object.Equals(Duration, other.Duration) && global::StrawberryShake.Internal.ComparisonHelper.SequenceEqual(Parameters, other.Parameters);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetUserScopedSession_StateQuery_UserScopedSession_OpponentCondition_ActiveEffectData_EffectData)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Type.GetHashCode();
                hash ^= 397 * Duration.GetHashCode();
                if (Parameters != null)
                {
                    foreach (var Parameters_elm in Parameters)
                    {
                        hash ^= 397 * Parameters_elm.GetHashCode();
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IGetUserScopedSessionResult
    {
        public global::HandRoyal.Bot.GraphQL.IGetUserScopedSession_StateQuery? StateQuery { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IGetUserScopedSession_StateQuery
    {
        public global::HandRoyal.Bot.GraphQL.IGetUserScopedSession_StateQuery_UserScopedSession? UserScopedSession { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IGetUserScopedSession_StateQuery_Query_StateQuery : IGetUserScopedSession_StateQuery
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IGetUserScopedSession_StateQuery_UserScopedSession
    {
        public global::Libplanet.Crypto.Address? SessionId { get; }
        public global::System.Int64 Height { get; }
        public global::HandRoyal.Bot.GraphQL.SessionState SessionState { get; }
        public global::Libplanet.Crypto.Address? OrganizerAddress { get; }
        public global::Libplanet.Crypto.Address? OpponentAddress { get; }
        public global::System.Int64 CurrentInterval { get; }
        public global::System.Boolean IsPlayer { get; }
        public global::System.Collections.Generic.IReadOnlyList<global::Libplanet.Crypto.Address>? MyGloves { get; }
        public global::System.Collections.Generic.IReadOnlyList<global::Libplanet.Crypto.Address>? OpponentGloves { get; }
        public global::System.Int32? PlayersLeft { get; }
        public global::System.Int32? CurrentPhaseIndex { get; }
        public global::System.Int32? CurrentUserRoundIndex { get; }
        public global::HandRoyal.Bot.GraphQL.IGetUserScopedSession_StateQuery_UserScopedSession_MyCondition? MyCondition { get; }
        public global::HandRoyal.Bot.GraphQL.IGetUserScopedSession_StateQuery_UserScopedSession_OpponentCondition? OpponentCondition { get; }
        public global::System.String? LastRoundWinner { get; }
        public global::HandRoyal.Bot.GraphQL.MatchState? CurrentUserMatchState { get; }
        public global::HandRoyal.Bot.GraphQL.PlayerState? PlayerState { get; }
        public global::System.Int64 IntervalEndHeight { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IGetUserScopedSession_StateQuery_UserScopedSession_SessionEventData : IGetUserScopedSession_StateQuery_UserScopedSession
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IGetUserScopedSession_StateQuery_UserScopedSession_MyCondition
    {
        public global::System.Int32 HealthPoint { get; }
        public global::System.Collections.Generic.IReadOnlyList<global::System.Boolean>? GloveUsed { get; }
        public global::System.Int32 Submission { get; }
        public global::System.Collections.Generic.IReadOnlyList<global::HandRoyal.Bot.GraphQL.IGetUserScopedSession_StateQuery_UserScopedSession_MyCondition_ActiveEffectData?>? ActiveEffectData { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IGetUserScopedSession_StateQuery_UserScopedSession_MyCondition_Condition : IGetUserScopedSession_StateQuery_UserScopedSession_MyCondition
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IGetUserScopedSession_StateQuery_UserScopedSession_OpponentCondition
    {
        public global::System.Int32 HealthPoint { get; }
        public global::System.Collections.Generic.IReadOnlyList<global::System.Boolean>? GloveUsed { get; }
        public global::System.Int32 Submission { get; }
        public global::System.Collections.Generic.IReadOnlyList<global::HandRoyal.Bot.GraphQL.IGetUserScopedSession_StateQuery_UserScopedSession_OpponentCondition_ActiveEffectData?>? ActiveEffectData { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IGetUserScopedSession_StateQuery_UserScopedSession_OpponentCondition_Condition : IGetUserScopedSession_StateQuery_UserScopedSession_OpponentCondition
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IGetUserScopedSession_StateQuery_UserScopedSession_MyCondition_ActiveEffectData
    {
        public global::HandRoyal.Bot.GraphQL.EffectType Type { get; }
        public global::System.Int32 Duration { get; }
        public global::System.Collections.Generic.IReadOnlyList<global::System.Int32>? Parameters { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IGetUserScopedSession_StateQuery_UserScopedSession_MyCondition_ActiveEffectData_EffectData : IGetUserScopedSession_StateQuery_UserScopedSession_MyCondition_ActiveEffectData
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IGetUserScopedSession_StateQuery_UserScopedSession_OpponentCondition_ActiveEffectData
    {
        public global::HandRoyal.Bot.GraphQL.EffectType Type { get; }
        public global::System.Int32 Duration { get; }
        public global::System.Collections.Generic.IReadOnlyList<global::System.Int32>? Parameters { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IGetUserScopedSession_StateQuery_UserScopedSession_OpponentCondition_ActiveEffectData_EffectData : IGetUserScopedSession_StateQuery_UserScopedSession_OpponentCondition_ActiveEffectData
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class GetJoinableSessionsResult : global::System.IEquatable<GetJoinableSessionsResult>, IGetJoinableSessionsResult
    {
        public GetJoinableSessionsResult(global::HandRoyal.Bot.GraphQL.IGetJoinableSessions_StateQuery? stateQuery)
        {
            StateQuery = stateQuery;
        }

        public global::HandRoyal.Bot.GraphQL.IGetJoinableSessions_StateQuery? StateQuery { get; }

        public virtual global::System.Boolean Equals(GetJoinableSessionsResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((StateQuery is null && other.StateQuery is null) || StateQuery != null && StateQuery.Equals(other.StateQuery)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetJoinableSessionsResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (StateQuery != null)
                {
                    hash ^= 397 * StateQuery.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class GetJoinableSessions_StateQuery_Query_StateQuery : global::System.IEquatable<GetJoinableSessions_StateQuery_Query_StateQuery>, IGetJoinableSessions_StateQuery_Query_StateQuery
    {
        public GetJoinableSessions_StateQuery_Query_StateQuery(global::System.Collections.Generic.IReadOnlyList<global::HandRoyal.Bot.GraphQL.IGetJoinableSessions_StateQuery_Sessions?>? sessions)
        {
            Sessions = sessions;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::HandRoyal.Bot.GraphQL.IGetJoinableSessions_StateQuery_Sessions?>? Sessions { get; }

        public virtual global::System.Boolean Equals(GetJoinableSessions_StateQuery_Query_StateQuery? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Internal.ComparisonHelper.SequenceEqual(Sessions, other.Sessions));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetJoinableSessions_StateQuery_Query_StateQuery)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Sessions != null)
                {
                    foreach (var Sessions_elm in Sessions)
                    {
                        if (Sessions_elm != null)
                        {
                            hash ^= 397 * Sessions_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class GetJoinableSessions_StateQuery_Sessions_Session : global::System.IEquatable<GetJoinableSessions_StateQuery_Sessions_Session>, IGetJoinableSessions_StateQuery_Sessions_Session
    {
        public GetJoinableSessions_StateQuery_Sessions_Session(global::HandRoyal.Bot.GraphQL.IGetJoinableSessions_StateQuery_Sessions_Metadata? metadata, global::HandRoyal.Bot.GraphQL.SessionState state)
        {
            Metadata = metadata;
            State = state;
        }

        public global::HandRoyal.Bot.GraphQL.IGetJoinableSessions_StateQuery_Sessions_Metadata? Metadata { get; }
        public global::HandRoyal.Bot.GraphQL.SessionState State { get; }

        public virtual global::System.Boolean Equals(GetJoinableSessions_StateQuery_Sessions_Session? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Metadata is null && other.Metadata is null) || Metadata != null && Metadata.Equals(other.Metadata))) && State.Equals(other.State);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetJoinableSessions_StateQuery_Sessions_Session)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Metadata != null)
                {
                    hash ^= 397 * Metadata.GetHashCode();
                }

                hash ^= 397 * State.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class GetJoinableSessions_StateQuery_Sessions_Metadata_SessionMetadata : global::System.IEquatable<GetJoinableSessions_StateQuery_Sessions_Metadata_SessionMetadata>, IGetJoinableSessions_StateQuery_Sessions_Metadata_SessionMetadata
    {
        public GetJoinableSessions_StateQuery_Sessions_Metadata_SessionMetadata(global::Libplanet.Crypto.Address id)
        {
            Id = id;
        }

        public global::Libplanet.Crypto.Address Id { get; }

        public virtual global::System.Boolean Equals(GetJoinableSessions_StateQuery_Sessions_Metadata_SessionMetadata? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetJoinableSessions_StateQuery_Sessions_Metadata_SessionMetadata)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IGetJoinableSessionsResult
    {
        public global::HandRoyal.Bot.GraphQL.IGetJoinableSessions_StateQuery? StateQuery { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IGetJoinableSessions_StateQuery
    {
        public global::System.Collections.Generic.IReadOnlyList<global::HandRoyal.Bot.GraphQL.IGetJoinableSessions_StateQuery_Sessions?>? Sessions { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IGetJoinableSessions_StateQuery_Query_StateQuery : IGetJoinableSessions_StateQuery
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IGetJoinableSessions_StateQuery_Sessions
    {
        public global::HandRoyal.Bot.GraphQL.IGetJoinableSessions_StateQuery_Sessions_Metadata? Metadata { get; }
        public global::HandRoyal.Bot.GraphQL.SessionState State { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IGetJoinableSessions_StateQuery_Sessions_Session : IGetJoinableSessions_StateQuery_Sessions
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IGetJoinableSessions_StateQuery_Sessions_Metadata
    {
        public global::Libplanet.Crypto.Address Id { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IGetJoinableSessions_StateQuery_Sessions_Metadata_SessionMetadata : IGetJoinableSessions_StateQuery_Sessions_Metadata
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class StageTransactionResult : global::System.IEquatable<StageTransactionResult>, IStageTransactionResult
    {
        public StageTransactionResult(global::Libplanet.Types.Tx.TxId stageTransaction)
        {
            StageTransaction = stageTransaction;
        }

        public global::Libplanet.Types.Tx.TxId StageTransaction { get; }

        public virtual global::System.Boolean Equals(StageTransactionResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (StageTransaction.Equals(other.StageTransaction));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((StageTransactionResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * StageTransaction.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IStageTransactionResult
    {
        public global::Libplanet.Types.Tx.TxId StageTransaction { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class OnTipChangedResult : global::System.IEquatable<OnTipChangedResult>, IOnTipChangedResult
    {
        public OnTipChangedResult(global::HandRoyal.Bot.GraphQL.IOnTipChanged_OnTipChanged? onTipChanged)
        {
            OnTipChanged = onTipChanged;
        }

        public global::HandRoyal.Bot.GraphQL.IOnTipChanged_OnTipChanged? OnTipChanged { get; }

        public virtual global::System.Boolean Equals(OnTipChangedResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((OnTipChanged is null && other.OnTipChanged is null) || OnTipChanged != null && OnTipChanged.Equals(other.OnTipChanged)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((OnTipChangedResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (OnTipChanged != null)
                {
                    hash ^= 397 * OnTipChanged.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class OnTipChanged_OnTipChanged_TipEventData : global::System.IEquatable<OnTipChanged_OnTipChanged_TipEventData>, IOnTipChanged_OnTipChanged_TipEventData
    {
        public OnTipChanged_OnTipChanged_TipEventData(global::System.Int64 height, global::System.String hash)
        {
            Height = height;
            Hash = hash;
        }

        public global::System.Int64 Height { get; }
        public global::System.String Hash { get; }

        public virtual global::System.Boolean Equals(OnTipChanged_OnTipChanged_TipEventData? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::System.Object.Equals(Height, other.Height)) && Hash.Equals(other.Hash);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((OnTipChanged_OnTipChanged_TipEventData)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Height.GetHashCode();
                hash ^= 397 * Hash.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IOnTipChangedResult
    {
        public global::HandRoyal.Bot.GraphQL.IOnTipChanged_OnTipChanged? OnTipChanged { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IOnTipChanged_OnTipChanged
    {
        public global::System.Int64 Height { get; }
        public global::System.String Hash { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IOnTipChanged_OnTipChanged_TipEventData : IOnTipChanged_OnTipChanged
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class OnSessionChangedResult : global::System.IEquatable<OnSessionChangedResult>, IOnSessionChangedResult
    {
        public OnSessionChangedResult(global::HandRoyal.Bot.GraphQL.IOnSessionChanged_OnSessionChanged? onSessionChanged)
        {
            OnSessionChanged = onSessionChanged;
        }

        public global::HandRoyal.Bot.GraphQL.IOnSessionChanged_OnSessionChanged? OnSessionChanged { get; }

        public virtual global::System.Boolean Equals(OnSessionChangedResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((OnSessionChanged is null && other.OnSessionChanged is null) || OnSessionChanged != null && OnSessionChanged.Equals(other.OnSessionChanged)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((OnSessionChangedResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (OnSessionChanged != null)
                {
                    hash ^= 397 * OnSessionChanged.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class OnSessionChanged_OnSessionChanged_SessionEventData : global::System.IEquatable<OnSessionChanged_OnSessionChanged_SessionEventData>, IOnSessionChanged_OnSessionChanged_SessionEventData
    {
        public OnSessionChanged_OnSessionChanged_SessionEventData(global::HandRoyal.Bot.GraphQL.SessionState sessionState, global::Libplanet.Crypto.Address? sessionId)
        {
            SessionState = sessionState;
            SessionId = sessionId;
        }

        public global::HandRoyal.Bot.GraphQL.SessionState SessionState { get; }
        public global::Libplanet.Crypto.Address? SessionId { get; }

        public virtual global::System.Boolean Equals(OnSessionChanged_OnSessionChanged_SessionEventData? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (SessionState.Equals(other.SessionState)) && ((SessionId is null && other.SessionId is null) || SessionId != null && SessionId.Equals(other.SessionId));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((OnSessionChanged_OnSessionChanged_SessionEventData)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * SessionState.GetHashCode();
                if (SessionId != null)
                {
                    hash ^= 397 * SessionId.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IOnSessionChangedResult
    {
        public global::HandRoyal.Bot.GraphQL.IOnSessionChanged_OnSessionChanged? OnSessionChanged { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IOnSessionChanged_OnSessionChanged
    {
        public global::HandRoyal.Bot.GraphQL.SessionState SessionState { get; }
        public global::Libplanet.Crypto.Address? SessionId { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IOnSessionChanged_OnSessionChanged_SessionEventData : IOnSessionChanged_OnSessionChanged
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public enum TxStatus
    {
        Invalid,
        Staging,
        Success,
        Failure,
        Included
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class TxStatusSerializer : global::StrawberryShake.Serialization.IInputValueFormatter, global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, TxStatus>
    {
        public global::System.String TypeName => "TxStatus";

        public TxStatus Parse(global::System.String serializedValue)
        {
            return serializedValue switch
            {
                "INVALID" => TxStatus.Invalid,
                "STAGING" => TxStatus.Staging,
                "SUCCESS" => TxStatus.Success,
                "FAILURE" => TxStatus.Failure,
                "INCLUDED" => TxStatus.Included,
                _ => throw new global::StrawberryShake.GraphQLClientException($"String value '{serializedValue}' can't be converted to enum TxStatus")};
        }

        public global::System.Object Format(global::System.Object? runtimeValue)
        {
            return runtimeValue switch
            {
                TxStatus.Invalid => "INVALID",
                TxStatus.Staging => "STAGING",
                TxStatus.Success => "SUCCESS",
                TxStatus.Failure => "FAILURE",
                TxStatus.Included => "INCLUDED",
                _ => throw new global::StrawberryShake.GraphQLClientException($"Enum TxStatus value '{runtimeValue}' can't be converted to string")};
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public enum SessionState
    {
        None,
        Ready,
        Active,
        Ended
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class SessionStateSerializer : global::StrawberryShake.Serialization.IInputValueFormatter, global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, SessionState>
    {
        public global::System.String TypeName => "SessionState";

        public SessionState Parse(global::System.String serializedValue)
        {
            return serializedValue switch
            {
                "NONE" => SessionState.None,
                "READY" => SessionState.Ready,
                "ACTIVE" => SessionState.Active,
                "ENDED" => SessionState.Ended,
                _ => throw new global::StrawberryShake.GraphQLClientException($"String value '{serializedValue}' can't be converted to enum SessionState")};
        }

        public global::System.Object Format(global::System.Object? runtimeValue)
        {
            return runtimeValue switch
            {
                SessionState.None => "NONE",
                SessionState.Ready => "READY",
                SessionState.Active => "ACTIVE",
                SessionState.Ended => "ENDED",
                _ => throw new global::StrawberryShake.GraphQLClientException($"Enum SessionState value '{runtimeValue}' can't be converted to string")};
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public enum PlayerState
    {
        Ready,
        Playing,
        Won,
        Lose
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class PlayerStateSerializer : global::StrawberryShake.Serialization.IInputValueFormatter, global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, PlayerState>
    {
        public global::System.String TypeName => "PlayerState";

        public PlayerState Parse(global::System.String serializedValue)
        {
            return serializedValue switch
            {
                "READY" => PlayerState.Ready,
                "PLAYING" => PlayerState.Playing,
                "WON" => PlayerState.Won,
                "LOSE" => PlayerState.Lose,
                _ => throw new global::StrawberryShake.GraphQLClientException($"String value '{serializedValue}' can't be converted to enum PlayerState")};
        }

        public global::System.Object Format(global::System.Object? runtimeValue)
        {
            return runtimeValue switch
            {
                PlayerState.Ready => "READY",
                PlayerState.Playing => "PLAYING",
                PlayerState.Won => "WON",
                PlayerState.Lose => "LOSE",
                _ => throw new global::StrawberryShake.GraphQLClientException($"Enum PlayerState value '{runtimeValue}' can't be converted to string")};
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public enum MatchState
    {
        None,
        Active,
        Break,
        Ended
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class MatchStateSerializer : global::StrawberryShake.Serialization.IInputValueFormatter, global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, MatchState>
    {
        public global::System.String TypeName => "MatchState";

        public MatchState Parse(global::System.String serializedValue)
        {
            return serializedValue switch
            {
                "NONE" => MatchState.None,
                "ACTIVE" => MatchState.Active,
                "BREAK" => MatchState.Break,
                "ENDED" => MatchState.Ended,
                _ => throw new global::StrawberryShake.GraphQLClientException($"String value '{serializedValue}' can't be converted to enum MatchState")};
        }

        public global::System.Object Format(global::System.Object? runtimeValue)
        {
            return runtimeValue switch
            {
                MatchState.None => "NONE",
                MatchState.Active => "ACTIVE",
                MatchState.Break => "BREAK",
                MatchState.Ended => "ENDED",
                _ => throw new global::StrawberryShake.GraphQLClientException($"Enum MatchState value '{runtimeValue}' can't be converted to string")};
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public enum EffectType
    {
        Burn
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class EffectTypeSerializer : global::StrawberryShake.Serialization.IInputValueFormatter, global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, EffectType>
    {
        public global::System.String TypeName => "EffectType";

        public EffectType Parse(global::System.String serializedValue)
        {
            return serializedValue switch
            {
                "BURN" => EffectType.Burn,
                _ => throw new global::StrawberryShake.GraphQLClientException($"String value '{serializedValue}' can't be converted to enum EffectType")};
        }

        public global::System.Object Format(global::System.Object? runtimeValue)
        {
            return runtimeValue switch
            {
                EffectType.Burn => "BURN",
                _ => throw new global::StrawberryShake.GraphQLClientException($"Enum EffectType value '{runtimeValue}' can't be converted to string")};
        }
    }

    /// <summary>
    /// Represents the operation service of the CreateUser GraphQL operation
    /// <code>
    /// query CreateUser {
    ///   actionQuery {
    ///     __typename
    ///     createUser
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class CreateUserQueryDocument : global::StrawberryShake.IDocument
    {
        private CreateUserQueryDocument()
        {
        }

        public static CreateUserQueryDocument Instance { get; } = new CreateUserQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x71,
            0x75,
            0x65,
            0x72,
            0x79,
            0x20,
            0x43,
            0x72,
            0x65,
            0x61,
            0x74,
            0x65,
            0x55,
            0x73,
            0x65,
            0x72,
            0x20,
            0x7b,
            0x20,
            0x61,
            0x63,
            0x74,
            0x69,
            0x6f,
            0x6e,
            0x51,
            0x75,
            0x65,
            0x72,
            0x79,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x63,
            0x72,
            0x65,
            0x61,
            0x74,
            0x65,
            0x55,
            0x73,
            0x65,
            0x72,
            0x20,
            0x7d,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "5402dde7cc9ba0655adedd3129a32134");

        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the CreateUser GraphQL operation
    /// <code>
    /// query CreateUser {
    ///   actionQuery {
    ///     __typename
    ///     createUser
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class CreateUserQuery : global::HandRoyal.Bot.GraphQL.ICreateUserQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<ICreateUserResult> _operationExecutor;
        public CreateUserQuery(global::StrawberryShake.IOperationExecutor<ICreateUserResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(ICreateUserResult);

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ICreateUserResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<ICreateUserResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: CreateUserQueryDocument.Instance.Hash.Value, name: "CreateUser", document: CreateUserQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the CreateUser GraphQL operation
    /// <code>
    /// query CreateUser {
    ///   actionQuery {
    ///     __typename
    ///     createUser
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface ICreateUserQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ICreateUserResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<ICreateUserResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the CreateSession GraphQL operation
    /// <code>
    /// query CreateSession($sessionId: Address!, $prize: Address!, $maximumUser: Int!, $minimumUser: Int!, $remainingUser: Int!, $startAfter: Long!, $maxRounds: Int!, $roundLength: Long!, $roundInterval: Long!, $initialHealthPoint: Int!, $users: [Address!]) {
    ///   actionQuery {
    ///     __typename
    ///     createSession(sessionId: $sessionId, prize: $prize, maximumUser: $maximumUser, minimumUser: $minimumUser, remainingUser: $remainingUser, startAfter: $startAfter, maxRounds: $maxRounds, roundLength: $roundLength, roundInterval: $roundInterval, initialHealthPoint: $initialHealthPoint, users: $users)
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class CreateSessionQueryDocument : global::StrawberryShake.IDocument
    {
        private CreateSessionQueryDocument()
        {
        }

        public static CreateSessionQueryDocument Instance { get; } = new CreateSessionQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x71,
            0x75,
            0x65,
            0x72,
            0x79,
            0x20,
            0x43,
            0x72,
            0x65,
            0x61,
            0x74,
            0x65,
            0x53,
            0x65,
            0x73,
            0x73,
            0x69,
            0x6f,
            0x6e,
            0x28,
            0x24,
            0x73,
            0x65,
            0x73,
            0x73,
            0x69,
            0x6f,
            0x6e,
            0x49,
            0x64,
            0x3a,
            0x20,
            0x41,
            0x64,
            0x64,
            0x72,
            0x65,
            0x73,
            0x73,
            0x21,
            0x2c,
            0x20,
            0x24,
            0x70,
            0x72,
            0x69,
            0x7a,
            0x65,
            0x3a,
            0x20,
            0x41,
            0x64,
            0x64,
            0x72,
            0x65,
            0x73,
            0x73,
            0x21,
            0x2c,
            0x20,
            0x24,
            0x6d,
            0x61,
            0x78,
            0x69,
            0x6d,
            0x75,
            0x6d,
            0x55,
            0x73,
            0x65,
            0x72,
            0x3a,
            0x20,
            0x49,
            0x6e,
            0x74,
            0x21,
            0x2c,
            0x20,
            0x24,
            0x6d,
            0x69,
            0x6e,
            0x69,
            0x6d,
            0x75,
            0x6d,
            0x55,
            0x73,
            0x65,
            0x72,
            0x3a,
            0x20,
            0x49,
            0x6e,
            0x74,
            0x21,
            0x2c,
            0x20,
            0x24,
            0x72,
            0x65,
            0x6d,
            0x61,
            0x69,
            0x6e,
            0x69,
            0x6e,
            0x67,
            0x55,
            0x73,
            0x65,
            0x72,
            0x3a,
            0x20,
            0x49,
            0x6e,
            0x74,
            0x21,
            0x2c,
            0x20,
            0x24,
            0x73,
            0x74,
            0x61,
            0x72,
            0x74,
            0x41,
            0x66,
            0x74,
            0x65,
            0x72,
            0x3a,
            0x20,
            0x4c,
            0x6f,
            0x6e,
            0x67,
            0x21,
            0x2c,
            0x20,
            0x24,
            0x6d,
            0x61,
            0x78,
            0x52,
            0x6f,
            0x75,
            0x6e,
            0x64,
            0x73,
            0x3a,
            0x20,
            0x49,
            0x6e,
            0x74,
            0x21,
            0x2c,
            0x20,
            0x24,
            0x72,
            0x6f,
            0x75,
            0x6e,
            0x64,
            0x4c,
            0x65,
            0x6e,
            0x67,
            0x74,
            0x68,
            0x3a,
            0x20,
            0x4c,
            0x6f,
            0x6e,
            0x67,
            0x21,
            0x2c,
            0x20,
            0x24,
            0x72,
            0x6f,
            0x75,
            0x6e,
            0x64,
            0x49,
            0x6e,
            0x74,
            0x65,
            0x72,
            0x76,
            0x61,
            0x6c,
            0x3a,
            0x20,
            0x4c,
            0x6f,
            0x6e,
            0x67,
            0x21,
            0x2c,
            0x20,
            0x24,
            0x69,
            0x6e,
            0x69,
            0x74,
            0x69,
            0x61,
            0x6c,
            0x48,
            0x65,
            0x61,
            0x6c,
            0x74,
            0x68,
            0x50,
            0x6f,
            0x69,
            0x6e,
            0x74,
            0x3a,
            0x20,
            0x49,
            0x6e,
            0x74,
            0x21,
            0x2c,
            0x20,
            0x24,
            0x75,
            0x73,
            0x65,
            0x72,
            0x73,
            0x3a,
            0x20,
            0x5b,
            0x41,
            0x64,
            0x64,
            0x72,
            0x65,
            0x73,
            0x73,
            0x21,
            0x5d,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x61,
            0x63,
            0x74,
            0x69,
            0x6f,
            0x6e,
            0x51,
            0x75,
            0x65,
            0x72,
            0x79,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x63,
            0x72,
            0x65,
            0x61,
            0x74,
            0x65,
            0x53,
            0x65,
            0x73,
            0x73,
            0x69,
            0x6f,
            0x6e,
            0x28,
            0x73,
            0x65,
            0x73,
            0x73,
            0x69,
            0x6f,
            0x6e,
            0x49,
            0x64,
            0x3a,
            0x20,
            0x24,
            0x73,
            0x65,
            0x73,
            0x73,
            0x69,
            0x6f,
            0x6e,
            0x49,
            0x64,
            0x2c,
            0x20,
            0x70,
            0x72,
            0x69,
            0x7a,
            0x65,
            0x3a,
            0x20,
            0x24,
            0x70,
            0x72,
            0x69,
            0x7a,
            0x65,
            0x2c,
            0x20,
            0x6d,
            0x61,
            0x78,
            0x69,
            0x6d,
            0x75,
            0x6d,
            0x55,
            0x73,
            0x65,
            0x72,
            0x3a,
            0x20,
            0x24,
            0x6d,
            0x61,
            0x78,
            0x69,
            0x6d,
            0x75,
            0x6d,
            0x55,
            0x73,
            0x65,
            0x72,
            0x2c,
            0x20,
            0x6d,
            0x69,
            0x6e,
            0x69,
            0x6d,
            0x75,
            0x6d,
            0x55,
            0x73,
            0x65,
            0x72,
            0x3a,
            0x20,
            0x24,
            0x6d,
            0x69,
            0x6e,
            0x69,
            0x6d,
            0x75,
            0x6d,
            0x55,
            0x73,
            0x65,
            0x72,
            0x2c,
            0x20,
            0x72,
            0x65,
            0x6d,
            0x61,
            0x69,
            0x6e,
            0x69,
            0x6e,
            0x67,
            0x55,
            0x73,
            0x65,
            0x72,
            0x3a,
            0x20,
            0x24,
            0x72,
            0x65,
            0x6d,
            0x61,
            0x69,
            0x6e,
            0x69,
            0x6e,
            0x67,
            0x55,
            0x73,
            0x65,
            0x72,
            0x2c,
            0x20,
            0x73,
            0x74,
            0x61,
            0x72,
            0x74,
            0x41,
            0x66,
            0x74,
            0x65,
            0x72,
            0x3a,
            0x20,
            0x24,
            0x73,
            0x74,
            0x61,
            0x72,
            0x74,
            0x41,
            0x66,
            0x74,
            0x65,
            0x72,
            0x2c,
            0x20,
            0x6d,
            0x61,
            0x78,
            0x52,
            0x6f,
            0x75,
            0x6e,
            0x64,
            0x73,
            0x3a,
            0x20,
            0x24,
            0x6d,
            0x61,
            0x78,
            0x52,
            0x6f,
            0x75,
            0x6e,
            0x64,
            0x73,
            0x2c,
            0x20,
            0x72,
            0x6f,
            0x75,
            0x6e,
            0x64,
            0x4c,
            0x65,
            0x6e,
            0x67,
            0x74,
            0x68,
            0x3a,
            0x20,
            0x24,
            0x72,
            0x6f,
            0x75,
            0x6e,
            0x64,
            0x4c,
            0x65,
            0x6e,
            0x67,
            0x74,
            0x68,
            0x2c,
            0x20,
            0x72,
            0x6f,
            0x75,
            0x6e,
            0x64,
            0x49,
            0x6e,
            0x74,
            0x65,
            0x72,
            0x76,
            0x61,
            0x6c,
            0x3a,
            0x20,
            0x24,
            0x72,
            0x6f,
            0x75,
            0x6e,
            0x64,
            0x49,
            0x6e,
            0x74,
            0x65,
            0x72,
            0x76,
            0x61,
            0x6c,
            0x2c,
            0x20,
            0x69,
            0x6e,
            0x69,
            0x74,
            0x69,
            0x61,
            0x6c,
            0x48,
            0x65,
            0x61,
            0x6c,
            0x74,
            0x68,
            0x50,
            0x6f,
            0x69,
            0x6e,
            0x74,
            0x3a,
            0x20,
            0x24,
            0x69,
            0x6e,
            0x69,
            0x74,
            0x69,
            0x61,
            0x6c,
            0x48,
            0x65,
            0x61,
            0x6c,
            0x74,
            0x68,
            0x50,
            0x6f,
            0x69,
            0x6e,
            0x74,
            0x2c,
            0x20,
            0x75,
            0x73,
            0x65,
            0x72,
            0x73,
            0x3a,
            0x20,
            0x24,
            0x75,
            0x73,
            0x65,
            0x72,
            0x73,
            0x29,
            0x20,
            0x7d,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "9f3f3ad52954d425d47ebc68977c0f77");

        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the CreateSession GraphQL operation
    /// <code>
    /// query CreateSession($sessionId: Address!, $prize: Address!, $maximumUser: Int!, $minimumUser: Int!, $remainingUser: Int!, $startAfter: Long!, $maxRounds: Int!, $roundLength: Long!, $roundInterval: Long!, $initialHealthPoint: Int!, $users: [Address!]) {
    ///   actionQuery {
    ///     __typename
    ///     createSession(sessionId: $sessionId, prize: $prize, maximumUser: $maximumUser, minimumUser: $minimumUser, remainingUser: $remainingUser, startAfter: $startAfter, maxRounds: $maxRounds, roundLength: $roundLength, roundInterval: $roundInterval, initialHealthPoint: $initialHealthPoint, users: $users)
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class CreateSessionQuery : global::HandRoyal.Bot.GraphQL.ICreateSessionQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<ICreateSessionResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _addressFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _longFormatter;
        public CreateSessionQuery(global::StrawberryShake.IOperationExecutor<ICreateSessionResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _addressFormatter = serializerResolver.GetInputValueFormatter("Address");
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
            _longFormatter = serializerResolver.GetInputValueFormatter("Long");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(ICreateSessionResult);

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ICreateSessionResult>> ExecuteAsync(global::Libplanet.Crypto.Address sessionId, global::Libplanet.Crypto.Address prize, global::System.Int32 maximumUser, global::System.Int32 minimumUser, global::System.Int32 remainingUser, global::System.Int64 startAfter, global::System.Int32 maxRounds, global::System.Int64 roundLength, global::System.Int64 roundInterval, global::System.Int32 initialHealthPoint, global::System.Collections.Generic.IReadOnlyList<global::Libplanet.Crypto.Address>? users, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(sessionId, prize, maximumUser, minimumUser, remainingUser, startAfter, maxRounds, roundLength, roundInterval, initialHealthPoint, users);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<ICreateSessionResult>> Watch(global::Libplanet.Crypto.Address sessionId, global::Libplanet.Crypto.Address prize, global::System.Int32 maximumUser, global::System.Int32 minimumUser, global::System.Int32 remainingUser, global::System.Int64 startAfter, global::System.Int32 maxRounds, global::System.Int64 roundLength, global::System.Int64 roundInterval, global::System.Int32 initialHealthPoint, global::System.Collections.Generic.IReadOnlyList<global::Libplanet.Crypto.Address>? users, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(sessionId, prize, maximumUser, minimumUser, remainingUser, startAfter, maxRounds, roundLength, roundInterval, initialHealthPoint, users);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::Libplanet.Crypto.Address sessionId, global::Libplanet.Crypto.Address prize, global::System.Int32 maximumUser, global::System.Int32 minimumUser, global::System.Int32 remainingUser, global::System.Int64 startAfter, global::System.Int32 maxRounds, global::System.Int64 roundLength, global::System.Int64 roundInterval, global::System.Int32 initialHealthPoint, global::System.Collections.Generic.IReadOnlyList<global::Libplanet.Crypto.Address>? users)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("sessionId", FormatSessionId(sessionId));
            variables.Add("prize", FormatPrize(prize));
            variables.Add("maximumUser", FormatMaximumUser(maximumUser));
            variables.Add("minimumUser", FormatMinimumUser(minimumUser));
            variables.Add("remainingUser", FormatRemainingUser(remainingUser));
            variables.Add("startAfter", FormatStartAfter(startAfter));
            variables.Add("maxRounds", FormatMaxRounds(maxRounds));
            variables.Add("roundLength", FormatRoundLength(roundLength));
            variables.Add("roundInterval", FormatRoundInterval(roundInterval));
            variables.Add("initialHealthPoint", FormatInitialHealthPoint(initialHealthPoint));
            variables.Add("users", FormatUsers(users));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: CreateSessionQueryDocument.Instance.Hash.Value, name: "CreateSession", document: CreateSessionQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatSessionId(global::Libplanet.Crypto.Address value)
        {
            if (value == null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _addressFormatter.Format(value);
        }

        private global::System.Object? FormatPrize(global::Libplanet.Crypto.Address value)
        {
            if (value == null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _addressFormatter.Format(value);
        }

        private global::System.Object? FormatMaximumUser(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        private global::System.Object? FormatMinimumUser(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        private global::System.Object? FormatRemainingUser(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        private global::System.Object? FormatStartAfter(global::System.Int64 value)
        {
            return _longFormatter.Format(value);
        }

        private global::System.Object? FormatMaxRounds(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        private global::System.Object? FormatRoundLength(global::System.Int64 value)
        {
            return _longFormatter.Format(value);
        }

        private global::System.Object? FormatRoundInterval(global::System.Int64 value)
        {
            return _longFormatter.Format(value);
        }

        private global::System.Object? FormatInitialHealthPoint(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        private global::System.Object? FormatUsers(global::System.Collections.Generic.IReadOnlyList<global::Libplanet.Crypto.Address>? value)
        {
            if (value == null)
            {
                return value;
            }
            else
            {
                var value_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var value_elm in value)
                {
                    if (value_elm == null)
                    {
                        throw new global::System.ArgumentNullException(nameof(value_elm));
                    }

                    value_list.Add(_addressFormatter.Format(value_elm));
                }

                return value_list;
            }
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the CreateSession GraphQL operation
    /// <code>
    /// query CreateSession($sessionId: Address!, $prize: Address!, $maximumUser: Int!, $minimumUser: Int!, $remainingUser: Int!, $startAfter: Long!, $maxRounds: Int!, $roundLength: Long!, $roundInterval: Long!, $initialHealthPoint: Int!, $users: [Address!]) {
    ///   actionQuery {
    ///     __typename
    ///     createSession(sessionId: $sessionId, prize: $prize, maximumUser: $maximumUser, minimumUser: $minimumUser, remainingUser: $remainingUser, startAfter: $startAfter, maxRounds: $maxRounds, roundLength: $roundLength, roundInterval: $roundInterval, initialHealthPoint: $initialHealthPoint, users: $users)
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface ICreateSessionQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ICreateSessionResult>> ExecuteAsync(global::Libplanet.Crypto.Address sessionId, global::Libplanet.Crypto.Address prize, global::System.Int32 maximumUser, global::System.Int32 minimumUser, global::System.Int32 remainingUser, global::System.Int64 startAfter, global::System.Int32 maxRounds, global::System.Int64 roundLength, global::System.Int64 roundInterval, global::System.Int32 initialHealthPoint, global::System.Collections.Generic.IReadOnlyList<global::Libplanet.Crypto.Address>? users, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<ICreateSessionResult>> Watch(global::Libplanet.Crypto.Address sessionId, global::Libplanet.Crypto.Address prize, global::System.Int32 maximumUser, global::System.Int32 minimumUser, global::System.Int32 remainingUser, global::System.Int64 startAfter, global::System.Int32 maxRounds, global::System.Int64 roundLength, global::System.Int64 roundInterval, global::System.Int32 initialHealthPoint, global::System.Collections.Generic.IReadOnlyList<global::Libplanet.Crypto.Address>? users, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the JoinSession GraphQL operation
    /// <code>
    /// query JoinSession($sessionId: Address!, $gloves: [Address!]!) {
    ///   actionQuery {
    ///     __typename
    ///     joinSession(sessionId: $sessionId, gloves: $gloves)
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class JoinSessionQueryDocument : global::StrawberryShake.IDocument
    {
        private JoinSessionQueryDocument()
        {
        }

        public static JoinSessionQueryDocument Instance { get; } = new JoinSessionQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x71,
            0x75,
            0x65,
            0x72,
            0x79,
            0x20,
            0x4a,
            0x6f,
            0x69,
            0x6e,
            0x53,
            0x65,
            0x73,
            0x73,
            0x69,
            0x6f,
            0x6e,
            0x28,
            0x24,
            0x73,
            0x65,
            0x73,
            0x73,
            0x69,
            0x6f,
            0x6e,
            0x49,
            0x64,
            0x3a,
            0x20,
            0x41,
            0x64,
            0x64,
            0x72,
            0x65,
            0x73,
            0x73,
            0x21,
            0x2c,
            0x20,
            0x24,
            0x67,
            0x6c,
            0x6f,
            0x76,
            0x65,
            0x73,
            0x3a,
            0x20,
            0x5b,
            0x41,
            0x64,
            0x64,
            0x72,
            0x65,
            0x73,
            0x73,
            0x21,
            0x5d,
            0x21,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x61,
            0x63,
            0x74,
            0x69,
            0x6f,
            0x6e,
            0x51,
            0x75,
            0x65,
            0x72,
            0x79,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x6a,
            0x6f,
            0x69,
            0x6e,
            0x53,
            0x65,
            0x73,
            0x73,
            0x69,
            0x6f,
            0x6e,
            0x28,
            0x73,
            0x65,
            0x73,
            0x73,
            0x69,
            0x6f,
            0x6e,
            0x49,
            0x64,
            0x3a,
            0x20,
            0x24,
            0x73,
            0x65,
            0x73,
            0x73,
            0x69,
            0x6f,
            0x6e,
            0x49,
            0x64,
            0x2c,
            0x20,
            0x67,
            0x6c,
            0x6f,
            0x76,
            0x65,
            0x73,
            0x3a,
            0x20,
            0x24,
            0x67,
            0x6c,
            0x6f,
            0x76,
            0x65,
            0x73,
            0x29,
            0x20,
            0x7d,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "255a6301d1ae390c5bd2a3edd303c289");

        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the JoinSession GraphQL operation
    /// <code>
    /// query JoinSession($sessionId: Address!, $gloves: [Address!]!) {
    ///   actionQuery {
    ///     __typename
    ///     joinSession(sessionId: $sessionId, gloves: $gloves)
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class JoinSessionQuery : global::HandRoyal.Bot.GraphQL.IJoinSessionQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IJoinSessionResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _addressFormatter;
        public JoinSessionQuery(global::StrawberryShake.IOperationExecutor<IJoinSessionResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _addressFormatter = serializerResolver.GetInputValueFormatter("Address");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IJoinSessionResult);

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IJoinSessionResult>> ExecuteAsync(global::Libplanet.Crypto.Address sessionId, global::System.Collections.Generic.IReadOnlyList<global::Libplanet.Crypto.Address> gloves, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(sessionId, gloves);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IJoinSessionResult>> Watch(global::Libplanet.Crypto.Address sessionId, global::System.Collections.Generic.IReadOnlyList<global::Libplanet.Crypto.Address> gloves, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(sessionId, gloves);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::Libplanet.Crypto.Address sessionId, global::System.Collections.Generic.IReadOnlyList<global::Libplanet.Crypto.Address> gloves)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("sessionId", FormatSessionId(sessionId));
            variables.Add("gloves", FormatGloves(gloves));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: JoinSessionQueryDocument.Instance.Hash.Value, name: "JoinSession", document: JoinSessionQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatSessionId(global::Libplanet.Crypto.Address value)
        {
            if (value == null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _addressFormatter.Format(value);
        }

        private global::System.Object? FormatGloves(global::System.Collections.Generic.IReadOnlyList<global::Libplanet.Crypto.Address> value)
        {
            if (value == null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            var value_list = new global::System.Collections.Generic.List<global::System.Object?>();
            foreach (var value_elm in value)
            {
                if (value_elm == null)
                {
                    throw new global::System.ArgumentNullException(nameof(value_elm));
                }

                value_list.Add(_addressFormatter.Format(value_elm));
            }

            return value_list;
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the JoinSession GraphQL operation
    /// <code>
    /// query JoinSession($sessionId: Address!, $gloves: [Address!]!) {
    ///   actionQuery {
    ///     __typename
    ///     joinSession(sessionId: $sessionId, gloves: $gloves)
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IJoinSessionQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IJoinSessionResult>> ExecuteAsync(global::Libplanet.Crypto.Address sessionId, global::System.Collections.Generic.IReadOnlyList<global::Libplanet.Crypto.Address> gloves, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IJoinSessionResult>> Watch(global::Libplanet.Crypto.Address sessionId, global::System.Collections.Generic.IReadOnlyList<global::Libplanet.Crypto.Address> gloves, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the SubmitMove GraphQL operation
    /// <code>
    /// query SubmitMove($sessionId: Address!, $gloveIndex: Int!) {
    ///   actionQuery {
    ///     __typename
    ///     submitMove(sessionId: $sessionId, gloveIndex: $gloveIndex)
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class SubmitMoveQueryDocument : global::StrawberryShake.IDocument
    {
        private SubmitMoveQueryDocument()
        {
        }

        public static SubmitMoveQueryDocument Instance { get; } = new SubmitMoveQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x71,
            0x75,
            0x65,
            0x72,
            0x79,
            0x20,
            0x53,
            0x75,
            0x62,
            0x6d,
            0x69,
            0x74,
            0x4d,
            0x6f,
            0x76,
            0x65,
            0x28,
            0x24,
            0x73,
            0x65,
            0x73,
            0x73,
            0x69,
            0x6f,
            0x6e,
            0x49,
            0x64,
            0x3a,
            0x20,
            0x41,
            0x64,
            0x64,
            0x72,
            0x65,
            0x73,
            0x73,
            0x21,
            0x2c,
            0x20,
            0x24,
            0x67,
            0x6c,
            0x6f,
            0x76,
            0x65,
            0x49,
            0x6e,
            0x64,
            0x65,
            0x78,
            0x3a,
            0x20,
            0x49,
            0x6e,
            0x74,
            0x21,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x61,
            0x63,
            0x74,
            0x69,
            0x6f,
            0x6e,
            0x51,
            0x75,
            0x65,
            0x72,
            0x79,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x73,
            0x75,
            0x62,
            0x6d,
            0x69,
            0x74,
            0x4d,
            0x6f,
            0x76,
            0x65,
            0x28,
            0x73,
            0x65,
            0x73,
            0x73,
            0x69,
            0x6f,
            0x6e,
            0x49,
            0x64,
            0x3a,
            0x20,
            0x24,
            0x73,
            0x65,
            0x73,
            0x73,
            0x69,
            0x6f,
            0x6e,
            0x49,
            0x64,
            0x2c,
            0x20,
            0x67,
            0x6c,
            0x6f,
            0x76,
            0x65,
            0x49,
            0x6e,
            0x64,
            0x65,
            0x78,
            0x3a,
            0x20,
            0x24,
            0x67,
            0x6c,
            0x6f,
            0x76,
            0x65,
            0x49,
            0x6e,
            0x64,
            0x65,
            0x78,
            0x29,
            0x20,
            0x7d,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "45ee0661fec47cc243deed31795ba84f");

        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the SubmitMove GraphQL operation
    /// <code>
    /// query SubmitMove($sessionId: Address!, $gloveIndex: Int!) {
    ///   actionQuery {
    ///     __typename
    ///     submitMove(sessionId: $sessionId, gloveIndex: $gloveIndex)
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class SubmitMoveQuery : global::HandRoyal.Bot.GraphQL.ISubmitMoveQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<ISubmitMoveResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _addressFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        public SubmitMoveQuery(global::StrawberryShake.IOperationExecutor<ISubmitMoveResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _addressFormatter = serializerResolver.GetInputValueFormatter("Address");
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(ISubmitMoveResult);

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ISubmitMoveResult>> ExecuteAsync(global::Libplanet.Crypto.Address sessionId, global::System.Int32 gloveIndex, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(sessionId, gloveIndex);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<ISubmitMoveResult>> Watch(global::Libplanet.Crypto.Address sessionId, global::System.Int32 gloveIndex, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(sessionId, gloveIndex);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::Libplanet.Crypto.Address sessionId, global::System.Int32 gloveIndex)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("sessionId", FormatSessionId(sessionId));
            variables.Add("gloveIndex", FormatGloveIndex(gloveIndex));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: SubmitMoveQueryDocument.Instance.Hash.Value, name: "SubmitMove", document: SubmitMoveQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatSessionId(global::Libplanet.Crypto.Address value)
        {
            if (value == null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _addressFormatter.Format(value);
        }

        private global::System.Object? FormatGloveIndex(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the SubmitMove GraphQL operation
    /// <code>
    /// query SubmitMove($sessionId: Address!, $gloveIndex: Int!) {
    ///   actionQuery {
    ///     __typename
    ///     submitMove(sessionId: $sessionId, gloveIndex: $gloveIndex)
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface ISubmitMoveQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ISubmitMoveResult>> ExecuteAsync(global::Libplanet.Crypto.Address sessionId, global::System.Int32 gloveIndex, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<ISubmitMoveResult>> Watch(global::Libplanet.Crypto.Address sessionId, global::System.Int32 gloveIndex, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the PickUp GraphQL operation
    /// <code>
    /// query PickUp {
    ///   actionQuery {
    ///     __typename
    ///     pickUp
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class PickUpQueryDocument : global::StrawberryShake.IDocument
    {
        private PickUpQueryDocument()
        {
        }

        public static PickUpQueryDocument Instance { get; } = new PickUpQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x71,
            0x75,
            0x65,
            0x72,
            0x79,
            0x20,
            0x50,
            0x69,
            0x63,
            0x6b,
            0x55,
            0x70,
            0x20,
            0x7b,
            0x20,
            0x61,
            0x63,
            0x74,
            0x69,
            0x6f,
            0x6e,
            0x51,
            0x75,
            0x65,
            0x72,
            0x79,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x70,
            0x69,
            0x63,
            0x6b,
            0x55,
            0x70,
            0x20,
            0x7d,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "729e3679271890c826f24556a8b007de");

        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the PickUp GraphQL operation
    /// <code>
    /// query PickUp {
    ///   actionQuery {
    ///     __typename
    ///     pickUp
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class PickUpQuery : global::HandRoyal.Bot.GraphQL.IPickUpQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IPickUpResult> _operationExecutor;
        public PickUpQuery(global::StrawberryShake.IOperationExecutor<IPickUpResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IPickUpResult);

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IPickUpResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IPickUpResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: PickUpQueryDocument.Instance.Hash.Value, name: "PickUp", document: PickUpQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the PickUp GraphQL operation
    /// <code>
    /// query PickUp {
    ///   actionQuery {
    ///     __typename
    ///     pickUp
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IPickUpQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IPickUpResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IPickUpResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the PickUpMany GraphQL operation
    /// <code>
    /// query PickUpMany {
    ///   actionQuery {
    ///     __typename
    ///     pickUpMany
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class PickUpManyQueryDocument : global::StrawberryShake.IDocument
    {
        private PickUpManyQueryDocument()
        {
        }

        public static PickUpManyQueryDocument Instance { get; } = new PickUpManyQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x71,
            0x75,
            0x65,
            0x72,
            0x79,
            0x20,
            0x50,
            0x69,
            0x63,
            0x6b,
            0x55,
            0x70,
            0x4d,
            0x61,
            0x6e,
            0x79,
            0x20,
            0x7b,
            0x20,
            0x61,
            0x63,
            0x74,
            0x69,
            0x6f,
            0x6e,
            0x51,
            0x75,
            0x65,
            0x72,
            0x79,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x70,
            0x69,
            0x63,
            0x6b,
            0x55,
            0x70,
            0x4d,
            0x61,
            0x6e,
            0x79,
            0x20,
            0x7d,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "08041c04374c05d11d03e55fe13c66d9");

        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the PickUpMany GraphQL operation
    /// <code>
    /// query PickUpMany {
    ///   actionQuery {
    ///     __typename
    ///     pickUpMany
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class PickUpManyQuery : global::HandRoyal.Bot.GraphQL.IPickUpManyQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IPickUpManyResult> _operationExecutor;
        public PickUpManyQuery(global::StrawberryShake.IOperationExecutor<IPickUpManyResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IPickUpManyResult);

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IPickUpManyResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IPickUpManyResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: PickUpManyQueryDocument.Instance.Hash.Value, name: "PickUpMany", document: PickUpManyQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the PickUpMany GraphQL operation
    /// <code>
    /// query PickUpMany {
    ///   actionQuery {
    ///     __typename
    ///     pickUpMany
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IPickUpManyQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IPickUpManyResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IPickUpManyResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the RegisterMatching GraphQL operation
    /// <code>
    /// query RegisterMatching($gloves: [Address!]!) {
    ///   actionQuery {
    ///     __typename
    ///     registerMatching(gloves: $gloves)
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class RegisterMatchingQueryDocument : global::StrawberryShake.IDocument
    {
        private RegisterMatchingQueryDocument()
        {
        }

        public static RegisterMatchingQueryDocument Instance { get; } = new RegisterMatchingQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x71,
            0x75,
            0x65,
            0x72,
            0x79,
            0x20,
            0x52,
            0x65,
            0x67,
            0x69,
            0x73,
            0x74,
            0x65,
            0x72,
            0x4d,
            0x61,
            0x74,
            0x63,
            0x68,
            0x69,
            0x6e,
            0x67,
            0x28,
            0x24,
            0x67,
            0x6c,
            0x6f,
            0x76,
            0x65,
            0x73,
            0x3a,
            0x20,
            0x5b,
            0x41,
            0x64,
            0x64,
            0x72,
            0x65,
            0x73,
            0x73,
            0x21,
            0x5d,
            0x21,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x61,
            0x63,
            0x74,
            0x69,
            0x6f,
            0x6e,
            0x51,
            0x75,
            0x65,
            0x72,
            0x79,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x72,
            0x65,
            0x67,
            0x69,
            0x73,
            0x74,
            0x65,
            0x72,
            0x4d,
            0x61,
            0x74,
            0x63,
            0x68,
            0x69,
            0x6e,
            0x67,
            0x28,
            0x67,
            0x6c,
            0x6f,
            0x76,
            0x65,
            0x73,
            0x3a,
            0x20,
            0x24,
            0x67,
            0x6c,
            0x6f,
            0x76,
            0x65,
            0x73,
            0x29,
            0x20,
            0x7d,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "14da8d5da10baa3df60624788ccfbd42");

        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the RegisterMatching GraphQL operation
    /// <code>
    /// query RegisterMatching($gloves: [Address!]!) {
    ///   actionQuery {
    ///     __typename
    ///     registerMatching(gloves: $gloves)
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class RegisterMatchingQuery : global::HandRoyal.Bot.GraphQL.IRegisterMatchingQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IRegisterMatchingResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _addressFormatter;
        public RegisterMatchingQuery(global::StrawberryShake.IOperationExecutor<IRegisterMatchingResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _addressFormatter = serializerResolver.GetInputValueFormatter("Address");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IRegisterMatchingResult);

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IRegisterMatchingResult>> ExecuteAsync(global::System.Collections.Generic.IReadOnlyList<global::Libplanet.Crypto.Address> gloves, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(gloves);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IRegisterMatchingResult>> Watch(global::System.Collections.Generic.IReadOnlyList<global::Libplanet.Crypto.Address> gloves, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(gloves);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyList<global::Libplanet.Crypto.Address> gloves)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("gloves", FormatGloves(gloves));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: RegisterMatchingQueryDocument.Instance.Hash.Value, name: "RegisterMatching", document: RegisterMatchingQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatGloves(global::System.Collections.Generic.IReadOnlyList<global::Libplanet.Crypto.Address> value)
        {
            if (value == null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            var value_list = new global::System.Collections.Generic.List<global::System.Object?>();
            foreach (var value_elm in value)
            {
                if (value_elm == null)
                {
                    throw new global::System.ArgumentNullException(nameof(value_elm));
                }

                value_list.Add(_addressFormatter.Format(value_elm));
            }

            return value_list;
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the RegisterMatching GraphQL operation
    /// <code>
    /// query RegisterMatching($gloves: [Address!]!) {
    ///   actionQuery {
    ///     __typename
    ///     registerMatching(gloves: $gloves)
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IRegisterMatchingQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IRegisterMatchingResult>> ExecuteAsync(global::System.Collections.Generic.IReadOnlyList<global::Libplanet.Crypto.Address> gloves, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IRegisterMatchingResult>> Watch(global::System.Collections.Generic.IReadOnlyList<global::Libplanet.Crypto.Address> gloves, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the CancelMatching GraphQL operation
    /// <code>
    /// query CancelMatching {
    ///   actionQuery {
    ///     __typename
    ///     cancelMatching
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class CancelMatchingQueryDocument : global::StrawberryShake.IDocument
    {
        private CancelMatchingQueryDocument()
        {
        }

        public static CancelMatchingQueryDocument Instance { get; } = new CancelMatchingQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x71,
            0x75,
            0x65,
            0x72,
            0x79,
            0x20,
            0x43,
            0x61,
            0x6e,
            0x63,
            0x65,
            0x6c,
            0x4d,
            0x61,
            0x74,
            0x63,
            0x68,
            0x69,
            0x6e,
            0x67,
            0x20,
            0x7b,
            0x20,
            0x61,
            0x63,
            0x74,
            0x69,
            0x6f,
            0x6e,
            0x51,
            0x75,
            0x65,
            0x72,
            0x79,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x63,
            0x61,
            0x6e,
            0x63,
            0x65,
            0x6c,
            0x4d,
            0x61,
            0x74,
            0x63,
            0x68,
            0x69,
            0x6e,
            0x67,
            0x20,
            0x7d,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "ed7e2b32a6b1166f131e8513c41cc0ce");

        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the CancelMatching GraphQL operation
    /// <code>
    /// query CancelMatching {
    ///   actionQuery {
    ///     __typename
    ///     cancelMatching
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class CancelMatchingQuery : global::HandRoyal.Bot.GraphQL.ICancelMatchingQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<ICancelMatchingResult> _operationExecutor;
        public CancelMatchingQuery(global::StrawberryShake.IOperationExecutor<ICancelMatchingResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(ICancelMatchingResult);

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ICancelMatchingResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<ICancelMatchingResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: CancelMatchingQueryDocument.Instance.Hash.Value, name: "CancelMatching", document: CancelMatchingQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the CancelMatching GraphQL operation
    /// <code>
    /// query CancelMatching {
    ///   actionQuery {
    ///     __typename
    ///     cancelMatching
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface ICancelMatchingQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ICancelMatchingResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<ICancelMatchingResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetUserData GraphQL operation
    /// <code>
    /// query GetUserData($useId: Address!) {
    ///   stateQuery {
    ///     __typename
    ///     getUserData(userId: $useId) {
    ///       __typename
    ///       id
    ///       name
    ///       registeredGloves
    ///       equippedGlove
    ///       sessionId
    ///       balance
    ///       ownedGloves {
    ///         __typename
    ///         id
    ///         count
    ///         ... on GloveInfo {
    ///           id
    ///         }
    ///       }
    ///       ... on UserData {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class GetUserDataQueryDocument : global::StrawberryShake.IDocument
    {
        private GetUserDataQueryDocument()
        {
        }

        public static GetUserDataQueryDocument Instance { get; } = new GetUserDataQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x71,
            0x75,
            0x65,
            0x72,
            0x79,
            0x20,
            0x47,
            0x65,
            0x74,
            0x55,
            0x73,
            0x65,
            0x72,
            0x44,
            0x61,
            0x74,
            0x61,
            0x28,
            0x24,
            0x75,
            0x73,
            0x65,
            0x49,
            0x64,
            0x3a,
            0x20,
            0x41,
            0x64,
            0x64,
            0x72,
            0x65,
            0x73,
            0x73,
            0x21,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x73,
            0x74,
            0x61,
            0x74,
            0x65,
            0x51,
            0x75,
            0x65,
            0x72,
            0x79,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x67,
            0x65,
            0x74,
            0x55,
            0x73,
            0x65,
            0x72,
            0x44,
            0x61,
            0x74,
            0x61,
            0x28,
            0x75,
            0x73,
            0x65,
            0x72,
            0x49,
            0x64,
            0x3a,
            0x20,
            0x24,
            0x75,
            0x73,
            0x65,
            0x49,
            0x64,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x69,
            0x64,
            0x20,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x72,
            0x65,
            0x67,
            0x69,
            0x73,
            0x74,
            0x65,
            0x72,
            0x65,
            0x64,
            0x47,
            0x6c,
            0x6f,
            0x76,
            0x65,
            0x73,
            0x20,
            0x65,
            0x71,
            0x75,
            0x69,
            0x70,
            0x70,
            0x65,
            0x64,
            0x47,
            0x6c,
            0x6f,
            0x76,
            0x65,
            0x20,
            0x73,
            0x65,
            0x73,
            0x73,
            0x69,
            0x6f,
            0x6e,
            0x49,
            0x64,
            0x20,
            0x62,
            0x61,
            0x6c,
            0x61,
            0x6e,
            0x63,
            0x65,
            0x20,
            0x6f,
            0x77,
            0x6e,
            0x65,
            0x64,
            0x47,
            0x6c,
            0x6f,
            0x76,
            0x65,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x69,
            0x64,
            0x20,
            0x63,
            0x6f,
            0x75,
            0x6e,
            0x74,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x47,
            0x6c,
            0x6f,
            0x76,
            0x65,
            0x49,
            0x6e,
            0x66,
            0x6f,
            0x20,
            0x7b,
            0x20,
            0x69,
            0x64,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x55,
            0x73,
            0x65,
            0x72,
            0x44,
            0x61,
            0x74,
            0x61,
            0x20,
            0x7b,
            0x20,
            0x69,
            0x64,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "c5b2117e31208b2a535d0a6e12b6edfb");

        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetUserData GraphQL operation
    /// <code>
    /// query GetUserData($useId: Address!) {
    ///   stateQuery {
    ///     __typename
    ///     getUserData(userId: $useId) {
    ///       __typename
    ///       id
    ///       name
    ///       registeredGloves
    ///       equippedGlove
    ///       sessionId
    ///       balance
    ///       ownedGloves {
    ///         __typename
    ///         id
    ///         count
    ///         ... on GloveInfo {
    ///           id
    ///         }
    ///       }
    ///       ... on UserData {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class GetUserDataQuery : global::HandRoyal.Bot.GraphQL.IGetUserDataQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetUserDataResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _addressFormatter;
        public GetUserDataQuery(global::StrawberryShake.IOperationExecutor<IGetUserDataResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _addressFormatter = serializerResolver.GetInputValueFormatter("Address");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetUserDataResult);

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetUserDataResult>> ExecuteAsync(global::Libplanet.Crypto.Address useId, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(useId);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetUserDataResult>> Watch(global::Libplanet.Crypto.Address useId, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(useId);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::Libplanet.Crypto.Address useId)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("useId", FormatUseId(useId));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetUserDataQueryDocument.Instance.Hash.Value, name: "GetUserData", document: GetUserDataQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatUseId(global::Libplanet.Crypto.Address value)
        {
            if (value == null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _addressFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetUserData GraphQL operation
    /// <code>
    /// query GetUserData($useId: Address!) {
    ///   stateQuery {
    ///     __typename
    ///     getUserData(userId: $useId) {
    ///       __typename
    ///       id
    ///       name
    ///       registeredGloves
    ///       equippedGlove
    ///       sessionId
    ///       balance
    ///       ownedGloves {
    ///         __typename
    ///         id
    ///         count
    ///         ... on GloveInfo {
    ///           id
    ///         }
    ///       }
    ///       ... on UserData {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IGetUserDataQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetUserDataResult>> ExecuteAsync(global::Libplanet.Crypto.Address useId, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetUserDataResult>> Watch(global::Libplanet.Crypto.Address useId, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the TransactionResult GraphQL operation
    /// <code>
    /// query TransactionResult($txId: TxId!) {
    ///   transaction {
    ///     __typename
    ///     transactionResult(txId: $txId) {
    ///       __typename
    ///       txStatus
    ///       blockIndex
    ///       exceptionNames
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class TransactionResultQueryDocument : global::StrawberryShake.IDocument
    {
        private TransactionResultQueryDocument()
        {
        }

        public static TransactionResultQueryDocument Instance { get; } = new TransactionResultQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x71,
            0x75,
            0x65,
            0x72,
            0x79,
            0x20,
            0x54,
            0x72,
            0x61,
            0x6e,
            0x73,
            0x61,
            0x63,
            0x74,
            0x69,
            0x6f,
            0x6e,
            0x52,
            0x65,
            0x73,
            0x75,
            0x6c,
            0x74,
            0x28,
            0x24,
            0x74,
            0x78,
            0x49,
            0x64,
            0x3a,
            0x20,
            0x54,
            0x78,
            0x49,
            0x64,
            0x21,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x74,
            0x72,
            0x61,
            0x6e,
            0x73,
            0x61,
            0x63,
            0x74,
            0x69,
            0x6f,
            0x6e,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x74,
            0x72,
            0x61,
            0x6e,
            0x73,
            0x61,
            0x63,
            0x74,
            0x69,
            0x6f,
            0x6e,
            0x52,
            0x65,
            0x73,
            0x75,
            0x6c,
            0x74,
            0x28,
            0x74,
            0x78,
            0x49,
            0x64,
            0x3a,
            0x20,
            0x24,
            0x74,
            0x78,
            0x49,
            0x64,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x74,
            0x78,
            0x53,
            0x74,
            0x61,
            0x74,
            0x75,
            0x73,
            0x20,
            0x62,
            0x6c,
            0x6f,
            0x63,
            0x6b,
            0x49,
            0x6e,
            0x64,
            0x65,
            0x78,
            0x20,
            0x65,
            0x78,
            0x63,
            0x65,
            0x70,
            0x74,
            0x69,
            0x6f,
            0x6e,
            0x4e,
            0x61,
            0x6d,
            0x65,
            0x73,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "74bf6d3c2cf77de1c1995d970f3a5c50");

        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the TransactionResult GraphQL operation
    /// <code>
    /// query TransactionResult($txId: TxId!) {
    ///   transaction {
    ///     __typename
    ///     transactionResult(txId: $txId) {
    ///       __typename
    ///       txStatus
    ///       blockIndex
    ///       exceptionNames
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class TransactionResultQuery : global::HandRoyal.Bot.GraphQL.ITransactionResultQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<ITransactionResultResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _txIdFormatter;
        public TransactionResultQuery(global::StrawberryShake.IOperationExecutor<ITransactionResultResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _txIdFormatter = serializerResolver.GetInputValueFormatter("TxId");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(ITransactionResultResult);

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ITransactionResultResult>> ExecuteAsync(global::Libplanet.Types.Tx.TxId txId, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(txId);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<ITransactionResultResult>> Watch(global::Libplanet.Types.Tx.TxId txId, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(txId);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::Libplanet.Types.Tx.TxId txId)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("txId", FormatTxId(txId));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: TransactionResultQueryDocument.Instance.Hash.Value, name: "TransactionResult", document: TransactionResultQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatTxId(global::Libplanet.Types.Tx.TxId value)
        {
            if (value == null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _txIdFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the TransactionResult GraphQL operation
    /// <code>
    /// query TransactionResult($txId: TxId!) {
    ///   transaction {
    ///     __typename
    ///     transactionResult(txId: $txId) {
    ///       __typename
    ///       txStatus
    ///       blockIndex
    ///       exceptionNames
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface ITransactionResultQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ITransactionResultResult>> ExecuteAsync(global::Libplanet.Types.Tx.TxId txId, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<ITransactionResultResult>> Watch(global::Libplanet.Types.Tx.TxId txId, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the UnsignedTransaction GraphQL operation
    /// <code>
    /// query UnsignedTransaction($address: Address!, $plainValue: Hex!) {
    ///   transaction {
    ///     __typename
    ///     unsignedTransaction(address: $address, plainValue: $plainValue)
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class UnsignedTransactionQueryDocument : global::StrawberryShake.IDocument
    {
        private UnsignedTransactionQueryDocument()
        {
        }

        public static UnsignedTransactionQueryDocument Instance { get; } = new UnsignedTransactionQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x71,
            0x75,
            0x65,
            0x72,
            0x79,
            0x20,
            0x55,
            0x6e,
            0x73,
            0x69,
            0x67,
            0x6e,
            0x65,
            0x64,
            0x54,
            0x72,
            0x61,
            0x6e,
            0x73,
            0x61,
            0x63,
            0x74,
            0x69,
            0x6f,
            0x6e,
            0x28,
            0x24,
            0x61,
            0x64,
            0x64,
            0x72,
            0x65,
            0x73,
            0x73,
            0x3a,
            0x20,
            0x41,
            0x64,
            0x64,
            0x72,
            0x65,
            0x73,
            0x73,
            0x21,
            0x2c,
            0x20,
            0x24,
            0x70,
            0x6c,
            0x61,
            0x69,
            0x6e,
            0x56,
            0x61,
            0x6c,
            0x75,
            0x65,
            0x3a,
            0x20,
            0x48,
            0x65,
            0x78,
            0x21,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x74,
            0x72,
            0x61,
            0x6e,
            0x73,
            0x61,
            0x63,
            0x74,
            0x69,
            0x6f,
            0x6e,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x75,
            0x6e,
            0x73,
            0x69,
            0x67,
            0x6e,
            0x65,
            0x64,
            0x54,
            0x72,
            0x61,
            0x6e,
            0x73,
            0x61,
            0x63,
            0x74,
            0x69,
            0x6f,
            0x6e,
            0x28,
            0x61,
            0x64,
            0x64,
            0x72,
            0x65,
            0x73,
            0x73,
            0x3a,
            0x20,
            0x24,
            0x61,
            0x64,
            0x64,
            0x72,
            0x65,
            0x73,
            0x73,
            0x2c,
            0x20,
            0x70,
            0x6c,
            0x61,
            0x69,
            0x6e,
            0x56,
            0x61,
            0x6c,
            0x75,
            0x65,
            0x3a,
            0x20,
            0x24,
            0x70,
            0x6c,
            0x61,
            0x69,
            0x6e,
            0x56,
            0x61,
            0x6c,
            0x75,
            0x65,
            0x29,
            0x20,
            0x7d,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "cc561a9ed684595b2f265e915f78baa9");

        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the UnsignedTransaction GraphQL operation
    /// <code>
    /// query UnsignedTransaction($address: Address!, $plainValue: Hex!) {
    ///   transaction {
    ///     __typename
    ///     unsignedTransaction(address: $address, plainValue: $plainValue)
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class UnsignedTransactionQuery : global::HandRoyal.Bot.GraphQL.IUnsignedTransactionQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IUnsignedTransactionResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _addressFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _hexFormatter;
        public UnsignedTransactionQuery(global::StrawberryShake.IOperationExecutor<IUnsignedTransactionResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _addressFormatter = serializerResolver.GetInputValueFormatter("Address");
            _hexFormatter = serializerResolver.GetInputValueFormatter("Hex");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IUnsignedTransactionResult);

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IUnsignedTransactionResult>> ExecuteAsync(global::Libplanet.Crypto.Address address, global::System.String plainValue, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(address, plainValue);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IUnsignedTransactionResult>> Watch(global::Libplanet.Crypto.Address address, global::System.String plainValue, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(address, plainValue);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::Libplanet.Crypto.Address address, global::System.String plainValue)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("address", FormatAddress(address));
            variables.Add("plainValue", FormatPlainValue(plainValue));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: UnsignedTransactionQueryDocument.Instance.Hash.Value, name: "UnsignedTransaction", document: UnsignedTransactionQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatAddress(global::Libplanet.Crypto.Address value)
        {
            if (value == null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _addressFormatter.Format(value);
        }

        private global::System.Object? FormatPlainValue(global::System.String value)
        {
            if (value == null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _hexFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the UnsignedTransaction GraphQL operation
    /// <code>
    /// query UnsignedTransaction($address: Address!, $plainValue: Hex!) {
    ///   transaction {
    ///     __typename
    ///     unsignedTransaction(address: $address, plainValue: $plainValue)
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IUnsignedTransactionQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IUnsignedTransactionResult>> ExecuteAsync(global::Libplanet.Crypto.Address address, global::System.String plainValue, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IUnsignedTransactionResult>> Watch(global::Libplanet.Crypto.Address address, global::System.String plainValue, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetSession GraphQL operation
    /// <code>
    /// query GetSession($sessionId: Address!) {
    ///   stateQuery {
    ///     __typename
    ///     session(sessionId: $sessionId) {
    ///       __typename
    ///       metadata {
    ///         __typename
    ///         id
    ///         organizer
    ///         prize
    ///         maximumUser
    ///         minimumUser
    ///         remainingUser
    ///         startAfter
    ///         maxRounds
    ///         roundLength
    ///         roundInterval
    ///         initialHealthPoint
    ///         numberOfGloves
    ///         users
    ///         ... on SessionMetadata {
    ///           id
    ///         }
    ///       }
    ///       state
    ///       players {
    ///         __typename
    ///         id
    ///         gloves
    ///         state
    ///         ... on Player {
    ///           id
    ///         }
    ///       }
    ///       phases {
    ///         __typename
    ///         height
    ///         matches {
    ///           __typename
    ///           startHeight
    ///           players
    ///           state
    ///           rounds {
    ///             __typename
    ///             condition1 {
    ///               __typename
    ///               healthPoint
    ///               gloveUsed
    ///               submission
    ///             }
    ///             condition2 {
    ///               __typename
    ///               healthPoint
    ///               gloveUsed
    ///               submission
    ///             }
    ///             winner
    ///           }
    ///           winner
    ///         }
    ///       }
    ///       creationHeight
    ///       startHeight
    ///       height
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class GetSessionQueryDocument : global::StrawberryShake.IDocument
    {
        private GetSessionQueryDocument()
        {
        }

        public static GetSessionQueryDocument Instance { get; } = new GetSessionQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x71,
            0x75,
            0x65,
            0x72,
            0x79,
            0x20,
            0x47,
            0x65,
            0x74,
            0x53,
            0x65,
            0x73,
            0x73,
            0x69,
            0x6f,
            0x6e,
            0x28,
            0x24,
            0x73,
            0x65,
            0x73,
            0x73,
            0x69,
            0x6f,
            0x6e,
            0x49,
            0x64,
            0x3a,
            0x20,
            0x41,
            0x64,
            0x64,
            0x72,
            0x65,
            0x73,
            0x73,
            0x21,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x73,
            0x74,
            0x61,
            0x74,
            0x65,
            0x51,
            0x75,
            0x65,
            0x72,
            0x79,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x73,
            0x65,
            0x73,
            0x73,
            0x69,
            0x6f,
            0x6e,
            0x28,
            0x73,
            0x65,
            0x73,
            0x73,
            0x69,
            0x6f,
            0x6e,
            0x49,
            0x64,
            0x3a,
            0x20,
            0x24,
            0x73,
            0x65,
            0x73,
            0x73,
            0x69,
            0x6f,
            0x6e,
            0x49,
            0x64,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x6d,
            0x65,
            0x74,
            0x61,
            0x64,
            0x61,
            0x74,
            0x61,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x69,
            0x64,
            0x20,
            0x6f,
            0x72,
            0x67,
            0x61,
            0x6e,
            0x69,
            0x7a,
            0x65,
            0x72,
            0x20,
            0x70,
            0x72,
            0x69,
            0x7a,
            0x65,
            0x20,
            0x6d,
            0x61,
            0x78,
            0x69,
            0x6d,
            0x75,
            0x6d,
            0x55,
            0x73,
            0x65,
            0x72,
            0x20,
            0x6d,
            0x69,
            0x6e,
            0x69,
            0x6d,
            0x75,
            0x6d,
            0x55,
            0x73,
            0x65,
            0x72,
            0x20,
            0x72,
            0x65,
            0x6d,
            0x61,
            0x69,
            0x6e,
            0x69,
            0x6e,
            0x67,
            0x55,
            0x73,
            0x65,
            0x72,
            0x20,
            0x73,
            0x74,
            0x61,
            0x72,
            0x74,
            0x41,
            0x66,
            0x74,
            0x65,
            0x72,
            0x20,
            0x6d,
            0x61,
            0x78,
            0x52,
            0x6f,
            0x75,
            0x6e,
            0x64,
            0x73,
            0x20,
            0x72,
            0x6f,
            0x75,
            0x6e,
            0x64,
            0x4c,
            0x65,
            0x6e,
            0x67,
            0x74,
            0x68,
            0x20,
            0x72,
            0x6f,
            0x75,
            0x6e,
            0x64,
            0x49,
            0x6e,
            0x74,
            0x65,
            0x72,
            0x76,
            0x61,
            0x6c,
            0x20,
            0x69,
            0x6e,
            0x69,
            0x74,
            0x69,
            0x61,
            0x6c,
            0x48,
            0x65,
            0x61,
            0x6c,
            0x74,
            0x68,
            0x50,
            0x6f,
            0x69,
            0x6e,
            0x74,
            0x20,
            0x6e,
            0x75,
            0x6d,
            0x62,
            0x65,
            0x72,
            0x4f,
            0x66,
            0x47,
            0x6c,
            0x6f,
            0x76,
            0x65,
            0x73,
            0x20,
            0x75,
            0x73,
            0x65,
            0x72,
            0x73,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x53,
            0x65,
            0x73,
            0x73,
            0x69,
            0x6f,
            0x6e,
            0x4d,
            0x65,
            0x74,
            0x61,
            0x64,
            0x61,
            0x74,
            0x61,
            0x20,
            0x7b,
            0x20,
            0x69,
            0x64,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x73,
            0x74,
            0x61,
            0x74,
            0x65,
            0x20,
            0x70,
            0x6c,
            0x61,
            0x79,
            0x65,
            0x72,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x69,
            0x64,
            0x20,
            0x67,
            0x6c,
            0x6f,
            0x76,
            0x65,
            0x73,
            0x20,
            0x73,
            0x74,
            0x61,
            0x74,
            0x65,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x50,
            0x6c,
            0x61,
            0x79,
            0x65,
            0x72,
            0x20,
            0x7b,
            0x20,
            0x69,
            0x64,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x70,
            0x68,
            0x61,
            0x73,
            0x65,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x68,
            0x65,
            0x69,
            0x67,
            0x68,
            0x74,
            0x20,
            0x6d,
            0x61,
            0x74,
            0x63,
            0x68,
            0x65,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x73,
            0x74,
            0x61,
            0x72,
            0x74,
            0x48,
            0x65,
            0x69,
            0x67,
            0x68,
            0x74,
            0x20,
            0x70,
            0x6c,
            0x61,
            0x79,
            0x65,
            0x72,
            0x73,
            0x20,
            0x73,
            0x74,
            0x61,
            0x74,
            0x65,
            0x20,
            0x72,
            0x6f,
            0x75,
            0x6e,
            0x64,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x63,
            0x6f,
            0x6e,
            0x64,
            0x69,
            0x74,
            0x69,
            0x6f,
            0x6e,
            0x31,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x68,
            0x65,
            0x61,
            0x6c,
            0x74,
            0x68,
            0x50,
            0x6f,
            0x69,
            0x6e,
            0x74,
            0x20,
            0x67,
            0x6c,
            0x6f,
            0x76,
            0x65,
            0x55,
            0x73,
            0x65,
            0x64,
            0x20,
            0x73,
            0x75,
            0x62,
            0x6d,
            0x69,
            0x73,
            0x73,
            0x69,
            0x6f,
            0x6e,
            0x20,
            0x7d,
            0x20,
            0x63,
            0x6f,
            0x6e,
            0x64,
            0x69,
            0x74,
            0x69,
            0x6f,
            0x6e,
            0x32,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x68,
            0x65,
            0x61,
            0x6c,
            0x74,
            0x68,
            0x50,
            0x6f,
            0x69,
            0x6e,
            0x74,
            0x20,
            0x67,
            0x6c,
            0x6f,
            0x76,
            0x65,
            0x55,
            0x73,
            0x65,
            0x64,
            0x20,
            0x73,
            0x75,
            0x62,
            0x6d,
            0x69,
            0x73,
            0x73,
            0x69,
            0x6f,
            0x6e,
            0x20,
            0x7d,
            0x20,
            0x77,
            0x69,
            0x6e,
            0x6e,
            0x65,
            0x72,
            0x20,
            0x7d,
            0x20,
            0x77,
            0x69,
            0x6e,
            0x6e,
            0x65,
            0x72,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x63,
            0x72,
            0x65,
            0x61,
            0x74,
            0x69,
            0x6f,
            0x6e,
            0x48,
            0x65,
            0x69,
            0x67,
            0x68,
            0x74,
            0x20,
            0x73,
            0x74,
            0x61,
            0x72,
            0x74,
            0x48,
            0x65,
            0x69,
            0x67,
            0x68,
            0x74,
            0x20,
            0x68,
            0x65,
            0x69,
            0x67,
            0x68,
            0x74,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "18a1f25d7b8c297c52e9bf44f5613cab");

        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetSession GraphQL operation
    /// <code>
    /// query GetSession($sessionId: Address!) {
    ///   stateQuery {
    ///     __typename
    ///     session(sessionId: $sessionId) {
    ///       __typename
    ///       metadata {
    ///         __typename
    ///         id
    ///         organizer
    ///         prize
    ///         maximumUser
    ///         minimumUser
    ///         remainingUser
    ///         startAfter
    ///         maxRounds
    ///         roundLength
    ///         roundInterval
    ///         initialHealthPoint
    ///         numberOfGloves
    ///         users
    ///         ... on SessionMetadata {
    ///           id
    ///         }
    ///       }
    ///       state
    ///       players {
    ///         __typename
    ///         id
    ///         gloves
    ///         state
    ///         ... on Player {
    ///           id
    ///         }
    ///       }
    ///       phases {
    ///         __typename
    ///         height
    ///         matches {
    ///           __typename
    ///           startHeight
    ///           players
    ///           state
    ///           rounds {
    ///             __typename
    ///             condition1 {
    ///               __typename
    ///               healthPoint
    ///               gloveUsed
    ///               submission
    ///             }
    ///             condition2 {
    ///               __typename
    ///               healthPoint
    ///               gloveUsed
    ///               submission
    ///             }
    ///             winner
    ///           }
    ///           winner
    ///         }
    ///       }
    ///       creationHeight
    ///       startHeight
    ///       height
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class GetSessionQuery : global::HandRoyal.Bot.GraphQL.IGetSessionQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetSessionResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _addressFormatter;
        public GetSessionQuery(global::StrawberryShake.IOperationExecutor<IGetSessionResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _addressFormatter = serializerResolver.GetInputValueFormatter("Address");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetSessionResult);

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetSessionResult>> ExecuteAsync(global::Libplanet.Crypto.Address sessionId, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(sessionId);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetSessionResult>> Watch(global::Libplanet.Crypto.Address sessionId, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(sessionId);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::Libplanet.Crypto.Address sessionId)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("sessionId", FormatSessionId(sessionId));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetSessionQueryDocument.Instance.Hash.Value, name: "GetSession", document: GetSessionQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatSessionId(global::Libplanet.Crypto.Address value)
        {
            if (value == null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _addressFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetSession GraphQL operation
    /// <code>
    /// query GetSession($sessionId: Address!) {
    ///   stateQuery {
    ///     __typename
    ///     session(sessionId: $sessionId) {
    ///       __typename
    ///       metadata {
    ///         __typename
    ///         id
    ///         organizer
    ///         prize
    ///         maximumUser
    ///         minimumUser
    ///         remainingUser
    ///         startAfter
    ///         maxRounds
    ///         roundLength
    ///         roundInterval
    ///         initialHealthPoint
    ///         numberOfGloves
    ///         users
    ///         ... on SessionMetadata {
    ///           id
    ///         }
    ///       }
    ///       state
    ///       players {
    ///         __typename
    ///         id
    ///         gloves
    ///         state
    ///         ... on Player {
    ///           id
    ///         }
    ///       }
    ///       phases {
    ///         __typename
    ///         height
    ///         matches {
    ///           __typename
    ///           startHeight
    ///           players
    ///           state
    ///           rounds {
    ///             __typename
    ///             condition1 {
    ///               __typename
    ///               healthPoint
    ///               gloveUsed
    ///               submission
    ///             }
    ///             condition2 {
    ///               __typename
    ///               healthPoint
    ///               gloveUsed
    ///               submission
    ///             }
    ///             winner
    ///           }
    ///           winner
    ///         }
    ///       }
    ///       creationHeight
    ///       startHeight
    ///       height
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IGetSessionQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetSessionResult>> ExecuteAsync(global::Libplanet.Crypto.Address sessionId, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetSessionResult>> Watch(global::Libplanet.Crypto.Address sessionId, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetUserScopedSession GraphQL operation
    /// <code>
    /// query GetUserScopedSession($sessionId: Address!, $userId: Address!) {
    ///   stateQuery {
    ///     __typename
    ///     userScopedSession(sessionId: $sessionId, userId: $userId) {
    ///       __typename
    ///       sessionId
    ///       height
    ///       sessionState
    ///       organizerAddress
    ///       opponentAddress
    ///       currentInterval
    ///       isPlayer
    ///       myGloves
    ///       opponentGloves
    ///       playersLeft
    ///       currentPhaseIndex
    ///       currentUserRoundIndex
    ///       myCondition {
    ///         __typename
    ///         healthPoint
    ///         gloveUsed
    ///         submission
    ///         activeEffectData {
    ///           __typename
    ///           type
    ///           duration
    ///           parameters
    ///         }
    ///       }
    ///       opponentCondition {
    ///         __typename
    ///         healthPoint
    ///         gloveUsed
    ///         submission
    ///         activeEffectData {
    ///           __typename
    ///           type
    ///           duration
    ///           parameters
    ///         }
    ///       }
    ///       lastRoundWinner
    ///       currentUserMatchState
    ///       playerState
    ///       intervalEndHeight
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class GetUserScopedSessionQueryDocument : global::StrawberryShake.IDocument
    {
        private GetUserScopedSessionQueryDocument()
        {
        }

        public static GetUserScopedSessionQueryDocument Instance { get; } = new GetUserScopedSessionQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x71,
            0x75,
            0x65,
            0x72,
            0x79,
            0x20,
            0x47,
            0x65,
            0x74,
            0x55,
            0x73,
            0x65,
            0x72,
            0x53,
            0x63,
            0x6f,
            0x70,
            0x65,
            0x64,
            0x53,
            0x65,
            0x73,
            0x73,
            0x69,
            0x6f,
            0x6e,
            0x28,
            0x24,
            0x73,
            0x65,
            0x73,
            0x73,
            0x69,
            0x6f,
            0x6e,
            0x49,
            0x64,
            0x3a,
            0x20,
            0x41,
            0x64,
            0x64,
            0x72,
            0x65,
            0x73,
            0x73,
            0x21,
            0x2c,
            0x20,
            0x24,
            0x75,
            0x73,
            0x65,
            0x72,
            0x49,
            0x64,
            0x3a,
            0x20,
            0x41,
            0x64,
            0x64,
            0x72,
            0x65,
            0x73,
            0x73,
            0x21,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x73,
            0x74,
            0x61,
            0x74,
            0x65,
            0x51,
            0x75,
            0x65,
            0x72,
            0x79,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x75,
            0x73,
            0x65,
            0x72,
            0x53,
            0x63,
            0x6f,
            0x70,
            0x65,
            0x64,
            0x53,
            0x65,
            0x73,
            0x73,
            0x69,
            0x6f,
            0x6e,
            0x28,
            0x73,
            0x65,
            0x73,
            0x73,
            0x69,
            0x6f,
            0x6e,
            0x49,
            0x64,
            0x3a,
            0x20,
            0x24,
            0x73,
            0x65,
            0x73,
            0x73,
            0x69,
            0x6f,
            0x6e,
            0x49,
            0x64,
            0x2c,
            0x20,
            0x75,
            0x73,
            0x65,
            0x72,
            0x49,
            0x64,
            0x3a,
            0x20,
            0x24,
            0x75,
            0x73,
            0x65,
            0x72,
            0x49,
            0x64,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x73,
            0x65,
            0x73,
            0x73,
            0x69,
            0x6f,
            0x6e,
            0x49,
            0x64,
            0x20,
            0x68,
            0x65,
            0x69,
            0x67,
            0x68,
            0x74,
            0x20,
            0x73,
            0x65,
            0x73,
            0x73,
            0x69,
            0x6f,
            0x6e,
            0x53,
            0x74,
            0x61,
            0x74,
            0x65,
            0x20,
            0x6f,
            0x72,
            0x67,
            0x61,
            0x6e,
            0x69,
            0x7a,
            0x65,
            0x72,
            0x41,
            0x64,
            0x64,
            0x72,
            0x65,
            0x73,
            0x73,
            0x20,
            0x6f,
            0x70,
            0x70,
            0x6f,
            0x6e,
            0x65,
            0x6e,
            0x74,
            0x41,
            0x64,
            0x64,
            0x72,
            0x65,
            0x73,
            0x73,
            0x20,
            0x63,
            0x75,
            0x72,
            0x72,
            0x65,
            0x6e,
            0x74,
            0x49,
            0x6e,
            0x74,
            0x65,
            0x72,
            0x76,
            0x61,
            0x6c,
            0x20,
            0x69,
            0x73,
            0x50,
            0x6c,
            0x61,
            0x79,
            0x65,
            0x72,
            0x20,
            0x6d,
            0x79,
            0x47,
            0x6c,
            0x6f,
            0x76,
            0x65,
            0x73,
            0x20,
            0x6f,
            0x70,
            0x70,
            0x6f,
            0x6e,
            0x65,
            0x6e,
            0x74,
            0x47,
            0x6c,
            0x6f,
            0x76,
            0x65,
            0x73,
            0x20,
            0x70,
            0x6c,
            0x61,
            0x79,
            0x65,
            0x72,
            0x73,
            0x4c,
            0x65,
            0x66,
            0x74,
            0x20,
            0x63,
            0x75,
            0x72,
            0x72,
            0x65,
            0x6e,
            0x74,
            0x50,
            0x68,
            0x61,
            0x73,
            0x65,
            0x49,
            0x6e,
            0x64,
            0x65,
            0x78,
            0x20,
            0x63,
            0x75,
            0x72,
            0x72,
            0x65,
            0x6e,
            0x74,
            0x55,
            0x73,
            0x65,
            0x72,
            0x52,
            0x6f,
            0x75,
            0x6e,
            0x64,
            0x49,
            0x6e,
            0x64,
            0x65,
            0x78,
            0x20,
            0x6d,
            0x79,
            0x43,
            0x6f,
            0x6e,
            0x64,
            0x69,
            0x74,
            0x69,
            0x6f,
            0x6e,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x68,
            0x65,
            0x61,
            0x6c,
            0x74,
            0x68,
            0x50,
            0x6f,
            0x69,
            0x6e,
            0x74,
            0x20,
            0x67,
            0x6c,
            0x6f,
            0x76,
            0x65,
            0x55,
            0x73,
            0x65,
            0x64,
            0x20,
            0x73,
            0x75,
            0x62,
            0x6d,
            0x69,
            0x73,
            0x73,
            0x69,
            0x6f,
            0x6e,
            0x20,
            0x61,
            0x63,
            0x74,
            0x69,
            0x76,
            0x65,
            0x45,
            0x66,
            0x66,
            0x65,
            0x63,
            0x74,
            0x44,
            0x61,
            0x74,
            0x61,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x74,
            0x79,
            0x70,
            0x65,
            0x20,
            0x64,
            0x75,
            0x72,
            0x61,
            0x74,
            0x69,
            0x6f,
            0x6e,
            0x20,
            0x70,
            0x61,
            0x72,
            0x61,
            0x6d,
            0x65,
            0x74,
            0x65,
            0x72,
            0x73,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x6f,
            0x70,
            0x70,
            0x6f,
            0x6e,
            0x65,
            0x6e,
            0x74,
            0x43,
            0x6f,
            0x6e,
            0x64,
            0x69,
            0x74,
            0x69,
            0x6f,
            0x6e,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x68,
            0x65,
            0x61,
            0x6c,
            0x74,
            0x68,
            0x50,
            0x6f,
            0x69,
            0x6e,
            0x74,
            0x20,
            0x67,
            0x6c,
            0x6f,
            0x76,
            0x65,
            0x55,
            0x73,
            0x65,
            0x64,
            0x20,
            0x73,
            0x75,
            0x62,
            0x6d,
            0x69,
            0x73,
            0x73,
            0x69,
            0x6f,
            0x6e,
            0x20,
            0x61,
            0x63,
            0x74,
            0x69,
            0x76,
            0x65,
            0x45,
            0x66,
            0x66,
            0x65,
            0x63,
            0x74,
            0x44,
            0x61,
            0x74,
            0x61,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x74,
            0x79,
            0x70,
            0x65,
            0x20,
            0x64,
            0x75,
            0x72,
            0x61,
            0x74,
            0x69,
            0x6f,
            0x6e,
            0x20,
            0x70,
            0x61,
            0x72,
            0x61,
            0x6d,
            0x65,
            0x74,
            0x65,
            0x72,
            0x73,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x6c,
            0x61,
            0x73,
            0x74,
            0x52,
            0x6f,
            0x75,
            0x6e,
            0x64,
            0x57,
            0x69,
            0x6e,
            0x6e,
            0x65,
            0x72,
            0x20,
            0x63,
            0x75,
            0x72,
            0x72,
            0x65,
            0x6e,
            0x74,
            0x55,
            0x73,
            0x65,
            0x72,
            0x4d,
            0x61,
            0x74,
            0x63,
            0x68,
            0x53,
            0x74,
            0x61,
            0x74,
            0x65,
            0x20,
            0x70,
            0x6c,
            0x61,
            0x79,
            0x65,
            0x72,
            0x53,
            0x74,
            0x61,
            0x74,
            0x65,
            0x20,
            0x69,
            0x6e,
            0x74,
            0x65,
            0x72,
            0x76,
            0x61,
            0x6c,
            0x45,
            0x6e,
            0x64,
            0x48,
            0x65,
            0x69,
            0x67,
            0x68,
            0x74,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "ae6b1ffefc07b9272d419fda2cd3f10f");

        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetUserScopedSession GraphQL operation
    /// <code>
    /// query GetUserScopedSession($sessionId: Address!, $userId: Address!) {
    ///   stateQuery {
    ///     __typename
    ///     userScopedSession(sessionId: $sessionId, userId: $userId) {
    ///       __typename
    ///       sessionId
    ///       height
    ///       sessionState
    ///       organizerAddress
    ///       opponentAddress
    ///       currentInterval
    ///       isPlayer
    ///       myGloves
    ///       opponentGloves
    ///       playersLeft
    ///       currentPhaseIndex
    ///       currentUserRoundIndex
    ///       myCondition {
    ///         __typename
    ///         healthPoint
    ///         gloveUsed
    ///         submission
    ///         activeEffectData {
    ///           __typename
    ///           type
    ///           duration
    ///           parameters
    ///         }
    ///       }
    ///       opponentCondition {
    ///         __typename
    ///         healthPoint
    ///         gloveUsed
    ///         submission
    ///         activeEffectData {
    ///           __typename
    ///           type
    ///           duration
    ///           parameters
    ///         }
    ///       }
    ///       lastRoundWinner
    ///       currentUserMatchState
    ///       playerState
    ///       intervalEndHeight
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class GetUserScopedSessionQuery : global::HandRoyal.Bot.GraphQL.IGetUserScopedSessionQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetUserScopedSessionResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _addressFormatter;
        public GetUserScopedSessionQuery(global::StrawberryShake.IOperationExecutor<IGetUserScopedSessionResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _addressFormatter = serializerResolver.GetInputValueFormatter("Address");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetUserScopedSessionResult);

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetUserScopedSessionResult>> ExecuteAsync(global::Libplanet.Crypto.Address sessionId, global::Libplanet.Crypto.Address userId, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(sessionId, userId);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetUserScopedSessionResult>> Watch(global::Libplanet.Crypto.Address sessionId, global::Libplanet.Crypto.Address userId, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(sessionId, userId);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::Libplanet.Crypto.Address sessionId, global::Libplanet.Crypto.Address userId)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("sessionId", FormatSessionId(sessionId));
            variables.Add("userId", FormatUserId(userId));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetUserScopedSessionQueryDocument.Instance.Hash.Value, name: "GetUserScopedSession", document: GetUserScopedSessionQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatSessionId(global::Libplanet.Crypto.Address value)
        {
            if (value == null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _addressFormatter.Format(value);
        }

        private global::System.Object? FormatUserId(global::Libplanet.Crypto.Address value)
        {
            if (value == null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _addressFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetUserScopedSession GraphQL operation
    /// <code>
    /// query GetUserScopedSession($sessionId: Address!, $userId: Address!) {
    ///   stateQuery {
    ///     __typename
    ///     userScopedSession(sessionId: $sessionId, userId: $userId) {
    ///       __typename
    ///       sessionId
    ///       height
    ///       sessionState
    ///       organizerAddress
    ///       opponentAddress
    ///       currentInterval
    ///       isPlayer
    ///       myGloves
    ///       opponentGloves
    ///       playersLeft
    ///       currentPhaseIndex
    ///       currentUserRoundIndex
    ///       myCondition {
    ///         __typename
    ///         healthPoint
    ///         gloveUsed
    ///         submission
    ///         activeEffectData {
    ///           __typename
    ///           type
    ///           duration
    ///           parameters
    ///         }
    ///       }
    ///       opponentCondition {
    ///         __typename
    ///         healthPoint
    ///         gloveUsed
    ///         submission
    ///         activeEffectData {
    ///           __typename
    ///           type
    ///           duration
    ///           parameters
    ///         }
    ///       }
    ///       lastRoundWinner
    ///       currentUserMatchState
    ///       playerState
    ///       intervalEndHeight
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IGetUserScopedSessionQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetUserScopedSessionResult>> ExecuteAsync(global::Libplanet.Crypto.Address sessionId, global::Libplanet.Crypto.Address userId, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetUserScopedSessionResult>> Watch(global::Libplanet.Crypto.Address sessionId, global::Libplanet.Crypto.Address userId, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetJoinableSessions GraphQL operation
    /// <code>
    /// query GetJoinableSessions {
    ///   stateQuery {
    ///     __typename
    ///     sessions {
    ///       __typename
    ///       metadata {
    ///         __typename
    ///         id
    ///         ... on SessionMetadata {
    ///           id
    ///         }
    ///       }
    ///       state
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class GetJoinableSessionsQueryDocument : global::StrawberryShake.IDocument
    {
        private GetJoinableSessionsQueryDocument()
        {
        }

        public static GetJoinableSessionsQueryDocument Instance { get; } = new GetJoinableSessionsQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x71,
            0x75,
            0x65,
            0x72,
            0x79,
            0x20,
            0x47,
            0x65,
            0x74,
            0x4a,
            0x6f,
            0x69,
            0x6e,
            0x61,
            0x62,
            0x6c,
            0x65,
            0x53,
            0x65,
            0x73,
            0x73,
            0x69,
            0x6f,
            0x6e,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x73,
            0x74,
            0x61,
            0x74,
            0x65,
            0x51,
            0x75,
            0x65,
            0x72,
            0x79,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x73,
            0x65,
            0x73,
            0x73,
            0x69,
            0x6f,
            0x6e,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x6d,
            0x65,
            0x74,
            0x61,
            0x64,
            0x61,
            0x74,
            0x61,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x69,
            0x64,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x53,
            0x65,
            0x73,
            0x73,
            0x69,
            0x6f,
            0x6e,
            0x4d,
            0x65,
            0x74,
            0x61,
            0x64,
            0x61,
            0x74,
            0x61,
            0x20,
            0x7b,
            0x20,
            0x69,
            0x64,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x73,
            0x74,
            0x61,
            0x74,
            0x65,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "664e1bb15827605ffa54b65e48f68f31");

        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetJoinableSessions GraphQL operation
    /// <code>
    /// query GetJoinableSessions {
    ///   stateQuery {
    ///     __typename
    ///     sessions {
    ///       __typename
    ///       metadata {
    ///         __typename
    ///         id
    ///         ... on SessionMetadata {
    ///           id
    ///         }
    ///       }
    ///       state
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class GetJoinableSessionsQuery : global::HandRoyal.Bot.GraphQL.IGetJoinableSessionsQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetJoinableSessionsResult> _operationExecutor;
        public GetJoinableSessionsQuery(global::StrawberryShake.IOperationExecutor<IGetJoinableSessionsResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetJoinableSessionsResult);

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetJoinableSessionsResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetJoinableSessionsResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetJoinableSessionsQueryDocument.Instance.Hash.Value, name: "GetJoinableSessions", document: GetJoinableSessionsQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the GetJoinableSessions GraphQL operation
    /// <code>
    /// query GetJoinableSessions {
    ///   stateQuery {
    ///     __typename
    ///     sessions {
    ///       __typename
    ///       metadata {
    ///         __typename
    ///         id
    ///         ... on SessionMetadata {
    ///           id
    ///         }
    ///       }
    ///       state
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IGetJoinableSessionsQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetJoinableSessionsResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetJoinableSessionsResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the StageTransaction GraphQL operation
    /// <code>
    /// mutation StageTransaction($unsignedTransaction: Hex!, $signature: Hex!) {
    ///   stageTransaction(unsignedTransaction: $unsignedTransaction, signature: $signature)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class StageTransactionMutationDocument : global::StrawberryShake.IDocument
    {
        private StageTransactionMutationDocument()
        {
        }

        public static StageTransactionMutationDocument Instance { get; } = new StageTransactionMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x6d,
            0x75,
            0x74,
            0x61,
            0x74,
            0x69,
            0x6f,
            0x6e,
            0x20,
            0x53,
            0x74,
            0x61,
            0x67,
            0x65,
            0x54,
            0x72,
            0x61,
            0x6e,
            0x73,
            0x61,
            0x63,
            0x74,
            0x69,
            0x6f,
            0x6e,
            0x28,
            0x24,
            0x75,
            0x6e,
            0x73,
            0x69,
            0x67,
            0x6e,
            0x65,
            0x64,
            0x54,
            0x72,
            0x61,
            0x6e,
            0x73,
            0x61,
            0x63,
            0x74,
            0x69,
            0x6f,
            0x6e,
            0x3a,
            0x20,
            0x48,
            0x65,
            0x78,
            0x21,
            0x2c,
            0x20,
            0x24,
            0x73,
            0x69,
            0x67,
            0x6e,
            0x61,
            0x74,
            0x75,
            0x72,
            0x65,
            0x3a,
            0x20,
            0x48,
            0x65,
            0x78,
            0x21,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x73,
            0x74,
            0x61,
            0x67,
            0x65,
            0x54,
            0x72,
            0x61,
            0x6e,
            0x73,
            0x61,
            0x63,
            0x74,
            0x69,
            0x6f,
            0x6e,
            0x28,
            0x75,
            0x6e,
            0x73,
            0x69,
            0x67,
            0x6e,
            0x65,
            0x64,
            0x54,
            0x72,
            0x61,
            0x6e,
            0x73,
            0x61,
            0x63,
            0x74,
            0x69,
            0x6f,
            0x6e,
            0x3a,
            0x20,
            0x24,
            0x75,
            0x6e,
            0x73,
            0x69,
            0x67,
            0x6e,
            0x65,
            0x64,
            0x54,
            0x72,
            0x61,
            0x6e,
            0x73,
            0x61,
            0x63,
            0x74,
            0x69,
            0x6f,
            0x6e,
            0x2c,
            0x20,
            0x73,
            0x69,
            0x67,
            0x6e,
            0x61,
            0x74,
            0x75,
            0x72,
            0x65,
            0x3a,
            0x20,
            0x24,
            0x73,
            0x69,
            0x67,
            0x6e,
            0x61,
            0x74,
            0x75,
            0x72,
            0x65,
            0x29,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "9234093fc812e722ce9e58e7e4bfe67e");

        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the StageTransaction GraphQL operation
    /// <code>
    /// mutation StageTransaction($unsignedTransaction: Hex!, $signature: Hex!) {
    ///   stageTransaction(unsignedTransaction: $unsignedTransaction, signature: $signature)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class StageTransactionMutation : global::HandRoyal.Bot.GraphQL.IStageTransactionMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IStageTransactionResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _hexFormatter;
        public StageTransactionMutation(global::StrawberryShake.IOperationExecutor<IStageTransactionResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _hexFormatter = serializerResolver.GetInputValueFormatter("Hex");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IStageTransactionResult);

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IStageTransactionResult>> ExecuteAsync(global::System.String unsignedTransaction, global::System.String signature, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(unsignedTransaction, signature);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IStageTransactionResult>> Watch(global::System.String unsignedTransaction, global::System.String signature, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(unsignedTransaction, signature);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String unsignedTransaction, global::System.String signature)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("unsignedTransaction", FormatUnsignedTransaction(unsignedTransaction));
            variables.Add("signature", FormatSignature(signature));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: StageTransactionMutationDocument.Instance.Hash.Value, name: "StageTransaction", document: StageTransactionMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatUnsignedTransaction(global::System.String value)
        {
            if (value == null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _hexFormatter.Format(value);
        }

        private global::System.Object? FormatSignature(global::System.String value)
        {
            if (value == null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _hexFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the StageTransaction GraphQL operation
    /// <code>
    /// mutation StageTransaction($unsignedTransaction: Hex!, $signature: Hex!) {
    ///   stageTransaction(unsignedTransaction: $unsignedTransaction, signature: $signature)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IStageTransactionMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IStageTransactionResult>> ExecuteAsync(global::System.String unsignedTransaction, global::System.String signature, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IStageTransactionResult>> Watch(global::System.String unsignedTransaction, global::System.String signature, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the OnTipChanged GraphQL operation
    /// <code>
    /// subscription OnTipChanged {
    ///   onTipChanged {
    ///     __typename
    ///     height
    ///     hash
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class OnTipChangedSubscriptionDocument : global::StrawberryShake.IDocument
    {
        private OnTipChangedSubscriptionDocument()
        {
        }

        public static OnTipChangedSubscriptionDocument Instance { get; } = new OnTipChangedSubscriptionDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Subscription;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x73,
            0x75,
            0x62,
            0x73,
            0x63,
            0x72,
            0x69,
            0x70,
            0x74,
            0x69,
            0x6f,
            0x6e,
            0x20,
            0x4f,
            0x6e,
            0x54,
            0x69,
            0x70,
            0x43,
            0x68,
            0x61,
            0x6e,
            0x67,
            0x65,
            0x64,
            0x20,
            0x7b,
            0x20,
            0x6f,
            0x6e,
            0x54,
            0x69,
            0x70,
            0x43,
            0x68,
            0x61,
            0x6e,
            0x67,
            0x65,
            0x64,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x68,
            0x65,
            0x69,
            0x67,
            0x68,
            0x74,
            0x20,
            0x68,
            0x61,
            0x73,
            0x68,
            0x20,
            0x7d,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "014cfd45598e2175998f029b8e99b162");

        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the OnTipChanged GraphQL operation
    /// <code>
    /// subscription OnTipChanged {
    ///   onTipChanged {
    ///     __typename
    ///     height
    ///     hash
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class OnTipChangedSubscription : global::HandRoyal.Bot.GraphQL.IOnTipChangedSubscription
    {
        private readonly global::StrawberryShake.IOperationExecutor<IOnTipChangedResult> _operationExecutor;
        public OnTipChangedSubscription(global::StrawberryShake.IOperationExecutor<IOnTipChangedResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IOnTipChangedResult);

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IOnTipChangedResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: OnTipChangedSubscriptionDocument.Instance.Hash.Value, name: "OnTipChanged", document: OnTipChangedSubscriptionDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the OnTipChanged GraphQL operation
    /// <code>
    /// subscription OnTipChanged {
    ///   onTipChanged {
    ///     __typename
    ///     height
    ///     hash
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IOnTipChangedSubscription : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.IObservable<global::StrawberryShake.IOperationResult<IOnTipChangedResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the OnSessionChanged GraphQL operation
    /// <code>
    /// subscription OnSessionChanged($sessionId: Address!, $userId: Address!) {
    ///   onSessionChanged(sessionId: $sessionId, userId: $userId) {
    ///     __typename
    ///     sessionState
    ///     sessionId
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class OnSessionChangedSubscriptionDocument : global::StrawberryShake.IDocument
    {
        private OnSessionChangedSubscriptionDocument()
        {
        }

        public static OnSessionChangedSubscriptionDocument Instance { get; } = new OnSessionChangedSubscriptionDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Subscription;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x73,
            0x75,
            0x62,
            0x73,
            0x63,
            0x72,
            0x69,
            0x70,
            0x74,
            0x69,
            0x6f,
            0x6e,
            0x20,
            0x4f,
            0x6e,
            0x53,
            0x65,
            0x73,
            0x73,
            0x69,
            0x6f,
            0x6e,
            0x43,
            0x68,
            0x61,
            0x6e,
            0x67,
            0x65,
            0x64,
            0x28,
            0x24,
            0x73,
            0x65,
            0x73,
            0x73,
            0x69,
            0x6f,
            0x6e,
            0x49,
            0x64,
            0x3a,
            0x20,
            0x41,
            0x64,
            0x64,
            0x72,
            0x65,
            0x73,
            0x73,
            0x21,
            0x2c,
            0x20,
            0x24,
            0x75,
            0x73,
            0x65,
            0x72,
            0x49,
            0x64,
            0x3a,
            0x20,
            0x41,
            0x64,
            0x64,
            0x72,
            0x65,
            0x73,
            0x73,
            0x21,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x6f,
            0x6e,
            0x53,
            0x65,
            0x73,
            0x73,
            0x69,
            0x6f,
            0x6e,
            0x43,
            0x68,
            0x61,
            0x6e,
            0x67,
            0x65,
            0x64,
            0x28,
            0x73,
            0x65,
            0x73,
            0x73,
            0x69,
            0x6f,
            0x6e,
            0x49,
            0x64,
            0x3a,
            0x20,
            0x24,
            0x73,
            0x65,
            0x73,
            0x73,
            0x69,
            0x6f,
            0x6e,
            0x49,
            0x64,
            0x2c,
            0x20,
            0x75,
            0x73,
            0x65,
            0x72,
            0x49,
            0x64,
            0x3a,
            0x20,
            0x24,
            0x75,
            0x73,
            0x65,
            0x72,
            0x49,
            0x64,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x73,
            0x65,
            0x73,
            0x73,
            0x69,
            0x6f,
            0x6e,
            0x53,
            0x74,
            0x61,
            0x74,
            0x65,
            0x20,
            0x73,
            0x65,
            0x73,
            0x73,
            0x69,
            0x6f,
            0x6e,
            0x49,
            0x64,
            0x20,
            0x7d,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "a3d6d3be37e46d9aad6dd9c00c95587c");

        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the OnSessionChanged GraphQL operation
    /// <code>
    /// subscription OnSessionChanged($sessionId: Address!, $userId: Address!) {
    ///   onSessionChanged(sessionId: $sessionId, userId: $userId) {
    ///     __typename
    ///     sessionState
    ///     sessionId
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class OnSessionChangedSubscription : global::HandRoyal.Bot.GraphQL.IOnSessionChangedSubscription
    {
        private readonly global::StrawberryShake.IOperationExecutor<IOnSessionChangedResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _addressFormatter;
        public OnSessionChangedSubscription(global::StrawberryShake.IOperationExecutor<IOnSessionChangedResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _addressFormatter = serializerResolver.GetInputValueFormatter("Address");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IOnSessionChangedResult);

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IOnSessionChangedResult>> Watch(global::Libplanet.Crypto.Address sessionId, global::Libplanet.Crypto.Address userId, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(sessionId, userId);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::Libplanet.Crypto.Address sessionId, global::Libplanet.Crypto.Address userId)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("sessionId", FormatSessionId(sessionId));
            variables.Add("userId", FormatUserId(userId));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: OnSessionChangedSubscriptionDocument.Instance.Hash.Value, name: "OnSessionChanged", document: OnSessionChangedSubscriptionDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatSessionId(global::Libplanet.Crypto.Address value)
        {
            if (value == null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _addressFormatter.Format(value);
        }

        private global::System.Object? FormatUserId(global::Libplanet.Crypto.Address value)
        {
            if (value == null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _addressFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the OnSessionChanged GraphQL operation
    /// <code>
    /// subscription OnSessionChanged($sessionId: Address!, $userId: Address!) {
    ///   onSessionChanged(sessionId: $sessionId, userId: $userId) {
    ///     __typename
    ///     sessionState
    ///     sessionId
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IOnSessionChangedSubscription : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.IObservable<global::StrawberryShake.IOperationResult<IOnSessionChangedResult>> Watch(global::Libplanet.Crypto.Address sessionId, global::Libplanet.Crypto.Address userId, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the GraphQLClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class GraphQLClient : global::HandRoyal.Bot.GraphQL.IGraphQLClient
    {
        private readonly global::HandRoyal.Bot.GraphQL.ICreateUserQuery _createUser;
        private readonly global::HandRoyal.Bot.GraphQL.ICreateSessionQuery _createSession;
        private readonly global::HandRoyal.Bot.GraphQL.IJoinSessionQuery _joinSession;
        private readonly global::HandRoyal.Bot.GraphQL.ISubmitMoveQuery _submitMove;
        private readonly global::HandRoyal.Bot.GraphQL.IPickUpQuery _pickUp;
        private readonly global::HandRoyal.Bot.GraphQL.IPickUpManyQuery _pickUpMany;
        private readonly global::HandRoyal.Bot.GraphQL.IRegisterMatchingQuery _registerMatching;
        private readonly global::HandRoyal.Bot.GraphQL.ICancelMatchingQuery _cancelMatching;
        private readonly global::HandRoyal.Bot.GraphQL.IGetUserDataQuery _getUserData;
        private readonly global::HandRoyal.Bot.GraphQL.ITransactionResultQuery _transactionResult;
        private readonly global::HandRoyal.Bot.GraphQL.IUnsignedTransactionQuery _unsignedTransaction;
        private readonly global::HandRoyal.Bot.GraphQL.IGetSessionQuery _getSession;
        private readonly global::HandRoyal.Bot.GraphQL.IGetUserScopedSessionQuery _getUserScopedSession;
        private readonly global::HandRoyal.Bot.GraphQL.IGetJoinableSessionsQuery _getJoinableSessions;
        private readonly global::HandRoyal.Bot.GraphQL.IStageTransactionMutation _stageTransaction;
        private readonly global::HandRoyal.Bot.GraphQL.IOnTipChangedSubscription _onTipChanged;
        private readonly global::HandRoyal.Bot.GraphQL.IOnSessionChangedSubscription _onSessionChanged;
        public GraphQLClient(global::HandRoyal.Bot.GraphQL.ICreateUserQuery createUser, global::HandRoyal.Bot.GraphQL.ICreateSessionQuery createSession, global::HandRoyal.Bot.GraphQL.IJoinSessionQuery joinSession, global::HandRoyal.Bot.GraphQL.ISubmitMoveQuery submitMove, global::HandRoyal.Bot.GraphQL.IPickUpQuery pickUp, global::HandRoyal.Bot.GraphQL.IPickUpManyQuery pickUpMany, global::HandRoyal.Bot.GraphQL.IRegisterMatchingQuery registerMatching, global::HandRoyal.Bot.GraphQL.ICancelMatchingQuery cancelMatching, global::HandRoyal.Bot.GraphQL.IGetUserDataQuery getUserData, global::HandRoyal.Bot.GraphQL.ITransactionResultQuery transactionResult, global::HandRoyal.Bot.GraphQL.IUnsignedTransactionQuery unsignedTransaction, global::HandRoyal.Bot.GraphQL.IGetSessionQuery getSession, global::HandRoyal.Bot.GraphQL.IGetUserScopedSessionQuery getUserScopedSession, global::HandRoyal.Bot.GraphQL.IGetJoinableSessionsQuery getJoinableSessions, global::HandRoyal.Bot.GraphQL.IStageTransactionMutation stageTransaction, global::HandRoyal.Bot.GraphQL.IOnTipChangedSubscription onTipChanged, global::HandRoyal.Bot.GraphQL.IOnSessionChangedSubscription onSessionChanged)
        {
            _createUser = createUser ?? throw new global::System.ArgumentNullException(nameof(createUser));
            _createSession = createSession ?? throw new global::System.ArgumentNullException(nameof(createSession));
            _joinSession = joinSession ?? throw new global::System.ArgumentNullException(nameof(joinSession));
            _submitMove = submitMove ?? throw new global::System.ArgumentNullException(nameof(submitMove));
            _pickUp = pickUp ?? throw new global::System.ArgumentNullException(nameof(pickUp));
            _pickUpMany = pickUpMany ?? throw new global::System.ArgumentNullException(nameof(pickUpMany));
            _registerMatching = registerMatching ?? throw new global::System.ArgumentNullException(nameof(registerMatching));
            _cancelMatching = cancelMatching ?? throw new global::System.ArgumentNullException(nameof(cancelMatching));
            _getUserData = getUserData ?? throw new global::System.ArgumentNullException(nameof(getUserData));
            _transactionResult = transactionResult ?? throw new global::System.ArgumentNullException(nameof(transactionResult));
            _unsignedTransaction = unsignedTransaction ?? throw new global::System.ArgumentNullException(nameof(unsignedTransaction));
            _getSession = getSession ?? throw new global::System.ArgumentNullException(nameof(getSession));
            _getUserScopedSession = getUserScopedSession ?? throw new global::System.ArgumentNullException(nameof(getUserScopedSession));
            _getJoinableSessions = getJoinableSessions ?? throw new global::System.ArgumentNullException(nameof(getJoinableSessions));
            _stageTransaction = stageTransaction ?? throw new global::System.ArgumentNullException(nameof(stageTransaction));
            _onTipChanged = onTipChanged ?? throw new global::System.ArgumentNullException(nameof(onTipChanged));
            _onSessionChanged = onSessionChanged ?? throw new global::System.ArgumentNullException(nameof(onSessionChanged));
        }

        public static global::System.String ClientName => "GraphQLClient";
        public global::HandRoyal.Bot.GraphQL.ICreateUserQuery CreateUser => _createUser;
        public global::HandRoyal.Bot.GraphQL.ICreateSessionQuery CreateSession => _createSession;
        public global::HandRoyal.Bot.GraphQL.IJoinSessionQuery JoinSession => _joinSession;
        public global::HandRoyal.Bot.GraphQL.ISubmitMoveQuery SubmitMove => _submitMove;
        public global::HandRoyal.Bot.GraphQL.IPickUpQuery PickUp => _pickUp;
        public global::HandRoyal.Bot.GraphQL.IPickUpManyQuery PickUpMany => _pickUpMany;
        public global::HandRoyal.Bot.GraphQL.IRegisterMatchingQuery RegisterMatching => _registerMatching;
        public global::HandRoyal.Bot.GraphQL.ICancelMatchingQuery CancelMatching => _cancelMatching;
        public global::HandRoyal.Bot.GraphQL.IGetUserDataQuery GetUserData => _getUserData;
        public global::HandRoyal.Bot.GraphQL.ITransactionResultQuery TransactionResult => _transactionResult;
        public global::HandRoyal.Bot.GraphQL.IUnsignedTransactionQuery UnsignedTransaction => _unsignedTransaction;
        public global::HandRoyal.Bot.GraphQL.IGetSessionQuery GetSession => _getSession;
        public global::HandRoyal.Bot.GraphQL.IGetUserScopedSessionQuery GetUserScopedSession => _getUserScopedSession;
        public global::HandRoyal.Bot.GraphQL.IGetJoinableSessionsQuery GetJoinableSessions => _getJoinableSessions;
        public global::HandRoyal.Bot.GraphQL.IStageTransactionMutation StageTransaction => _stageTransaction;
        public global::HandRoyal.Bot.GraphQL.IOnTipChangedSubscription OnTipChanged => _onTipChanged;
        public global::HandRoyal.Bot.GraphQL.IOnSessionChangedSubscription OnSessionChanged => _onSessionChanged;
    }

    /// <summary>
    /// Represents the GraphQLClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IGraphQLClient
    {
        global::HandRoyal.Bot.GraphQL.ICreateUserQuery CreateUser { get; }

        global::HandRoyal.Bot.GraphQL.ICreateSessionQuery CreateSession { get; }

        global::HandRoyal.Bot.GraphQL.IJoinSessionQuery JoinSession { get; }

        global::HandRoyal.Bot.GraphQL.ISubmitMoveQuery SubmitMove { get; }

        global::HandRoyal.Bot.GraphQL.IPickUpQuery PickUp { get; }

        global::HandRoyal.Bot.GraphQL.IPickUpManyQuery PickUpMany { get; }

        global::HandRoyal.Bot.GraphQL.IRegisterMatchingQuery RegisterMatching { get; }

        global::HandRoyal.Bot.GraphQL.ICancelMatchingQuery CancelMatching { get; }

        global::HandRoyal.Bot.GraphQL.IGetUserDataQuery GetUserData { get; }

        global::HandRoyal.Bot.GraphQL.ITransactionResultQuery TransactionResult { get; }

        global::HandRoyal.Bot.GraphQL.IUnsignedTransactionQuery UnsignedTransaction { get; }

        global::HandRoyal.Bot.GraphQL.IGetSessionQuery GetSession { get; }

        global::HandRoyal.Bot.GraphQL.IGetUserScopedSessionQuery GetUserScopedSession { get; }

        global::HandRoyal.Bot.GraphQL.IGetJoinableSessionsQuery GetJoinableSessions { get; }

        global::HandRoyal.Bot.GraphQL.IStageTransactionMutation StageTransaction { get; }

        global::HandRoyal.Bot.GraphQL.IOnTipChangedSubscription OnTipChanged { get; }

        global::HandRoyal.Bot.GraphQL.IOnSessionChangedSubscription OnSessionChanged { get; }
    }
}

namespace HandRoyal.Bot.GraphQL.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class UserDataEntity
    {
        public UserDataEntity(global::Libplanet.Crypto.Address id = default !, global::System.String? name = default !, global::System.Collections.Generic.IReadOnlyList<global::Libplanet.Crypto.Address>? registeredGloves = default !, global::Libplanet.Crypto.Address equippedGlove = default !, global::Libplanet.Crypto.Address sessionId = default !, global::System.Int64 balance = default !, global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? ownedGloves = default !)
        {
            Id = id;
            Name = name;
            RegisteredGloves = registeredGloves;
            EquippedGlove = equippedGlove;
            SessionId = sessionId;
            Balance = balance;
            OwnedGloves = ownedGloves;
        }

        public global::Libplanet.Crypto.Address Id { get; }
        public global::System.String? Name { get; }
        public global::System.Collections.Generic.IReadOnlyList<global::Libplanet.Crypto.Address>? RegisteredGloves { get; }
        public global::Libplanet.Crypto.Address EquippedGlove { get; }
        public global::Libplanet.Crypto.Address SessionId { get; }
        public global::System.Int64 Balance { get; }
        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? OwnedGloves { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class GloveInfoEntity
    {
        public GloveInfoEntity(global::Libplanet.Crypto.Address id = default !, global::System.Int32 count = default !)
        {
            Id = id;
            Count = count;
        }

        public global::Libplanet.Crypto.Address Id { get; }
        public global::System.Int32 Count { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class SessionMetadataEntity
    {
        public SessionMetadataEntity(global::Libplanet.Crypto.Address id = default !, global::Libplanet.Crypto.Address organizer = default !, global::Libplanet.Crypto.Address prize = default !, global::System.Int32 maximumUser = default !, global::System.Int32 minimumUser = default !, global::System.Int32 remainingUser = default !, global::System.Int64 startAfter = default !, global::System.Int32 maxRounds = default !, global::System.Int64 roundLength = default !, global::System.Int64 roundInterval = default !, global::System.Int32 initialHealthPoint = default !, global::System.Int32 numberOfGloves = default !, global::System.Collections.Generic.IReadOnlyList<global::Libplanet.Crypto.Address>? users = default !)
        {
            Id = id;
            Organizer = organizer;
            Prize = prize;
            MaximumUser = maximumUser;
            MinimumUser = minimumUser;
            RemainingUser = remainingUser;
            StartAfter = startAfter;
            MaxRounds = maxRounds;
            RoundLength = roundLength;
            RoundInterval = roundInterval;
            InitialHealthPoint = initialHealthPoint;
            NumberOfGloves = numberOfGloves;
            Users = users;
        }

        public global::Libplanet.Crypto.Address Id { get; }
        public global::Libplanet.Crypto.Address Organizer { get; }
        public global::Libplanet.Crypto.Address Prize { get; }
        public global::System.Int32 MaximumUser { get; }
        public global::System.Int32 MinimumUser { get; }
        public global::System.Int32 RemainingUser { get; }
        public global::System.Int64 StartAfter { get; }
        public global::System.Int32 MaxRounds { get; }
        public global::System.Int64 RoundLength { get; }
        public global::System.Int64 RoundInterval { get; }
        public global::System.Int32 InitialHealthPoint { get; }
        public global::System.Int32 NumberOfGloves { get; }
        public global::System.Collections.Generic.IReadOnlyList<global::Libplanet.Crypto.Address>? Users { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class PlayerEntity
    {
        public PlayerEntity(global::Libplanet.Crypto.Address id = default !, global::System.Collections.Generic.IReadOnlyList<global::Libplanet.Crypto.Address>? gloves = default !, global::HandRoyal.Bot.GraphQL.PlayerState state = default !)
        {
            Id = id;
            Gloves = gloves;
            State = state;
        }

        public global::Libplanet.Crypto.Address Id { get; }
        public global::System.Collections.Generic.IReadOnlyList<global::Libplanet.Crypto.Address>? Gloves { get; }
        public global::HandRoyal.Bot.GraphQL.PlayerState State { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class CreateUserResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::HandRoyal.Bot.GraphQL.CreateUserResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public CreateUserResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::HandRoyal.Bot.GraphQL.ICreateUserResult);

        public CreateUserResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is CreateUserResultInfo info)
            {
                return new CreateUserResult(MapICreateUser_ActionQuery(info.ActionQuery, snapshot));
            }

            throw new global::System.ArgumentException("CreateUserResultInfo expected.");
        }

        private global::HandRoyal.Bot.GraphQL.ICreateUser_ActionQuery? MapICreateUser_ActionQuery(global::HandRoyal.Bot.GraphQL.State.Query_ActionQueryData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            ICreateUser_ActionQuery returnValue = default !;
            if (data?.__typename.Equals("Query_ActionQuery", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new CreateUser_ActionQuery_Query_ActionQuery(data.CreateUser);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class CreateUserResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public CreateUserResultInfo(global::HandRoyal.Bot.GraphQL.State.Query_ActionQueryData? actionQuery, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            ActionQuery = actionQuery;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::HandRoyal.Bot.GraphQL.State.Query_ActionQueryData? ActionQuery { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new CreateUserResultInfo(ActionQuery, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class CreateSessionResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::HandRoyal.Bot.GraphQL.CreateSessionResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public CreateSessionResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::HandRoyal.Bot.GraphQL.ICreateSessionResult);

        public CreateSessionResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is CreateSessionResultInfo info)
            {
                return new CreateSessionResult(MapICreateSession_ActionQuery(info.ActionQuery, snapshot));
            }

            throw new global::System.ArgumentException("CreateSessionResultInfo expected.");
        }

        private global::HandRoyal.Bot.GraphQL.ICreateSession_ActionQuery? MapICreateSession_ActionQuery(global::HandRoyal.Bot.GraphQL.State.Query_ActionQueryData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            ICreateSession_ActionQuery returnValue = default !;
            if (data?.__typename.Equals("Query_ActionQuery", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new CreateSession_ActionQuery_Query_ActionQuery(data.CreateSession);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class CreateSessionResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public CreateSessionResultInfo(global::HandRoyal.Bot.GraphQL.State.Query_ActionQueryData? actionQuery, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            ActionQuery = actionQuery;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::HandRoyal.Bot.GraphQL.State.Query_ActionQueryData? ActionQuery { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new CreateSessionResultInfo(ActionQuery, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class JoinSessionResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::HandRoyal.Bot.GraphQL.JoinSessionResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public JoinSessionResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::HandRoyal.Bot.GraphQL.IJoinSessionResult);

        public JoinSessionResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is JoinSessionResultInfo info)
            {
                return new JoinSessionResult(MapIJoinSession_ActionQuery(info.ActionQuery, snapshot));
            }

            throw new global::System.ArgumentException("JoinSessionResultInfo expected.");
        }

        private global::HandRoyal.Bot.GraphQL.IJoinSession_ActionQuery? MapIJoinSession_ActionQuery(global::HandRoyal.Bot.GraphQL.State.Query_ActionQueryData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IJoinSession_ActionQuery returnValue = default !;
            if (data?.__typename.Equals("Query_ActionQuery", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new JoinSession_ActionQuery_Query_ActionQuery(data.JoinSession);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class JoinSessionResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public JoinSessionResultInfo(global::HandRoyal.Bot.GraphQL.State.Query_ActionQueryData? actionQuery, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            ActionQuery = actionQuery;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::HandRoyal.Bot.GraphQL.State.Query_ActionQueryData? ActionQuery { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new JoinSessionResultInfo(ActionQuery, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class SubmitMoveResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::HandRoyal.Bot.GraphQL.SubmitMoveResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public SubmitMoveResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::HandRoyal.Bot.GraphQL.ISubmitMoveResult);

        public SubmitMoveResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is SubmitMoveResultInfo info)
            {
                return new SubmitMoveResult(MapISubmitMove_ActionQuery(info.ActionQuery, snapshot));
            }

            throw new global::System.ArgumentException("SubmitMoveResultInfo expected.");
        }

        private global::HandRoyal.Bot.GraphQL.ISubmitMove_ActionQuery? MapISubmitMove_ActionQuery(global::HandRoyal.Bot.GraphQL.State.Query_ActionQueryData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            ISubmitMove_ActionQuery returnValue = default !;
            if (data?.__typename.Equals("Query_ActionQuery", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new SubmitMove_ActionQuery_Query_ActionQuery(data.SubmitMove);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class SubmitMoveResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public SubmitMoveResultInfo(global::HandRoyal.Bot.GraphQL.State.Query_ActionQueryData? actionQuery, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            ActionQuery = actionQuery;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::HandRoyal.Bot.GraphQL.State.Query_ActionQueryData? ActionQuery { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new SubmitMoveResultInfo(ActionQuery, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class PickUpResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::HandRoyal.Bot.GraphQL.PickUpResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public PickUpResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::HandRoyal.Bot.GraphQL.IPickUpResult);

        public PickUpResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is PickUpResultInfo info)
            {
                return new PickUpResult(MapIPickUp_ActionQuery(info.ActionQuery, snapshot));
            }

            throw new global::System.ArgumentException("PickUpResultInfo expected.");
        }

        private global::HandRoyal.Bot.GraphQL.IPickUp_ActionQuery? MapIPickUp_ActionQuery(global::HandRoyal.Bot.GraphQL.State.Query_ActionQueryData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IPickUp_ActionQuery returnValue = default !;
            if (data?.__typename.Equals("Query_ActionQuery", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new PickUp_ActionQuery_Query_ActionQuery(data.PickUp);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class PickUpResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public PickUpResultInfo(global::HandRoyal.Bot.GraphQL.State.Query_ActionQueryData? actionQuery, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            ActionQuery = actionQuery;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::HandRoyal.Bot.GraphQL.State.Query_ActionQueryData? ActionQuery { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new PickUpResultInfo(ActionQuery, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class PickUpManyResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::HandRoyal.Bot.GraphQL.PickUpManyResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public PickUpManyResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::HandRoyal.Bot.GraphQL.IPickUpManyResult);

        public PickUpManyResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is PickUpManyResultInfo info)
            {
                return new PickUpManyResult(MapIPickUpMany_ActionQuery(info.ActionQuery, snapshot));
            }

            throw new global::System.ArgumentException("PickUpManyResultInfo expected.");
        }

        private global::HandRoyal.Bot.GraphQL.IPickUpMany_ActionQuery? MapIPickUpMany_ActionQuery(global::HandRoyal.Bot.GraphQL.State.Query_ActionQueryData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IPickUpMany_ActionQuery returnValue = default !;
            if (data?.__typename.Equals("Query_ActionQuery", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new PickUpMany_ActionQuery_Query_ActionQuery(data.PickUpMany);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class PickUpManyResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public PickUpManyResultInfo(global::HandRoyal.Bot.GraphQL.State.Query_ActionQueryData? actionQuery, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            ActionQuery = actionQuery;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::HandRoyal.Bot.GraphQL.State.Query_ActionQueryData? ActionQuery { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new PickUpManyResultInfo(ActionQuery, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class RegisterMatchingResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::HandRoyal.Bot.GraphQL.RegisterMatchingResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public RegisterMatchingResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::HandRoyal.Bot.GraphQL.IRegisterMatchingResult);

        public RegisterMatchingResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is RegisterMatchingResultInfo info)
            {
                return new RegisterMatchingResult(MapIRegisterMatching_ActionQuery(info.ActionQuery, snapshot));
            }

            throw new global::System.ArgumentException("RegisterMatchingResultInfo expected.");
        }

        private global::HandRoyal.Bot.GraphQL.IRegisterMatching_ActionQuery? MapIRegisterMatching_ActionQuery(global::HandRoyal.Bot.GraphQL.State.Query_ActionQueryData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IRegisterMatching_ActionQuery returnValue = default !;
            if (data?.__typename.Equals("Query_ActionQuery", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new RegisterMatching_ActionQuery_Query_ActionQuery(data.RegisterMatching);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class RegisterMatchingResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public RegisterMatchingResultInfo(global::HandRoyal.Bot.GraphQL.State.Query_ActionQueryData? actionQuery, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            ActionQuery = actionQuery;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::HandRoyal.Bot.GraphQL.State.Query_ActionQueryData? ActionQuery { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new RegisterMatchingResultInfo(ActionQuery, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class CancelMatchingResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::HandRoyal.Bot.GraphQL.CancelMatchingResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public CancelMatchingResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::HandRoyal.Bot.GraphQL.ICancelMatchingResult);

        public CancelMatchingResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is CancelMatchingResultInfo info)
            {
                return new CancelMatchingResult(MapICancelMatching_ActionQuery(info.ActionQuery, snapshot));
            }

            throw new global::System.ArgumentException("CancelMatchingResultInfo expected.");
        }

        private global::HandRoyal.Bot.GraphQL.ICancelMatching_ActionQuery? MapICancelMatching_ActionQuery(global::HandRoyal.Bot.GraphQL.State.Query_ActionQueryData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            ICancelMatching_ActionQuery returnValue = default !;
            if (data?.__typename.Equals("Query_ActionQuery", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new CancelMatching_ActionQuery_Query_ActionQuery(data.CancelMatching);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class CancelMatchingResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public CancelMatchingResultInfo(global::HandRoyal.Bot.GraphQL.State.Query_ActionQueryData? actionQuery, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            ActionQuery = actionQuery;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::HandRoyal.Bot.GraphQL.State.Query_ActionQueryData? ActionQuery { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new CancelMatchingResultInfo(ActionQuery, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class GetUserDataResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::HandRoyal.Bot.GraphQL.GetUserDataResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::HandRoyal.Bot.GraphQL.State.UserDataEntity, GetUserData_StateQuery_GetUserData_UserData> _getUserData_StateQuery_GetUserData_UserDataFromUserDataEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::HandRoyal.Bot.GraphQL.State.GloveInfoEntity, GetUserData_StateQuery_GetUserData_OwnedGloves_GloveInfo> _getUserData_StateQuery_GetUserData_OwnedGloves_GloveInfoFromGloveInfoEntityMapper;
        public GetUserDataResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::HandRoyal.Bot.GraphQL.State.UserDataEntity, GetUserData_StateQuery_GetUserData_UserData> getUserData_StateQuery_GetUserData_UserDataFromUserDataEntityMapper, global::StrawberryShake.IEntityMapper<global::HandRoyal.Bot.GraphQL.State.GloveInfoEntity, GetUserData_StateQuery_GetUserData_OwnedGloves_GloveInfo> getUserData_StateQuery_GetUserData_OwnedGloves_GloveInfoFromGloveInfoEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getUserData_StateQuery_GetUserData_UserDataFromUserDataEntityMapper = getUserData_StateQuery_GetUserData_UserDataFromUserDataEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getUserData_StateQuery_GetUserData_UserDataFromUserDataEntityMapper));
            _getUserData_StateQuery_GetUserData_OwnedGloves_GloveInfoFromGloveInfoEntityMapper = getUserData_StateQuery_GetUserData_OwnedGloves_GloveInfoFromGloveInfoEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getUserData_StateQuery_GetUserData_OwnedGloves_GloveInfoFromGloveInfoEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::HandRoyal.Bot.GraphQL.IGetUserDataResult);

        public GetUserDataResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetUserDataResultInfo info)
            {
                return new GetUserDataResult(MapIGetUserData_StateQuery(info.StateQuery, snapshot));
            }

            throw new global::System.ArgumentException("GetUserDataResultInfo expected.");
        }

        private global::HandRoyal.Bot.GraphQL.IGetUserData_StateQuery? MapIGetUserData_StateQuery(global::HandRoyal.Bot.GraphQL.State.Query_StateQueryData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetUserData_StateQuery returnValue = default !;
            if (data?.__typename.Equals("Query_StateQuery", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetUserData_StateQuery_Query_StateQuery(MapIGetUserData_StateQuery_GetUserData(data.GetUserData, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::HandRoyal.Bot.GraphQL.IGetUserData_StateQuery_GetUserData? MapIGetUserData_StateQuery_GetUserData(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("UserData", global::System.StringComparison.Ordinal))
            {
                return _getUserData_StateQuery_GetUserData_UserDataFromUserDataEntityMapper.Map(snapshot.GetEntity<global::HandRoyal.Bot.GraphQL.State.UserDataEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::HandRoyal.Bot.GraphQL.IGetUserData_StateQuery_GetUserData_OwnedGloves?>? MapIGetUserData_StateQuery_GetUserData_OwnedGlovesArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var gloveInfos = new global::System.Collections.Generic.List<global::HandRoyal.Bot.GraphQL.IGetUserData_StateQuery_GetUserData_OwnedGloves?>();
            foreach (global::StrawberryShake.EntityId? child in list)
            {
                gloveInfos.Add(MapIGetUserData_StateQuery_GetUserData_OwnedGloves(child, snapshot));
            }

            return gloveInfos;
        }

        private global::HandRoyal.Bot.GraphQL.IGetUserData_StateQuery_GetUserData_OwnedGloves? MapIGetUserData_StateQuery_GetUserData_OwnedGloves(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("GloveInfo", global::System.StringComparison.Ordinal))
            {
                return _getUserData_StateQuery_GetUserData_OwnedGloves_GloveInfoFromGloveInfoEntityMapper.Map(snapshot.GetEntity<global::HandRoyal.Bot.GraphQL.State.GloveInfoEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class GetUserDataResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetUserDataResultInfo(global::HandRoyal.Bot.GraphQL.State.Query_StateQueryData? stateQuery, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            StateQuery = stateQuery;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::HandRoyal.Bot.GraphQL.State.Query_StateQueryData? StateQuery { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetUserDataResultInfo(StateQuery, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class TransactionResultResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::HandRoyal.Bot.GraphQL.TransactionResultResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public TransactionResultResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::HandRoyal.Bot.GraphQL.ITransactionResultResult);

        public TransactionResultResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is TransactionResultResultInfo info)
            {
                return new TransactionResultResult(MapITransactionResult_Transaction(info.Transaction, snapshot));
            }

            throw new global::System.ArgumentException("TransactionResultResultInfo expected.");
        }

        private global::HandRoyal.Bot.GraphQL.ITransactionResult_Transaction? MapITransactionResult_Transaction(global::HandRoyal.Bot.GraphQL.State.Query_TransactionData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            ITransactionResult_Transaction returnValue = default !;
            if (data?.__typename.Equals("Query_Transaction", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new TransactionResult_Transaction_Query_Transaction(MapITransactionResult_Transaction_TransactionResult(data.TransactionResult, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::HandRoyal.Bot.GraphQL.ITransactionResult_Transaction_TransactionResult? MapITransactionResult_Transaction_TransactionResult(global::HandRoyal.Bot.GraphQL.State.TxResultValueData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            ITransactionResult_Transaction_TransactionResult returnValue = default !;
            if (data?.__typename.Equals("TxResultValue", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new TransactionResult_Transaction_TransactionResult_TxResultValue(data.TxStatus ?? throw new global::System.ArgumentNullException(), data.BlockIndex, data.ExceptionNames);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class TransactionResultResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public TransactionResultResultInfo(global::HandRoyal.Bot.GraphQL.State.Query_TransactionData? transaction, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Transaction = transaction;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::HandRoyal.Bot.GraphQL.State.Query_TransactionData? Transaction { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new TransactionResultResultInfo(Transaction, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class UnsignedTransactionResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::HandRoyal.Bot.GraphQL.UnsignedTransactionResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public UnsignedTransactionResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::HandRoyal.Bot.GraphQL.IUnsignedTransactionResult);

        public UnsignedTransactionResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is UnsignedTransactionResultInfo info)
            {
                return new UnsignedTransactionResult(MapIUnsignedTransaction_Transaction(info.Transaction, snapshot));
            }

            throw new global::System.ArgumentException("UnsignedTransactionResultInfo expected.");
        }

        private global::HandRoyal.Bot.GraphQL.IUnsignedTransaction_Transaction? MapIUnsignedTransaction_Transaction(global::HandRoyal.Bot.GraphQL.State.Query_TransactionData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IUnsignedTransaction_Transaction returnValue = default !;
            if (data?.__typename.Equals("Query_Transaction", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new UnsignedTransaction_Transaction_Query_Transaction(data.UnsignedTransaction);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class UnsignedTransactionResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public UnsignedTransactionResultInfo(global::HandRoyal.Bot.GraphQL.State.Query_TransactionData? transaction, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Transaction = transaction;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::HandRoyal.Bot.GraphQL.State.Query_TransactionData? Transaction { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new UnsignedTransactionResultInfo(Transaction, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class GetSessionResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::HandRoyal.Bot.GraphQL.GetSessionResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::HandRoyal.Bot.GraphQL.State.SessionMetadataEntity, GetSession_StateQuery_Session_Metadata_SessionMetadata> _getSession_StateQuery_Session_Metadata_SessionMetadataFromSessionMetadataEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::HandRoyal.Bot.GraphQL.State.PlayerEntity, GetSession_StateQuery_Session_Players_Player> _getSession_StateQuery_Session_Players_PlayerFromPlayerEntityMapper;
        public GetSessionResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::HandRoyal.Bot.GraphQL.State.SessionMetadataEntity, GetSession_StateQuery_Session_Metadata_SessionMetadata> getSession_StateQuery_Session_Metadata_SessionMetadataFromSessionMetadataEntityMapper, global::StrawberryShake.IEntityMapper<global::HandRoyal.Bot.GraphQL.State.PlayerEntity, GetSession_StateQuery_Session_Players_Player> getSession_StateQuery_Session_Players_PlayerFromPlayerEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getSession_StateQuery_Session_Metadata_SessionMetadataFromSessionMetadataEntityMapper = getSession_StateQuery_Session_Metadata_SessionMetadataFromSessionMetadataEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getSession_StateQuery_Session_Metadata_SessionMetadataFromSessionMetadataEntityMapper));
            _getSession_StateQuery_Session_Players_PlayerFromPlayerEntityMapper = getSession_StateQuery_Session_Players_PlayerFromPlayerEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getSession_StateQuery_Session_Players_PlayerFromPlayerEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::HandRoyal.Bot.GraphQL.IGetSessionResult);

        public GetSessionResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetSessionResultInfo info)
            {
                return new GetSessionResult(MapIGetSession_StateQuery(info.StateQuery, snapshot));
            }

            throw new global::System.ArgumentException("GetSessionResultInfo expected.");
        }

        private global::HandRoyal.Bot.GraphQL.IGetSession_StateQuery? MapIGetSession_StateQuery(global::HandRoyal.Bot.GraphQL.State.Query_StateQueryData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetSession_StateQuery returnValue = default !;
            if (data?.__typename.Equals("Query_StateQuery", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetSession_StateQuery_Query_StateQuery(MapIGetSession_StateQuery_Session(data.Session, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::HandRoyal.Bot.GraphQL.IGetSession_StateQuery_Session? MapIGetSession_StateQuery_Session(global::HandRoyal.Bot.GraphQL.State.SessionData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetSession_StateQuery_Session returnValue = default !;
            if (data?.__typename.Equals("Session", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetSession_StateQuery_Session_Session(MapIGetSession_StateQuery_Session_Metadata(data.Metadata, snapshot), data.State ?? throw new global::System.ArgumentNullException(), MapIGetSession_StateQuery_Session_PlayersArray(data.Players, snapshot), MapIGetSession_StateQuery_Session_PhasesArray(data.Phases, snapshot), data.CreationHeight ?? throw new global::System.ArgumentNullException(), data.StartHeight ?? throw new global::System.ArgumentNullException(), data.Height ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::HandRoyal.Bot.GraphQL.IGetSession_StateQuery_Session_Metadata? MapIGetSession_StateQuery_Session_Metadata(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("SessionMetadata", global::System.StringComparison.Ordinal))
            {
                return _getSession_StateQuery_Session_Metadata_SessionMetadataFromSessionMetadataEntityMapper.Map(snapshot.GetEntity<global::HandRoyal.Bot.GraphQL.State.SessionMetadataEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::HandRoyal.Bot.GraphQL.IGetSession_StateQuery_Session_Players?>? MapIGetSession_StateQuery_Session_PlayersArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var players = new global::System.Collections.Generic.List<global::HandRoyal.Bot.GraphQL.IGetSession_StateQuery_Session_Players?>();
            foreach (global::StrawberryShake.EntityId? child in list)
            {
                players.Add(MapIGetSession_StateQuery_Session_Players(child, snapshot));
            }

            return players;
        }

        private global::HandRoyal.Bot.GraphQL.IGetSession_StateQuery_Session_Players? MapIGetSession_StateQuery_Session_Players(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Player", global::System.StringComparison.Ordinal))
            {
                return _getSession_StateQuery_Session_Players_PlayerFromPlayerEntityMapper.Map(snapshot.GetEntity<global::HandRoyal.Bot.GraphQL.State.PlayerEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::HandRoyal.Bot.GraphQL.IGetSession_StateQuery_Session_Phases?>? MapIGetSession_StateQuery_Session_PhasesArray(global::System.Collections.Generic.IReadOnlyList<global::HandRoyal.Bot.GraphQL.State.PhaseData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var phases = new global::System.Collections.Generic.List<global::HandRoyal.Bot.GraphQL.IGetSession_StateQuery_Session_Phases?>();
            foreach (global::HandRoyal.Bot.GraphQL.State.PhaseData? child in list)
            {
                phases.Add(MapIGetSession_StateQuery_Session_Phases(child, snapshot));
            }

            return phases;
        }

        private global::HandRoyal.Bot.GraphQL.IGetSession_StateQuery_Session_Phases? MapIGetSession_StateQuery_Session_Phases(global::HandRoyal.Bot.GraphQL.State.PhaseData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetSession_StateQuery_Session_Phases returnValue = default !;
            if (data?.__typename.Equals("Phase", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetSession_StateQuery_Session_Phases_Phase(data.Height ?? throw new global::System.ArgumentNullException(), MapIGetSession_StateQuery_Session_Phases_MatchesArray(data.Matches, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::HandRoyal.Bot.GraphQL.IGetSession_StateQuery_Session_Phases_Matches?>? MapIGetSession_StateQuery_Session_Phases_MatchesArray(global::System.Collections.Generic.IReadOnlyList<global::HandRoyal.Bot.GraphQL.State.MatchData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var matchs = new global::System.Collections.Generic.List<global::HandRoyal.Bot.GraphQL.IGetSession_StateQuery_Session_Phases_Matches?>();
            foreach (global::HandRoyal.Bot.GraphQL.State.MatchData? child in list)
            {
                matchs.Add(MapIGetSession_StateQuery_Session_Phases_Matches(child, snapshot));
            }

            return matchs;
        }

        private global::HandRoyal.Bot.GraphQL.IGetSession_StateQuery_Session_Phases_Matches? MapIGetSession_StateQuery_Session_Phases_Matches(global::HandRoyal.Bot.GraphQL.State.MatchData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetSession_StateQuery_Session_Phases_Matches returnValue = default !;
            if (data?.__typename.Equals("Match", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetSession_StateQuery_Session_Phases_Matches_Match(data.StartHeight ?? throw new global::System.ArgumentNullException(), data.Players, data.State ?? throw new global::System.ArgumentNullException(), MapIGetSession_StateQuery_Session_Phases_Matches_RoundsArray(data.Rounds, snapshot), data.Winner ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::HandRoyal.Bot.GraphQL.IGetSession_StateQuery_Session_Phases_Matches_Rounds?>? MapIGetSession_StateQuery_Session_Phases_Matches_RoundsArray(global::System.Collections.Generic.IReadOnlyList<global::HandRoyal.Bot.GraphQL.State.RoundData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var rounds = new global::System.Collections.Generic.List<global::HandRoyal.Bot.GraphQL.IGetSession_StateQuery_Session_Phases_Matches_Rounds?>();
            foreach (global::HandRoyal.Bot.GraphQL.State.RoundData? child in list)
            {
                rounds.Add(MapIGetSession_StateQuery_Session_Phases_Matches_Rounds(child, snapshot));
            }

            return rounds;
        }

        private global::HandRoyal.Bot.GraphQL.IGetSession_StateQuery_Session_Phases_Matches_Rounds? MapIGetSession_StateQuery_Session_Phases_Matches_Rounds(global::HandRoyal.Bot.GraphQL.State.RoundData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetSession_StateQuery_Session_Phases_Matches_Rounds returnValue = default !;
            if (data?.__typename.Equals("Round", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetSession_StateQuery_Session_Phases_Matches_Rounds_Round(MapIGetSession_StateQuery_Session_Phases_Matches_Rounds_Condition1(data.Condition1, snapshot), MapIGetSession_StateQuery_Session_Phases_Matches_Rounds_Condition2(data.Condition2, snapshot), data.Winner ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::HandRoyal.Bot.GraphQL.IGetSession_StateQuery_Session_Phases_Matches_Rounds_Condition1? MapIGetSession_StateQuery_Session_Phases_Matches_Rounds_Condition1(global::HandRoyal.Bot.GraphQL.State.ConditionData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetSession_StateQuery_Session_Phases_Matches_Rounds_Condition1 returnValue = default !;
            if (data?.__typename.Equals("Condition", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetSession_StateQuery_Session_Phases_Matches_Rounds_Condition1_Condition(data.HealthPoint ?? throw new global::System.ArgumentNullException(), data.GloveUsed, data.Submission ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::HandRoyal.Bot.GraphQL.IGetSession_StateQuery_Session_Phases_Matches_Rounds_Condition2? MapIGetSession_StateQuery_Session_Phases_Matches_Rounds_Condition2(global::HandRoyal.Bot.GraphQL.State.ConditionData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetSession_StateQuery_Session_Phases_Matches_Rounds_Condition2 returnValue = default !;
            if (data?.__typename.Equals("Condition", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetSession_StateQuery_Session_Phases_Matches_Rounds_Condition2_Condition(data.HealthPoint ?? throw new global::System.ArgumentNullException(), data.GloveUsed, data.Submission ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class GetSessionResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetSessionResultInfo(global::HandRoyal.Bot.GraphQL.State.Query_StateQueryData? stateQuery, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            StateQuery = stateQuery;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::HandRoyal.Bot.GraphQL.State.Query_StateQueryData? StateQuery { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetSessionResultInfo(StateQuery, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class GetUserScopedSessionResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::HandRoyal.Bot.GraphQL.GetUserScopedSessionResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetUserScopedSessionResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::HandRoyal.Bot.GraphQL.IGetUserScopedSessionResult);

        public GetUserScopedSessionResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetUserScopedSessionResultInfo info)
            {
                return new GetUserScopedSessionResult(MapIGetUserScopedSession_StateQuery(info.StateQuery, snapshot));
            }

            throw new global::System.ArgumentException("GetUserScopedSessionResultInfo expected.");
        }

        private global::HandRoyal.Bot.GraphQL.IGetUserScopedSession_StateQuery? MapIGetUserScopedSession_StateQuery(global::HandRoyal.Bot.GraphQL.State.Query_StateQueryData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetUserScopedSession_StateQuery returnValue = default !;
            if (data?.__typename.Equals("Query_StateQuery", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetUserScopedSession_StateQuery_Query_StateQuery(MapIGetUserScopedSession_StateQuery_UserScopedSession(data.UserScopedSession, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::HandRoyal.Bot.GraphQL.IGetUserScopedSession_StateQuery_UserScopedSession? MapIGetUserScopedSession_StateQuery_UserScopedSession(global::HandRoyal.Bot.GraphQL.State.SessionEventDataData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetUserScopedSession_StateQuery_UserScopedSession returnValue = default !;
            if (data?.__typename.Equals("SessionEventData", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetUserScopedSession_StateQuery_UserScopedSession_SessionEventData(data.SessionId, data.Height ?? throw new global::System.ArgumentNullException(), data.SessionState ?? throw new global::System.ArgumentNullException(), data.OrganizerAddress, data.OpponentAddress, data.CurrentInterval ?? throw new global::System.ArgumentNullException(), data.IsPlayer ?? throw new global::System.ArgumentNullException(), data.MyGloves, data.OpponentGloves, data.PlayersLeft, data.CurrentPhaseIndex, data.CurrentUserRoundIndex, MapIGetUserScopedSession_StateQuery_UserScopedSession_MyCondition(data.MyCondition, snapshot), MapIGetUserScopedSession_StateQuery_UserScopedSession_OpponentCondition(data.OpponentCondition, snapshot), data.LastRoundWinner, data.CurrentUserMatchState, data.PlayerState, data.IntervalEndHeight ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::HandRoyal.Bot.GraphQL.IGetUserScopedSession_StateQuery_UserScopedSession_MyCondition? MapIGetUserScopedSession_StateQuery_UserScopedSession_MyCondition(global::HandRoyal.Bot.GraphQL.State.ConditionData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetUserScopedSession_StateQuery_UserScopedSession_MyCondition returnValue = default !;
            if (data?.__typename.Equals("Condition", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetUserScopedSession_StateQuery_UserScopedSession_MyCondition_Condition(data.HealthPoint ?? throw new global::System.ArgumentNullException(), data.GloveUsed, data.Submission ?? throw new global::System.ArgumentNullException(), MapIGetUserScopedSession_StateQuery_UserScopedSession_MyCondition_ActiveEffectDataArray(data.ActiveEffectData, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::HandRoyal.Bot.GraphQL.IGetUserScopedSession_StateQuery_UserScopedSession_MyCondition_ActiveEffectData?>? MapIGetUserScopedSession_StateQuery_UserScopedSession_MyCondition_ActiveEffectDataArray(global::System.Collections.Generic.IReadOnlyList<global::HandRoyal.Bot.GraphQL.State.EffectDataData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var effectDatas = new global::System.Collections.Generic.List<global::HandRoyal.Bot.GraphQL.IGetUserScopedSession_StateQuery_UserScopedSession_MyCondition_ActiveEffectData?>();
            foreach (global::HandRoyal.Bot.GraphQL.State.EffectDataData? child in list)
            {
                effectDatas.Add(MapIGetUserScopedSession_StateQuery_UserScopedSession_MyCondition_ActiveEffectData(child, snapshot));
            }

            return effectDatas;
        }

        private global::HandRoyal.Bot.GraphQL.IGetUserScopedSession_StateQuery_UserScopedSession_MyCondition_ActiveEffectData? MapIGetUserScopedSession_StateQuery_UserScopedSession_MyCondition_ActiveEffectData(global::HandRoyal.Bot.GraphQL.State.EffectDataData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetUserScopedSession_StateQuery_UserScopedSession_MyCondition_ActiveEffectData returnValue = default !;
            if (data?.__typename.Equals("EffectData", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetUserScopedSession_StateQuery_UserScopedSession_MyCondition_ActiveEffectData_EffectData(data.Type ?? throw new global::System.ArgumentNullException(), data.Duration ?? throw new global::System.ArgumentNullException(), data.Parameters);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::HandRoyal.Bot.GraphQL.IGetUserScopedSession_StateQuery_UserScopedSession_OpponentCondition? MapIGetUserScopedSession_StateQuery_UserScopedSession_OpponentCondition(global::HandRoyal.Bot.GraphQL.State.ConditionData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetUserScopedSession_StateQuery_UserScopedSession_OpponentCondition returnValue = default !;
            if (data?.__typename.Equals("Condition", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetUserScopedSession_StateQuery_UserScopedSession_OpponentCondition_Condition(data.HealthPoint ?? throw new global::System.ArgumentNullException(), data.GloveUsed, data.Submission ?? throw new global::System.ArgumentNullException(), MapIGetUserScopedSession_StateQuery_UserScopedSession_OpponentCondition_ActiveEffectDataArray(data.ActiveEffectData, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::HandRoyal.Bot.GraphQL.IGetUserScopedSession_StateQuery_UserScopedSession_OpponentCondition_ActiveEffectData?>? MapIGetUserScopedSession_StateQuery_UserScopedSession_OpponentCondition_ActiveEffectDataArray(global::System.Collections.Generic.IReadOnlyList<global::HandRoyal.Bot.GraphQL.State.EffectDataData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var effectDatas = new global::System.Collections.Generic.List<global::HandRoyal.Bot.GraphQL.IGetUserScopedSession_StateQuery_UserScopedSession_OpponentCondition_ActiveEffectData?>();
            foreach (global::HandRoyal.Bot.GraphQL.State.EffectDataData? child in list)
            {
                effectDatas.Add(MapIGetUserScopedSession_StateQuery_UserScopedSession_OpponentCondition_ActiveEffectData(child, snapshot));
            }

            return effectDatas;
        }

        private global::HandRoyal.Bot.GraphQL.IGetUserScopedSession_StateQuery_UserScopedSession_OpponentCondition_ActiveEffectData? MapIGetUserScopedSession_StateQuery_UserScopedSession_OpponentCondition_ActiveEffectData(global::HandRoyal.Bot.GraphQL.State.EffectDataData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetUserScopedSession_StateQuery_UserScopedSession_OpponentCondition_ActiveEffectData returnValue = default !;
            if (data?.__typename.Equals("EffectData", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetUserScopedSession_StateQuery_UserScopedSession_OpponentCondition_ActiveEffectData_EffectData(data.Type ?? throw new global::System.ArgumentNullException(), data.Duration ?? throw new global::System.ArgumentNullException(), data.Parameters);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class GetUserScopedSessionResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetUserScopedSessionResultInfo(global::HandRoyal.Bot.GraphQL.State.Query_StateQueryData? stateQuery, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            StateQuery = stateQuery;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::HandRoyal.Bot.GraphQL.State.Query_StateQueryData? StateQuery { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetUserScopedSessionResultInfo(StateQuery, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class GetJoinableSessionsResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::HandRoyal.Bot.GraphQL.GetJoinableSessionsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::HandRoyal.Bot.GraphQL.State.SessionMetadataEntity, GetJoinableSessions_StateQuery_Sessions_Metadata_SessionMetadata> _getJoinableSessions_StateQuery_Sessions_Metadata_SessionMetadataFromSessionMetadataEntityMapper;
        public GetJoinableSessionsResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::HandRoyal.Bot.GraphQL.State.SessionMetadataEntity, GetJoinableSessions_StateQuery_Sessions_Metadata_SessionMetadata> getJoinableSessions_StateQuery_Sessions_Metadata_SessionMetadataFromSessionMetadataEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getJoinableSessions_StateQuery_Sessions_Metadata_SessionMetadataFromSessionMetadataEntityMapper = getJoinableSessions_StateQuery_Sessions_Metadata_SessionMetadataFromSessionMetadataEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getJoinableSessions_StateQuery_Sessions_Metadata_SessionMetadataFromSessionMetadataEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::HandRoyal.Bot.GraphQL.IGetJoinableSessionsResult);

        public GetJoinableSessionsResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetJoinableSessionsResultInfo info)
            {
                return new GetJoinableSessionsResult(MapIGetJoinableSessions_StateQuery(info.StateQuery, snapshot));
            }

            throw new global::System.ArgumentException("GetJoinableSessionsResultInfo expected.");
        }

        private global::HandRoyal.Bot.GraphQL.IGetJoinableSessions_StateQuery? MapIGetJoinableSessions_StateQuery(global::HandRoyal.Bot.GraphQL.State.Query_StateQueryData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetJoinableSessions_StateQuery returnValue = default !;
            if (data?.__typename.Equals("Query_StateQuery", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetJoinableSessions_StateQuery_Query_StateQuery(MapIGetJoinableSessions_StateQuery_SessionsArray(data.Sessions, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::HandRoyal.Bot.GraphQL.IGetJoinableSessions_StateQuery_Sessions?>? MapIGetJoinableSessions_StateQuery_SessionsArray(global::System.Collections.Generic.IReadOnlyList<global::HandRoyal.Bot.GraphQL.State.SessionData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var sessions = new global::System.Collections.Generic.List<global::HandRoyal.Bot.GraphQL.IGetJoinableSessions_StateQuery_Sessions?>();
            foreach (global::HandRoyal.Bot.GraphQL.State.SessionData? child in list)
            {
                sessions.Add(MapIGetJoinableSessions_StateQuery_Sessions(child, snapshot));
            }

            return sessions;
        }

        private global::HandRoyal.Bot.GraphQL.IGetJoinableSessions_StateQuery_Sessions? MapIGetJoinableSessions_StateQuery_Sessions(global::HandRoyal.Bot.GraphQL.State.SessionData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetJoinableSessions_StateQuery_Sessions returnValue = default !;
            if (data?.__typename.Equals("Session", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetJoinableSessions_StateQuery_Sessions_Session(MapIGetJoinableSessions_StateQuery_Sessions_Metadata(data.Metadata, snapshot), data.State ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::HandRoyal.Bot.GraphQL.IGetJoinableSessions_StateQuery_Sessions_Metadata? MapIGetJoinableSessions_StateQuery_Sessions_Metadata(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("SessionMetadata", global::System.StringComparison.Ordinal))
            {
                return _getJoinableSessions_StateQuery_Sessions_Metadata_SessionMetadataFromSessionMetadataEntityMapper.Map(snapshot.GetEntity<global::HandRoyal.Bot.GraphQL.State.SessionMetadataEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class GetJoinableSessionsResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetJoinableSessionsResultInfo(global::HandRoyal.Bot.GraphQL.State.Query_StateQueryData? stateQuery, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            StateQuery = stateQuery;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::HandRoyal.Bot.GraphQL.State.Query_StateQueryData? StateQuery { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetJoinableSessionsResultInfo(StateQuery, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class StageTransactionResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::HandRoyal.Bot.GraphQL.StageTransactionResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public StageTransactionResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::HandRoyal.Bot.GraphQL.IStageTransactionResult);

        public StageTransactionResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is StageTransactionResultInfo info)
            {
                return new StageTransactionResult(info.StageTransaction);
            }

            throw new global::System.ArgumentException("StageTransactionResultInfo expected.");
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class StageTransactionResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public StageTransactionResultInfo(global::Libplanet.Types.Tx.TxId stageTransaction, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            StageTransaction = stageTransaction;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::Libplanet.Types.Tx.TxId StageTransaction { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new StageTransactionResultInfo(StageTransaction, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class OnTipChangedResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::HandRoyal.Bot.GraphQL.OnTipChangedResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public OnTipChangedResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::HandRoyal.Bot.GraphQL.IOnTipChangedResult);

        public OnTipChangedResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is OnTipChangedResultInfo info)
            {
                return new OnTipChangedResult(MapIOnTipChanged_OnTipChanged(info.OnTipChanged, snapshot));
            }

            throw new global::System.ArgumentException("OnTipChangedResultInfo expected.");
        }

        private global::HandRoyal.Bot.GraphQL.IOnTipChanged_OnTipChanged? MapIOnTipChanged_OnTipChanged(global::HandRoyal.Bot.GraphQL.State.TipEventDataData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IOnTipChanged_OnTipChanged returnValue = default !;
            if (data?.__typename.Equals("TipEventData", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new OnTipChanged_OnTipChanged_TipEventData(data.Height ?? throw new global::System.ArgumentNullException(), data.Hash ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class OnTipChangedResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public OnTipChangedResultInfo(global::HandRoyal.Bot.GraphQL.State.TipEventDataData? onTipChanged, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            OnTipChanged = onTipChanged;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::HandRoyal.Bot.GraphQL.State.TipEventDataData? OnTipChanged { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new OnTipChangedResultInfo(OnTipChanged, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class OnSessionChangedResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::HandRoyal.Bot.GraphQL.OnSessionChangedResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public OnSessionChangedResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::HandRoyal.Bot.GraphQL.IOnSessionChangedResult);

        public OnSessionChangedResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is OnSessionChangedResultInfo info)
            {
                return new OnSessionChangedResult(MapIOnSessionChanged_OnSessionChanged(info.OnSessionChanged, snapshot));
            }

            throw new global::System.ArgumentException("OnSessionChangedResultInfo expected.");
        }

        private global::HandRoyal.Bot.GraphQL.IOnSessionChanged_OnSessionChanged? MapIOnSessionChanged_OnSessionChanged(global::HandRoyal.Bot.GraphQL.State.SessionEventDataData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IOnSessionChanged_OnSessionChanged returnValue = default !;
            if (data?.__typename.Equals("SessionEventData", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new OnSessionChanged_OnSessionChanged_SessionEventData(data.SessionState ?? throw new global::System.ArgumentNullException(), data.SessionId);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class OnSessionChangedResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public OnSessionChangedResultInfo(global::HandRoyal.Bot.GraphQL.State.SessionEventDataData? onSessionChanged, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            OnSessionChanged = onSessionChanged;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::HandRoyal.Bot.GraphQL.State.SessionEventDataData? OnSessionChanged { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new OnSessionChangedResultInfo(OnSessionChanged, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class CreateUserBuilder : global::StrawberryShake.OperationResultBuilder<global::HandRoyal.Bot.GraphQL.ICreateUserResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _hexParser;
        public CreateUserBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::HandRoyal.Bot.GraphQL.ICreateUserResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _hexParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("Hex") ?? throw new global::System.ArgumentException("No serializer for type `Hex` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::HandRoyal.Bot.GraphQL.ICreateUserResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            return new CreateUserResultInfo(Deserialize_ICreateUser_ActionQuery(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "actionQuery")), entityIds, snapshot.Version);
        }

        private global::HandRoyal.Bot.GraphQL.State.Query_ActionQueryData? Deserialize_ICreateUser_ActionQuery(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Query_ActionQuery", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::HandRoyal.Bot.GraphQL.State.Query_ActionQueryData(typename, createUser: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "createUser")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? Deserialize_String(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            return _hexParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class CreateSessionBuilder : global::StrawberryShake.OperationResultBuilder<global::HandRoyal.Bot.GraphQL.ICreateSessionResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::Libplanet.Crypto.Address> _addressParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int64, global::System.Int64> _longParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _hexParser;
        public CreateSessionBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::HandRoyal.Bot.GraphQL.ICreateSessionResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _addressParser = serializerResolver.GetLeafValueParser<global::System.String, global::Libplanet.Crypto.Address>("Address") ?? throw new global::System.ArgumentException("No serializer for type `Address` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _longParser = serializerResolver.GetLeafValueParser<global::System.Int64, global::System.Int64>("Long") ?? throw new global::System.ArgumentException("No serializer for type `Long` found.");
            _hexParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("Hex") ?? throw new global::System.ArgumentException("No serializer for type `Hex` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::HandRoyal.Bot.GraphQL.ICreateSessionResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            return new CreateSessionResultInfo(Deserialize_ICreateSession_ActionQuery(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "actionQuery")), entityIds, snapshot.Version);
        }

        private global::HandRoyal.Bot.GraphQL.State.Query_ActionQueryData? Deserialize_ICreateSession_ActionQuery(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Query_ActionQuery", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::HandRoyal.Bot.GraphQL.State.Query_ActionQueryData(typename, createSession: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "createSession")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? Deserialize_String(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            return _hexParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class JoinSessionBuilder : global::StrawberryShake.OperationResultBuilder<global::HandRoyal.Bot.GraphQL.IJoinSessionResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::Libplanet.Crypto.Address> _addressParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _hexParser;
        public JoinSessionBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::HandRoyal.Bot.GraphQL.IJoinSessionResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _addressParser = serializerResolver.GetLeafValueParser<global::System.String, global::Libplanet.Crypto.Address>("Address") ?? throw new global::System.ArgumentException("No serializer for type `Address` found.");
            _hexParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("Hex") ?? throw new global::System.ArgumentException("No serializer for type `Hex` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::HandRoyal.Bot.GraphQL.IJoinSessionResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            return new JoinSessionResultInfo(Deserialize_IJoinSession_ActionQuery(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "actionQuery")), entityIds, snapshot.Version);
        }

        private global::HandRoyal.Bot.GraphQL.State.Query_ActionQueryData? Deserialize_IJoinSession_ActionQuery(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Query_ActionQuery", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::HandRoyal.Bot.GraphQL.State.Query_ActionQueryData(typename, joinSession: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "joinSession")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? Deserialize_String(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            return _hexParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class SubmitMoveBuilder : global::StrawberryShake.OperationResultBuilder<global::HandRoyal.Bot.GraphQL.ISubmitMoveResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::Libplanet.Crypto.Address> _addressParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _hexParser;
        public SubmitMoveBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::HandRoyal.Bot.GraphQL.ISubmitMoveResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _addressParser = serializerResolver.GetLeafValueParser<global::System.String, global::Libplanet.Crypto.Address>("Address") ?? throw new global::System.ArgumentException("No serializer for type `Address` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _hexParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("Hex") ?? throw new global::System.ArgumentException("No serializer for type `Hex` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::HandRoyal.Bot.GraphQL.ISubmitMoveResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            return new SubmitMoveResultInfo(Deserialize_ISubmitMove_ActionQuery(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "actionQuery")), entityIds, snapshot.Version);
        }

        private global::HandRoyal.Bot.GraphQL.State.Query_ActionQueryData? Deserialize_ISubmitMove_ActionQuery(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Query_ActionQuery", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::HandRoyal.Bot.GraphQL.State.Query_ActionQueryData(typename, submitMove: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "submitMove")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? Deserialize_String(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            return _hexParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class PickUpBuilder : global::StrawberryShake.OperationResultBuilder<global::HandRoyal.Bot.GraphQL.IPickUpResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _hexParser;
        public PickUpBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::HandRoyal.Bot.GraphQL.IPickUpResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _hexParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("Hex") ?? throw new global::System.ArgumentException("No serializer for type `Hex` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::HandRoyal.Bot.GraphQL.IPickUpResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            return new PickUpResultInfo(Deserialize_IPickUp_ActionQuery(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "actionQuery")), entityIds, snapshot.Version);
        }

        private global::HandRoyal.Bot.GraphQL.State.Query_ActionQueryData? Deserialize_IPickUp_ActionQuery(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Query_ActionQuery", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::HandRoyal.Bot.GraphQL.State.Query_ActionQueryData(typename, pickUp: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "pickUp")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? Deserialize_String(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            return _hexParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class PickUpManyBuilder : global::StrawberryShake.OperationResultBuilder<global::HandRoyal.Bot.GraphQL.IPickUpManyResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _hexParser;
        public PickUpManyBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::HandRoyal.Bot.GraphQL.IPickUpManyResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _hexParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("Hex") ?? throw new global::System.ArgumentException("No serializer for type `Hex` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::HandRoyal.Bot.GraphQL.IPickUpManyResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            return new PickUpManyResultInfo(Deserialize_IPickUpMany_ActionQuery(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "actionQuery")), entityIds, snapshot.Version);
        }

        private global::HandRoyal.Bot.GraphQL.State.Query_ActionQueryData? Deserialize_IPickUpMany_ActionQuery(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Query_ActionQuery", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::HandRoyal.Bot.GraphQL.State.Query_ActionQueryData(typename, pickUpMany: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "pickUpMany")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? Deserialize_String(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            return _hexParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class RegisterMatchingBuilder : global::StrawberryShake.OperationResultBuilder<global::HandRoyal.Bot.GraphQL.IRegisterMatchingResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::Libplanet.Crypto.Address> _addressParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _hexParser;
        public RegisterMatchingBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::HandRoyal.Bot.GraphQL.IRegisterMatchingResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _addressParser = serializerResolver.GetLeafValueParser<global::System.String, global::Libplanet.Crypto.Address>("Address") ?? throw new global::System.ArgumentException("No serializer for type `Address` found.");
            _hexParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("Hex") ?? throw new global::System.ArgumentException("No serializer for type `Hex` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::HandRoyal.Bot.GraphQL.IRegisterMatchingResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            return new RegisterMatchingResultInfo(Deserialize_IRegisterMatching_ActionQuery(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "actionQuery")), entityIds, snapshot.Version);
        }

        private global::HandRoyal.Bot.GraphQL.State.Query_ActionQueryData? Deserialize_IRegisterMatching_ActionQuery(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Query_ActionQuery", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::HandRoyal.Bot.GraphQL.State.Query_ActionQueryData(typename, registerMatching: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "registerMatching")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? Deserialize_String(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            return _hexParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class CancelMatchingBuilder : global::StrawberryShake.OperationResultBuilder<global::HandRoyal.Bot.GraphQL.ICancelMatchingResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _hexParser;
        public CancelMatchingBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::HandRoyal.Bot.GraphQL.ICancelMatchingResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _hexParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("Hex") ?? throw new global::System.ArgumentException("No serializer for type `Hex` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::HandRoyal.Bot.GraphQL.ICancelMatchingResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            return new CancelMatchingResultInfo(Deserialize_ICancelMatching_ActionQuery(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "actionQuery")), entityIds, snapshot.Version);
        }

        private global::HandRoyal.Bot.GraphQL.State.Query_ActionQueryData? Deserialize_ICancelMatching_ActionQuery(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Query_ActionQuery", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::HandRoyal.Bot.GraphQL.State.Query_ActionQueryData(typename, cancelMatching: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "cancelMatching")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? Deserialize_String(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            return _hexParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class GetUserDataBuilder : global::StrawberryShake.OperationResultBuilder<global::HandRoyal.Bot.GraphQL.IGetUserDataResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::Libplanet.Crypto.Address> _addressParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int64, global::System.Int64> _longParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        public GetUserDataBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::HandRoyal.Bot.GraphQL.IGetUserDataResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _addressParser = serializerResolver.GetLeafValueParser<global::System.String, global::Libplanet.Crypto.Address>("Address") ?? throw new global::System.ArgumentException("No serializer for type `Address` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _longParser = serializerResolver.GetLeafValueParser<global::System.Int64, global::System.Int64>("Long") ?? throw new global::System.ArgumentException("No serializer for type `Long` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::HandRoyal.Bot.GraphQL.IGetUserDataResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::HandRoyal.Bot.GraphQL.State.Query_StateQueryData? stateQueryId = default !;
            _entityStore.Update(session =>
            {
                stateQueryId = Deserialize_IGetUserData_StateQuery(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "stateQuery"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            return new GetUserDataResultInfo(stateQueryId, entityIds, snapshot.Version);
        }

        private global::HandRoyal.Bot.GraphQL.State.Query_StateQueryData? Deserialize_IGetUserData_StateQuery(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Query_StateQuery", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::HandRoyal.Bot.GraphQL.State.Query_StateQueryData(typename, getUserData: Update_IGetUserData_StateQuery_GetUserDataEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "getUserData"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? Update_IGetUserData_StateQuery_GetUserDataEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("UserData", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::HandRoyal.Bot.GraphQL.State.UserDataEntity? entity))
                {
                    session.SetEntity(entityId, new global::HandRoyal.Bot.GraphQL.State.UserDataEntity(Deserialize_NonNullableAddress(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), Deserialize_AddressNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "registeredGloves")), Deserialize_NonNullableAddress(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "equippedGlove")), Deserialize_NonNullableAddress(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "sessionId")), Deserialize_NonNullableInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "balance")), Update_IGetUserData_StateQuery_GetUserData_OwnedGlovesEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "ownedGloves"), entityIds)));
                }
                else
                {
                    session.SetEntity(entityId, new global::HandRoyal.Bot.GraphQL.State.UserDataEntity(Deserialize_NonNullableAddress(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), Deserialize_AddressNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "registeredGloves")), Deserialize_NonNullableAddress(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "equippedGlove")), Deserialize_NonNullableAddress(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "sessionId")), Deserialize_NonNullableInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "balance")), Update_IGetUserData_StateQuery_GetUserData_OwnedGlovesEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "ownedGloves"), entityIds)));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::Libplanet.Crypto.Address Deserialize_NonNullableAddress(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _addressParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String? Deserialize_String(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Libplanet.Crypto.Address>? Deserialize_AddressNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var addresss = new global::System.Collections.Generic.List<global::Libplanet.Crypto.Address>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                addresss.Add(Deserialize_NonNullableAddress(child));
            }

            return addresss;
        }

        private global::System.Int64 Deserialize_NonNullableInt64(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _longParser.Parse(obj.Value.GetInt64()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? Update_IGetUserData_StateQuery_GetUserData_OwnedGlovesEntityArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var gloveInfos = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                gloveInfos.Add(Update_IGetUserData_StateQuery_GetUserData_OwnedGlovesEntity(session, child, entityIds));
            }

            return gloveInfos;
        }

        private global::StrawberryShake.EntityId? Update_IGetUserData_StateQuery_GetUserData_OwnedGlovesEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("GloveInfo", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::HandRoyal.Bot.GraphQL.State.GloveInfoEntity? entity))
                {
                    session.SetEntity(entityId, new global::HandRoyal.Bot.GraphQL.State.GloveInfoEntity(Deserialize_NonNullableAddress(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "count"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::HandRoyal.Bot.GraphQL.State.GloveInfoEntity(Deserialize_NonNullableAddress(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "count"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 Deserialize_NonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class TransactionResultBuilder : global::StrawberryShake.OperationResultBuilder<global::HandRoyal.Bot.GraphQL.ITransactionResultResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::HandRoyal.Bot.GraphQL.TxStatus> _txStatusParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::Libplanet.Types.Tx.TxId> _txIdParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int64, global::System.Int64> _longParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public TransactionResultBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::HandRoyal.Bot.GraphQL.ITransactionResultResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _txStatusParser = serializerResolver.GetLeafValueParser<global::System.String, global::HandRoyal.Bot.GraphQL.TxStatus>("TxStatus") ?? throw new global::System.ArgumentException("No serializer for type `TxStatus` found.");
            _txIdParser = serializerResolver.GetLeafValueParser<global::System.String, global::Libplanet.Types.Tx.TxId>("TxId") ?? throw new global::System.ArgumentException("No serializer for type `TxId` found.");
            _longParser = serializerResolver.GetLeafValueParser<global::System.Int64, global::System.Int64>("Long") ?? throw new global::System.ArgumentException("No serializer for type `Long` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::HandRoyal.Bot.GraphQL.ITransactionResultResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            return new TransactionResultResultInfo(Deserialize_ITransactionResult_Transaction(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "transaction")), entityIds, snapshot.Version);
        }

        private global::HandRoyal.Bot.GraphQL.State.Query_TransactionData? Deserialize_ITransactionResult_Transaction(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Query_Transaction", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::HandRoyal.Bot.GraphQL.State.Query_TransactionData(typename, transactionResult: Deserialize_ITransactionResult_Transaction_TransactionResult(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "transactionResult")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::HandRoyal.Bot.GraphQL.State.TxResultValueData? Deserialize_ITransactionResult_Transaction_TransactionResult(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("TxResultValue", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::HandRoyal.Bot.GraphQL.State.TxResultValueData(typename, txStatus: Deserialize_NonNullableTxStatus(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "txStatus")), blockIndex: Deserialize_Int64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "blockIndex")), exceptionNames: Deserialize_StringArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "exceptionNames")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::HandRoyal.Bot.GraphQL.TxStatus Deserialize_NonNullableTxStatus(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _txStatusParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Int64? Deserialize_Int64(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            return _longParser.Parse(obj.Value.GetInt64()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::System.String?>? Deserialize_StringArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var @strings = new global::System.Collections.Generic.List<global::System.String?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                @strings.Add(Deserialize_String(child));
            }

            return @strings;
        }

        private global::System.String? Deserialize_String(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class UnsignedTransactionBuilder : global::StrawberryShake.OperationResultBuilder<global::HandRoyal.Bot.GraphQL.IUnsignedTransactionResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::Libplanet.Crypto.Address> _addressParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _hexParser;
        public UnsignedTransactionBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::HandRoyal.Bot.GraphQL.IUnsignedTransactionResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _addressParser = serializerResolver.GetLeafValueParser<global::System.String, global::Libplanet.Crypto.Address>("Address") ?? throw new global::System.ArgumentException("No serializer for type `Address` found.");
            _hexParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("Hex") ?? throw new global::System.ArgumentException("No serializer for type `Hex` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::HandRoyal.Bot.GraphQL.IUnsignedTransactionResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            return new UnsignedTransactionResultInfo(Deserialize_IUnsignedTransaction_Transaction(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "transaction")), entityIds, snapshot.Version);
        }

        private global::HandRoyal.Bot.GraphQL.State.Query_TransactionData? Deserialize_IUnsignedTransaction_Transaction(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Query_Transaction", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::HandRoyal.Bot.GraphQL.State.Query_TransactionData(typename, unsignedTransaction: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "unsignedTransaction")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? Deserialize_String(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            return _hexParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class GetSessionBuilder : global::StrawberryShake.OperationResultBuilder<global::HandRoyal.Bot.GraphQL.IGetSessionResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::HandRoyal.Bot.GraphQL.SessionState> _sessionStateParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::HandRoyal.Bot.GraphQL.PlayerState> _playerStateParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::HandRoyal.Bot.GraphQL.MatchState> _matchStateParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::Libplanet.Crypto.Address> _addressParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int64, global::System.Int64> _longParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        public GetSessionBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::HandRoyal.Bot.GraphQL.IGetSessionResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _sessionStateParser = serializerResolver.GetLeafValueParser<global::System.String, global::HandRoyal.Bot.GraphQL.SessionState>("SessionState") ?? throw new global::System.ArgumentException("No serializer for type `SessionState` found.");
            _playerStateParser = serializerResolver.GetLeafValueParser<global::System.String, global::HandRoyal.Bot.GraphQL.PlayerState>("PlayerState") ?? throw new global::System.ArgumentException("No serializer for type `PlayerState` found.");
            _matchStateParser = serializerResolver.GetLeafValueParser<global::System.String, global::HandRoyal.Bot.GraphQL.MatchState>("MatchState") ?? throw new global::System.ArgumentException("No serializer for type `MatchState` found.");
            _addressParser = serializerResolver.GetLeafValueParser<global::System.String, global::Libplanet.Crypto.Address>("Address") ?? throw new global::System.ArgumentException("No serializer for type `Address` found.");
            _longParser = serializerResolver.GetLeafValueParser<global::System.Int64, global::System.Int64>("Long") ?? throw new global::System.ArgumentException("No serializer for type `Long` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::HandRoyal.Bot.GraphQL.IGetSessionResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::HandRoyal.Bot.GraphQL.State.Query_StateQueryData? stateQueryId = default !;
            _entityStore.Update(session =>
            {
                stateQueryId = Deserialize_IGetSession_StateQuery(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "stateQuery"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            return new GetSessionResultInfo(stateQueryId, entityIds, snapshot.Version);
        }

        private global::HandRoyal.Bot.GraphQL.State.Query_StateQueryData? Deserialize_IGetSession_StateQuery(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Query_StateQuery", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::HandRoyal.Bot.GraphQL.State.Query_StateQueryData(typename, session: Deserialize_IGetSession_StateQuery_Session(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "session"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::HandRoyal.Bot.GraphQL.State.SessionData? Deserialize_IGetSession_StateQuery_Session(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Session", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::HandRoyal.Bot.GraphQL.State.SessionData(typename, metadata: Update_IGetSession_StateQuery_Session_MetadataEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "metadata"), entityIds), state: Deserialize_NonNullableSessionState(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "state")), players: Update_IGetSession_StateQuery_Session_PlayersEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "players"), entityIds), phases: Deserialize_IGetSession_StateQuery_Session_PhasesArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "phases")), creationHeight: Deserialize_NonNullableInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "creationHeight")), startHeight: Deserialize_NonNullableInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "startHeight")), height: Deserialize_NonNullableInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "height")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? Update_IGetSession_StateQuery_Session_MetadataEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("SessionMetadata", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::HandRoyal.Bot.GraphQL.State.SessionMetadataEntity? entity))
                {
                    session.SetEntity(entityId, new global::HandRoyal.Bot.GraphQL.State.SessionMetadataEntity(Deserialize_NonNullableAddress(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), Deserialize_NonNullableAddress(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "organizer")), Deserialize_NonNullableAddress(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "prize")), Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "maximumUser")), Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "minimumUser")), Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "remainingUser")), Deserialize_NonNullableInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "startAfter")), Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "maxRounds")), Deserialize_NonNullableInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "roundLength")), Deserialize_NonNullableInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "roundInterval")), Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "initialHealthPoint")), Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "numberOfGloves")), Deserialize_AddressNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "users"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::HandRoyal.Bot.GraphQL.State.SessionMetadataEntity(Deserialize_NonNullableAddress(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), Deserialize_NonNullableAddress(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "organizer")), Deserialize_NonNullableAddress(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "prize")), Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "maximumUser")), Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "minimumUser")), Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "remainingUser")), Deserialize_NonNullableInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "startAfter")), Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "maxRounds")), Deserialize_NonNullableInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "roundLength")), Deserialize_NonNullableInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "roundInterval")), Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "initialHealthPoint")), Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "numberOfGloves")), Deserialize_AddressNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "users"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::Libplanet.Crypto.Address Deserialize_NonNullableAddress(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _addressParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Int32 Deserialize_NonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.Int64 Deserialize_NonNullableInt64(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _longParser.Parse(obj.Value.GetInt64()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Libplanet.Crypto.Address>? Deserialize_AddressNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var addresss = new global::System.Collections.Generic.List<global::Libplanet.Crypto.Address>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                addresss.Add(Deserialize_NonNullableAddress(child));
            }

            return addresss;
        }

        private global::HandRoyal.Bot.GraphQL.SessionState Deserialize_NonNullableSessionState(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _sessionStateParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? Update_IGetSession_StateQuery_Session_PlayersEntityArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var players = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                players.Add(Update_IGetSession_StateQuery_Session_PlayersEntity(session, child, entityIds));
            }

            return players;
        }

        private global::StrawberryShake.EntityId? Update_IGetSession_StateQuery_Session_PlayersEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Player", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::HandRoyal.Bot.GraphQL.State.PlayerEntity? entity))
                {
                    session.SetEntity(entityId, new global::HandRoyal.Bot.GraphQL.State.PlayerEntity(Deserialize_NonNullableAddress(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), Deserialize_AddressNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "gloves")), Deserialize_NonNullablePlayerState(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "state"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::HandRoyal.Bot.GraphQL.State.PlayerEntity(Deserialize_NonNullableAddress(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), Deserialize_AddressNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "gloves")), Deserialize_NonNullablePlayerState(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "state"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::HandRoyal.Bot.GraphQL.PlayerState Deserialize_NonNullablePlayerState(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _playerStateParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::HandRoyal.Bot.GraphQL.State.PhaseData?>? Deserialize_IGetSession_StateQuery_Session_PhasesArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var phases = new global::System.Collections.Generic.List<global::HandRoyal.Bot.GraphQL.State.PhaseData?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                phases.Add(Deserialize_IGetSession_StateQuery_Session_Phases(child));
            }

            return phases;
        }

        private global::HandRoyal.Bot.GraphQL.State.PhaseData? Deserialize_IGetSession_StateQuery_Session_Phases(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Phase", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::HandRoyal.Bot.GraphQL.State.PhaseData(typename, height: Deserialize_NonNullableInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "height")), matches: Deserialize_IGetSession_StateQuery_Session_Phases_MatchesArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "matches")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::HandRoyal.Bot.GraphQL.State.MatchData?>? Deserialize_IGetSession_StateQuery_Session_Phases_MatchesArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var matchs = new global::System.Collections.Generic.List<global::HandRoyal.Bot.GraphQL.State.MatchData?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                matchs.Add(Deserialize_IGetSession_StateQuery_Session_Phases_Matches(child));
            }

            return matchs;
        }

        private global::HandRoyal.Bot.GraphQL.State.MatchData? Deserialize_IGetSession_StateQuery_Session_Phases_Matches(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Match", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::HandRoyal.Bot.GraphQL.State.MatchData(typename, startHeight: Deserialize_NonNullableInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "startHeight")), players: Deserialize_Int32NonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "players")), state: Deserialize_NonNullableMatchState(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "state")), rounds: Deserialize_IGetSession_StateQuery_Session_Phases_Matches_RoundsArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "rounds")), winner: Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "winner")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::System.Int32>? Deserialize_Int32NonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var @ints = new global::System.Collections.Generic.List<global::System.Int32>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                @ints.Add(Deserialize_NonNullableInt32(child));
            }

            return @ints;
        }

        private global::HandRoyal.Bot.GraphQL.MatchState Deserialize_NonNullableMatchState(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _matchStateParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::HandRoyal.Bot.GraphQL.State.RoundData?>? Deserialize_IGetSession_StateQuery_Session_Phases_Matches_RoundsArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var rounds = new global::System.Collections.Generic.List<global::HandRoyal.Bot.GraphQL.State.RoundData?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                rounds.Add(Deserialize_IGetSession_StateQuery_Session_Phases_Matches_Rounds(child));
            }

            return rounds;
        }

        private global::HandRoyal.Bot.GraphQL.State.RoundData? Deserialize_IGetSession_StateQuery_Session_Phases_Matches_Rounds(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Round", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::HandRoyal.Bot.GraphQL.State.RoundData(typename, condition1: Deserialize_IGetSession_StateQuery_Session_Phases_Matches_Rounds_Condition1(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "condition1")), condition2: Deserialize_IGetSession_StateQuery_Session_Phases_Matches_Rounds_Condition2(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "condition2")), winner: Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "winner")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::HandRoyal.Bot.GraphQL.State.ConditionData? Deserialize_IGetSession_StateQuery_Session_Phases_Matches_Rounds_Condition1(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Condition", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::HandRoyal.Bot.GraphQL.State.ConditionData(typename, healthPoint: Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "healthPoint")), gloveUsed: Deserialize_BooleanNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "gloveUsed")), submission: Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "submission")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::System.Boolean>? Deserialize_BooleanNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var booleans = new global::System.Collections.Generic.List<global::System.Boolean>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                booleans.Add(Deserialize_NonNullableBoolean(child));
            }

            return booleans;
        }

        private global::System.Boolean Deserialize_NonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }

        private global::HandRoyal.Bot.GraphQL.State.ConditionData? Deserialize_IGetSession_StateQuery_Session_Phases_Matches_Rounds_Condition2(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Condition", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::HandRoyal.Bot.GraphQL.State.ConditionData(typename, healthPoint: Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "healthPoint")), gloveUsed: Deserialize_BooleanNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "gloveUsed")), submission: Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "submission")));
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class GetUserScopedSessionBuilder : global::StrawberryShake.OperationResultBuilder<global::HandRoyal.Bot.GraphQL.IGetUserScopedSessionResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::HandRoyal.Bot.GraphQL.SessionState> _sessionStateParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::HandRoyal.Bot.GraphQL.EffectType> _effectTypeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::HandRoyal.Bot.GraphQL.MatchState> _matchStateParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::HandRoyal.Bot.GraphQL.PlayerState> _playerStateParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::Libplanet.Crypto.Address> _addressParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int64, global::System.Int64> _longParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public GetUserScopedSessionBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::HandRoyal.Bot.GraphQL.IGetUserScopedSessionResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _sessionStateParser = serializerResolver.GetLeafValueParser<global::System.String, global::HandRoyal.Bot.GraphQL.SessionState>("SessionState") ?? throw new global::System.ArgumentException("No serializer for type `SessionState` found.");
            _effectTypeParser = serializerResolver.GetLeafValueParser<global::System.String, global::HandRoyal.Bot.GraphQL.EffectType>("EffectType") ?? throw new global::System.ArgumentException("No serializer for type `EffectType` found.");
            _matchStateParser = serializerResolver.GetLeafValueParser<global::System.String, global::HandRoyal.Bot.GraphQL.MatchState>("MatchState") ?? throw new global::System.ArgumentException("No serializer for type `MatchState` found.");
            _playerStateParser = serializerResolver.GetLeafValueParser<global::System.String, global::HandRoyal.Bot.GraphQL.PlayerState>("PlayerState") ?? throw new global::System.ArgumentException("No serializer for type `PlayerState` found.");
            _addressParser = serializerResolver.GetLeafValueParser<global::System.String, global::Libplanet.Crypto.Address>("Address") ?? throw new global::System.ArgumentException("No serializer for type `Address` found.");
            _longParser = serializerResolver.GetLeafValueParser<global::System.Int64, global::System.Int64>("Long") ?? throw new global::System.ArgumentException("No serializer for type `Long` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::HandRoyal.Bot.GraphQL.IGetUserScopedSessionResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            return new GetUserScopedSessionResultInfo(Deserialize_IGetUserScopedSession_StateQuery(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "stateQuery")), entityIds, snapshot.Version);
        }

        private global::HandRoyal.Bot.GraphQL.State.Query_StateQueryData? Deserialize_IGetUserScopedSession_StateQuery(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Query_StateQuery", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::HandRoyal.Bot.GraphQL.State.Query_StateQueryData(typename, userScopedSession: Deserialize_IGetUserScopedSession_StateQuery_UserScopedSession(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "userScopedSession")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::HandRoyal.Bot.GraphQL.State.SessionEventDataData? Deserialize_IGetUserScopedSession_StateQuery_UserScopedSession(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("SessionEventData", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::HandRoyal.Bot.GraphQL.State.SessionEventDataData(typename, sessionId: Deserialize_Address(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "sessionId")), height: Deserialize_NonNullableInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "height")), sessionState: Deserialize_NonNullableSessionState(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "sessionState")), organizerAddress: Deserialize_Address(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "organizerAddress")), opponentAddress: Deserialize_Address(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "opponentAddress")), currentInterval: Deserialize_NonNullableInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "currentInterval")), isPlayer: Deserialize_NonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "isPlayer")), myGloves: Deserialize_AddressNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "myGloves")), opponentGloves: Deserialize_AddressNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "opponentGloves")), playersLeft: Deserialize_Int32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "playersLeft")), currentPhaseIndex: Deserialize_Int32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "currentPhaseIndex")), currentUserRoundIndex: Deserialize_Int32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "currentUserRoundIndex")), myCondition: Deserialize_IGetUserScopedSession_StateQuery_UserScopedSession_MyCondition(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "myCondition")), opponentCondition: Deserialize_IGetUserScopedSession_StateQuery_UserScopedSession_OpponentCondition(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "opponentCondition")), lastRoundWinner: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "lastRoundWinner")), currentUserMatchState: Deserialize_MatchState(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "currentUserMatchState")), playerState: Deserialize_PlayerState(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "playerState")), intervalEndHeight: Deserialize_NonNullableInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "intervalEndHeight")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::Libplanet.Crypto.Address? Deserialize_Address(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            return _addressParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Int64 Deserialize_NonNullableInt64(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _longParser.Parse(obj.Value.GetInt64()!);
        }

        private global::HandRoyal.Bot.GraphQL.SessionState Deserialize_NonNullableSessionState(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _sessionStateParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Boolean Deserialize_NonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Libplanet.Crypto.Address>? Deserialize_AddressNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var addresss = new global::System.Collections.Generic.List<global::Libplanet.Crypto.Address>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                addresss.Add(Deserialize_NonNullableAddress(child));
            }

            return addresss;
        }

        private global::Libplanet.Crypto.Address Deserialize_NonNullableAddress(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _addressParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Int32? Deserialize_Int32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::HandRoyal.Bot.GraphQL.State.ConditionData? Deserialize_IGetUserScopedSession_StateQuery_UserScopedSession_MyCondition(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Condition", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::HandRoyal.Bot.GraphQL.State.ConditionData(typename, healthPoint: Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "healthPoint")), gloveUsed: Deserialize_BooleanNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "gloveUsed")), submission: Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "submission")), activeEffectData: Deserialize_IGetUserScopedSession_StateQuery_UserScopedSession_MyCondition_ActiveEffectDataArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "activeEffectData")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 Deserialize_NonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::System.Boolean>? Deserialize_BooleanNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var booleans = new global::System.Collections.Generic.List<global::System.Boolean>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                booleans.Add(Deserialize_NonNullableBoolean(child));
            }

            return booleans;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::HandRoyal.Bot.GraphQL.State.EffectDataData?>? Deserialize_IGetUserScopedSession_StateQuery_UserScopedSession_MyCondition_ActiveEffectDataArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var effectDatas = new global::System.Collections.Generic.List<global::HandRoyal.Bot.GraphQL.State.EffectDataData?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                effectDatas.Add(Deserialize_IGetUserScopedSession_StateQuery_UserScopedSession_MyCondition_ActiveEffectData(child));
            }

            return effectDatas;
        }

        private global::HandRoyal.Bot.GraphQL.State.EffectDataData? Deserialize_IGetUserScopedSession_StateQuery_UserScopedSession_MyCondition_ActiveEffectData(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("EffectData", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::HandRoyal.Bot.GraphQL.State.EffectDataData(typename, type: Deserialize_NonNullableEffectType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), duration: Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "duration")), parameters: Deserialize_Int32NonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "parameters")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::HandRoyal.Bot.GraphQL.EffectType Deserialize_NonNullableEffectType(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _effectTypeParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::System.Int32>? Deserialize_Int32NonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var @ints = new global::System.Collections.Generic.List<global::System.Int32>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                @ints.Add(Deserialize_NonNullableInt32(child));
            }

            return @ints;
        }

        private global::HandRoyal.Bot.GraphQL.State.ConditionData? Deserialize_IGetUserScopedSession_StateQuery_UserScopedSession_OpponentCondition(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Condition", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::HandRoyal.Bot.GraphQL.State.ConditionData(typename, healthPoint: Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "healthPoint")), gloveUsed: Deserialize_BooleanNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "gloveUsed")), submission: Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "submission")), activeEffectData: Deserialize_IGetUserScopedSession_StateQuery_UserScopedSession_OpponentCondition_ActiveEffectDataArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "activeEffectData")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::HandRoyal.Bot.GraphQL.State.EffectDataData?>? Deserialize_IGetUserScopedSession_StateQuery_UserScopedSession_OpponentCondition_ActiveEffectDataArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var effectDatas = new global::System.Collections.Generic.List<global::HandRoyal.Bot.GraphQL.State.EffectDataData?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                effectDatas.Add(Deserialize_IGetUserScopedSession_StateQuery_UserScopedSession_OpponentCondition_ActiveEffectData(child));
            }

            return effectDatas;
        }

        private global::HandRoyal.Bot.GraphQL.State.EffectDataData? Deserialize_IGetUserScopedSession_StateQuery_UserScopedSession_OpponentCondition_ActiveEffectData(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("EffectData", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::HandRoyal.Bot.GraphQL.State.EffectDataData(typename, type: Deserialize_NonNullableEffectType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), duration: Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "duration")), parameters: Deserialize_Int32NonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "parameters")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? Deserialize_String(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::HandRoyal.Bot.GraphQL.MatchState? Deserialize_MatchState(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            return _matchStateParser.Parse(obj.Value.GetString()!);
        }

        private global::HandRoyal.Bot.GraphQL.PlayerState? Deserialize_PlayerState(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            return _playerStateParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class GetJoinableSessionsBuilder : global::StrawberryShake.OperationResultBuilder<global::HandRoyal.Bot.GraphQL.IGetJoinableSessionsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::HandRoyal.Bot.GraphQL.SessionState> _sessionStateParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::Libplanet.Crypto.Address> _addressParser;
        public GetJoinableSessionsBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::HandRoyal.Bot.GraphQL.IGetJoinableSessionsResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _sessionStateParser = serializerResolver.GetLeafValueParser<global::System.String, global::HandRoyal.Bot.GraphQL.SessionState>("SessionState") ?? throw new global::System.ArgumentException("No serializer for type `SessionState` found.");
            _addressParser = serializerResolver.GetLeafValueParser<global::System.String, global::Libplanet.Crypto.Address>("Address") ?? throw new global::System.ArgumentException("No serializer for type `Address` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::HandRoyal.Bot.GraphQL.IGetJoinableSessionsResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::HandRoyal.Bot.GraphQL.State.Query_StateQueryData? stateQueryId = default !;
            _entityStore.Update(session =>
            {
                stateQueryId = Deserialize_IGetJoinableSessions_StateQuery(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "stateQuery"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            return new GetJoinableSessionsResultInfo(stateQueryId, entityIds, snapshot.Version);
        }

        private global::HandRoyal.Bot.GraphQL.State.Query_StateQueryData? Deserialize_IGetJoinableSessions_StateQuery(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Query_StateQuery", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::HandRoyal.Bot.GraphQL.State.Query_StateQueryData(typename, sessions: Deserialize_IGetJoinableSessions_StateQuery_SessionsArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "sessions"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::HandRoyal.Bot.GraphQL.State.SessionData?>? Deserialize_IGetJoinableSessions_StateQuery_SessionsArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var sessions = new global::System.Collections.Generic.List<global::HandRoyal.Bot.GraphQL.State.SessionData?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                sessions.Add(Deserialize_IGetJoinableSessions_StateQuery_Sessions(session, child, entityIds));
            }

            return sessions;
        }

        private global::HandRoyal.Bot.GraphQL.State.SessionData? Deserialize_IGetJoinableSessions_StateQuery_Sessions(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Session", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::HandRoyal.Bot.GraphQL.State.SessionData(typename, metadata: Update_IGetJoinableSessions_StateQuery_Sessions_MetadataEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "metadata"), entityIds), state: Deserialize_NonNullableSessionState(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "state")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? Update_IGetJoinableSessions_StateQuery_Sessions_MetadataEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("SessionMetadata", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::HandRoyal.Bot.GraphQL.State.SessionMetadataEntity? entity))
                {
                    session.SetEntity(entityId, new global::HandRoyal.Bot.GraphQL.State.SessionMetadataEntity(Deserialize_NonNullableAddress(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), entity.Organizer, entity.Prize, entity.MaximumUser, entity.MinimumUser, entity.RemainingUser, entity.StartAfter, entity.MaxRounds, entity.RoundLength, entity.RoundInterval, entity.InitialHealthPoint, entity.NumberOfGloves, entity.Users));
                }
                else
                {
                    session.SetEntity(entityId, new global::HandRoyal.Bot.GraphQL.State.SessionMetadataEntity(Deserialize_NonNullableAddress(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), default !, default !, default !, default !, default !, default !, default !, default !, default !, default !, default !, default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::Libplanet.Crypto.Address Deserialize_NonNullableAddress(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _addressParser.Parse(obj.Value.GetString()!);
        }

        private global::HandRoyal.Bot.GraphQL.SessionState Deserialize_NonNullableSessionState(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _sessionStateParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class StageTransactionBuilder : global::StrawberryShake.OperationResultBuilder<global::HandRoyal.Bot.GraphQL.IStageTransactionResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _hexParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::Libplanet.Types.Tx.TxId> _txIdParser;
        public StageTransactionBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::HandRoyal.Bot.GraphQL.IStageTransactionResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _hexParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("Hex") ?? throw new global::System.ArgumentException("No serializer for type `Hex` found.");
            _txIdParser = serializerResolver.GetLeafValueParser<global::System.String, global::Libplanet.Types.Tx.TxId>("TxId") ?? throw new global::System.ArgumentException("No serializer for type `TxId` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::HandRoyal.Bot.GraphQL.IStageTransactionResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            return new StageTransactionResultInfo(Deserialize_NonNullableTxId(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "stageTransaction")), entityIds, snapshot.Version);
        }

        private global::Libplanet.Types.Tx.TxId Deserialize_NonNullableTxId(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _txIdParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class OnTipChangedBuilder : global::StrawberryShake.OperationResultBuilder<global::HandRoyal.Bot.GraphQL.IOnTipChangedResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int64, global::System.Int64> _longParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _blockHashParser;
        public OnTipChangedBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::HandRoyal.Bot.GraphQL.IOnTipChangedResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _longParser = serializerResolver.GetLeafValueParser<global::System.Int64, global::System.Int64>("Long") ?? throw new global::System.ArgumentException("No serializer for type `Long` found.");
            _blockHashParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("BlockHash") ?? throw new global::System.ArgumentException("No serializer for type `BlockHash` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::HandRoyal.Bot.GraphQL.IOnTipChangedResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            return new OnTipChangedResultInfo(Deserialize_IOnTipChanged_OnTipChanged(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "onTipChanged")), entityIds, snapshot.Version);
        }

        private global::HandRoyal.Bot.GraphQL.State.TipEventDataData? Deserialize_IOnTipChanged_OnTipChanged(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("TipEventData", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::HandRoyal.Bot.GraphQL.State.TipEventDataData(typename, height: Deserialize_NonNullableInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "height")), hash: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hash")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int64 Deserialize_NonNullableInt64(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _longParser.Parse(obj.Value.GetInt64()!);
        }

        private global::System.String Deserialize_NonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _blockHashParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class OnSessionChangedBuilder : global::StrawberryShake.OperationResultBuilder<global::HandRoyal.Bot.GraphQL.IOnSessionChangedResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::HandRoyal.Bot.GraphQL.SessionState> _sessionStateParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::Libplanet.Crypto.Address> _addressParser;
        public OnSessionChangedBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::HandRoyal.Bot.GraphQL.IOnSessionChangedResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _sessionStateParser = serializerResolver.GetLeafValueParser<global::System.String, global::HandRoyal.Bot.GraphQL.SessionState>("SessionState") ?? throw new global::System.ArgumentException("No serializer for type `SessionState` found.");
            _addressParser = serializerResolver.GetLeafValueParser<global::System.String, global::Libplanet.Crypto.Address>("Address") ?? throw new global::System.ArgumentException("No serializer for type `Address` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::HandRoyal.Bot.GraphQL.IOnSessionChangedResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            return new OnSessionChangedResultInfo(Deserialize_IOnSessionChanged_OnSessionChanged(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "onSessionChanged")), entityIds, snapshot.Version);
        }

        private global::HandRoyal.Bot.GraphQL.State.SessionEventDataData? Deserialize_IOnSessionChanged_OnSessionChanged(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("SessionEventData", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::HandRoyal.Bot.GraphQL.State.SessionEventDataData(typename, sessionState: Deserialize_NonNullableSessionState(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "sessionState")), sessionId: Deserialize_Address(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "sessionId")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::HandRoyal.Bot.GraphQL.SessionState Deserialize_NonNullableSessionState(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _sessionStateParser.Parse(obj.Value.GetString()!);
        }

        private global::Libplanet.Crypto.Address? Deserialize_Address(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            return _addressParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class Query_ActionQueryData
    {
        public Query_ActionQueryData(global::System.String __typename, global::System.String? createUser = default !, global::System.String? createSession = default !, global::System.String? joinSession = default !, global::System.String? submitMove = default !, global::System.String? pickUp = default !, global::System.String? pickUpMany = default !, global::System.String? registerMatching = default !, global::System.String? cancelMatching = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            CreateUser = createUser;
            CreateSession = createSession;
            JoinSession = joinSession;
            SubmitMove = submitMove;
            PickUp = pickUp;
            PickUpMany = pickUpMany;
            RegisterMatching = registerMatching;
            CancelMatching = cancelMatching;
        }

        public global::System.String __typename { get; }
        public global::System.String? CreateUser { get; }
        public global::System.String? CreateSession { get; }
        public global::System.String? JoinSession { get; }
        public global::System.String? SubmitMove { get; }
        public global::System.String? PickUp { get; }
        public global::System.String? PickUpMany { get; }
        public global::System.String? RegisterMatching { get; }
        public global::System.String? CancelMatching { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class Query_StateQueryData
    {
        public Query_StateQueryData(global::System.String __typename, global::StrawberryShake.EntityId? getUserData = default !, global::HandRoyal.Bot.GraphQL.State.SessionData? session = default !, global::HandRoyal.Bot.GraphQL.State.SessionEventDataData? userScopedSession = default !, global::System.Collections.Generic.IReadOnlyList<global::HandRoyal.Bot.GraphQL.State.SessionData?>? sessions = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            GetUserData = getUserData;
            Session = session;
            UserScopedSession = userScopedSession;
            Sessions = sessions;
        }

        public global::System.String __typename { get; }
        public global::StrawberryShake.EntityId? GetUserData { get; }
        public global::HandRoyal.Bot.GraphQL.State.SessionData? Session { get; }
        public global::HandRoyal.Bot.GraphQL.State.SessionEventDataData? UserScopedSession { get; }
        public global::System.Collections.Generic.IReadOnlyList<global::HandRoyal.Bot.GraphQL.State.SessionData?>? Sessions { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class Query_TransactionData
    {
        public Query_TransactionData(global::System.String __typename, global::HandRoyal.Bot.GraphQL.State.TxResultValueData? transactionResult = default !, global::System.String? unsignedTransaction = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            TransactionResult = transactionResult;
            UnsignedTransaction = unsignedTransaction;
        }

        public global::System.String __typename { get; }
        public global::HandRoyal.Bot.GraphQL.State.TxResultValueData? TransactionResult { get; }
        public global::System.String? UnsignedTransaction { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class TxResultValueData
    {
        public TxResultValueData(global::System.String __typename, global::HandRoyal.Bot.GraphQL.TxStatus? txStatus = default !, global::System.Int64? blockIndex = default !, global::System.Collections.Generic.IReadOnlyList<global::System.String?>? exceptionNames = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            TxStatus = txStatus;
            BlockIndex = blockIndex;
            ExceptionNames = exceptionNames;
        }

        public global::System.String __typename { get; }
        public global::HandRoyal.Bot.GraphQL.TxStatus? TxStatus { get; }
        public global::System.Int64? BlockIndex { get; }
        public global::System.Collections.Generic.IReadOnlyList<global::System.String?>? ExceptionNames { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class SessionData
    {
        public SessionData(global::System.String __typename, global::StrawberryShake.EntityId? metadata = default !, global::HandRoyal.Bot.GraphQL.SessionState? state = default !, global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? players = default !, global::System.Collections.Generic.IReadOnlyList<global::HandRoyal.Bot.GraphQL.State.PhaseData?>? phases = default !, global::System.Int64? creationHeight = default !, global::System.Int64? startHeight = default !, global::System.Int64? height = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Metadata = metadata;
            State = state;
            Players = players;
            Phases = phases;
            CreationHeight = creationHeight;
            StartHeight = startHeight;
            Height = height;
        }

        public global::System.String __typename { get; }
        public global::StrawberryShake.EntityId? Metadata { get; }
        public global::HandRoyal.Bot.GraphQL.SessionState? State { get; }
        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? Players { get; }
        public global::System.Collections.Generic.IReadOnlyList<global::HandRoyal.Bot.GraphQL.State.PhaseData?>? Phases { get; }
        public global::System.Int64? CreationHeight { get; }
        public global::System.Int64? StartHeight { get; }
        public global::System.Int64? Height { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class PhaseData
    {
        public PhaseData(global::System.String __typename, global::System.Int64? height = default !, global::System.Collections.Generic.IReadOnlyList<global::HandRoyal.Bot.GraphQL.State.MatchData?>? matches = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Height = height;
            Matches = matches;
        }

        public global::System.String __typename { get; }
        public global::System.Int64? Height { get; }
        public global::System.Collections.Generic.IReadOnlyList<global::HandRoyal.Bot.GraphQL.State.MatchData?>? Matches { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class MatchData
    {
        public MatchData(global::System.String __typename, global::System.Int64? startHeight = default !, global::System.Collections.Generic.IReadOnlyList<global::System.Int32>? players = default !, global::HandRoyal.Bot.GraphQL.MatchState? state = default !, global::System.Collections.Generic.IReadOnlyList<global::HandRoyal.Bot.GraphQL.State.RoundData?>? rounds = default !, global::System.Int32? winner = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            StartHeight = startHeight;
            Players = players;
            State = state;
            Rounds = rounds;
            Winner = winner;
        }

        public global::System.String __typename { get; }
        public global::System.Int64? StartHeight { get; }
        public global::System.Collections.Generic.IReadOnlyList<global::System.Int32>? Players { get; }
        public global::HandRoyal.Bot.GraphQL.MatchState? State { get; }
        public global::System.Collections.Generic.IReadOnlyList<global::HandRoyal.Bot.GraphQL.State.RoundData?>? Rounds { get; }
        public global::System.Int32? Winner { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class RoundData
    {
        public RoundData(global::System.String __typename, global::HandRoyal.Bot.GraphQL.State.ConditionData? condition1 = default !, global::HandRoyal.Bot.GraphQL.State.ConditionData? condition2 = default !, global::System.Int32? winner = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Condition1 = condition1;
            Condition2 = condition2;
            Winner = winner;
        }

        public global::System.String __typename { get; }
        public global::HandRoyal.Bot.GraphQL.State.ConditionData? Condition1 { get; }
        public global::HandRoyal.Bot.GraphQL.State.ConditionData? Condition2 { get; }
        public global::System.Int32? Winner { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class ConditionData
    {
        public ConditionData(global::System.String __typename, global::System.Int32? healthPoint = default !, global::System.Collections.Generic.IReadOnlyList<global::System.Boolean>? gloveUsed = default !, global::System.Int32? submission = default !, global::System.Collections.Generic.IReadOnlyList<global::HandRoyal.Bot.GraphQL.State.EffectDataData?>? activeEffectData = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            HealthPoint = healthPoint;
            GloveUsed = gloveUsed;
            Submission = submission;
            ActiveEffectData = activeEffectData;
        }

        public global::System.String __typename { get; }
        public global::System.Int32? HealthPoint { get; }
        public global::System.Collections.Generic.IReadOnlyList<global::System.Boolean>? GloveUsed { get; }
        public global::System.Int32? Submission { get; }
        public global::System.Collections.Generic.IReadOnlyList<global::HandRoyal.Bot.GraphQL.State.EffectDataData?>? ActiveEffectData { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class SessionEventDataData
    {
        public SessionEventDataData(global::System.String __typename, global::Libplanet.Crypto.Address? sessionId = default !, global::System.Int64? height = default !, global::HandRoyal.Bot.GraphQL.SessionState? sessionState = default !, global::Libplanet.Crypto.Address? organizerAddress = default !, global::Libplanet.Crypto.Address? opponentAddress = default !, global::System.Int64? currentInterval = default !, global::System.Boolean? isPlayer = default !, global::System.Collections.Generic.IReadOnlyList<global::Libplanet.Crypto.Address>? myGloves = default !, global::System.Collections.Generic.IReadOnlyList<global::Libplanet.Crypto.Address>? opponentGloves = default !, global::System.Int32? playersLeft = default !, global::System.Int32? currentPhaseIndex = default !, global::System.Int32? currentUserRoundIndex = default !, global::HandRoyal.Bot.GraphQL.State.ConditionData? myCondition = default !, global::HandRoyal.Bot.GraphQL.State.ConditionData? opponentCondition = default !, global::System.String? lastRoundWinner = default !, global::HandRoyal.Bot.GraphQL.MatchState? currentUserMatchState = default !, global::HandRoyal.Bot.GraphQL.PlayerState? playerState = default !, global::System.Int64? intervalEndHeight = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            SessionId = sessionId;
            Height = height;
            SessionState = sessionState;
            OrganizerAddress = organizerAddress;
            OpponentAddress = opponentAddress;
            CurrentInterval = currentInterval;
            IsPlayer = isPlayer;
            MyGloves = myGloves;
            OpponentGloves = opponentGloves;
            PlayersLeft = playersLeft;
            CurrentPhaseIndex = currentPhaseIndex;
            CurrentUserRoundIndex = currentUserRoundIndex;
            MyCondition = myCondition;
            OpponentCondition = opponentCondition;
            LastRoundWinner = lastRoundWinner;
            CurrentUserMatchState = currentUserMatchState;
            PlayerState = playerState;
            IntervalEndHeight = intervalEndHeight;
        }

        public global::System.String __typename { get; }
        public global::Libplanet.Crypto.Address? SessionId { get; }
        public global::System.Int64? Height { get; }
        public global::HandRoyal.Bot.GraphQL.SessionState? SessionState { get; }
        public global::Libplanet.Crypto.Address? OrganizerAddress { get; }
        public global::Libplanet.Crypto.Address? OpponentAddress { get; }
        public global::System.Int64? CurrentInterval { get; }
        public global::System.Boolean? IsPlayer { get; }
        public global::System.Collections.Generic.IReadOnlyList<global::Libplanet.Crypto.Address>? MyGloves { get; }
        public global::System.Collections.Generic.IReadOnlyList<global::Libplanet.Crypto.Address>? OpponentGloves { get; }
        public global::System.Int32? PlayersLeft { get; }
        public global::System.Int32? CurrentPhaseIndex { get; }
        public global::System.Int32? CurrentUserRoundIndex { get; }
        public global::HandRoyal.Bot.GraphQL.State.ConditionData? MyCondition { get; }
        public global::HandRoyal.Bot.GraphQL.State.ConditionData? OpponentCondition { get; }
        public global::System.String? LastRoundWinner { get; }
        public global::HandRoyal.Bot.GraphQL.MatchState? CurrentUserMatchState { get; }
        public global::HandRoyal.Bot.GraphQL.PlayerState? PlayerState { get; }
        public global::System.Int64? IntervalEndHeight { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class EffectDataData
    {
        public EffectDataData(global::System.String __typename, global::HandRoyal.Bot.GraphQL.EffectType? type = default !, global::System.Int32? duration = default !, global::System.Collections.Generic.IReadOnlyList<global::System.Int32>? parameters = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Type = type;
            Duration = duration;
            Parameters = parameters;
        }

        public global::System.String __typename { get; }
        public global::HandRoyal.Bot.GraphQL.EffectType? Type { get; }
        public global::System.Int32? Duration { get; }
        public global::System.Collections.Generic.IReadOnlyList<global::System.Int32>? Parameters { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class TipEventDataData
    {
        public TipEventDataData(global::System.String __typename, global::System.Int64? height = default !, global::System.String? hash = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Height = height;
            Hash = hash;
        }

        public global::System.String __typename { get; }
        public global::System.Int64? Height { get; }
        public global::System.String? Hash { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class GetUserData_StateQuery_GetUserData_UserDataFromUserDataEntityMapper : global::StrawberryShake.IEntityMapper<global::HandRoyal.Bot.GraphQL.State.UserDataEntity, GetUserData_StateQuery_GetUserData_UserData>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::HandRoyal.Bot.GraphQL.State.GloveInfoEntity, GetUserData_StateQuery_GetUserData_OwnedGloves_GloveInfo> _getUserData_StateQuery_GetUserData_OwnedGloves_GloveInfoFromGloveInfoEntityMapper;
        public GetUserData_StateQuery_GetUserData_UserDataFromUserDataEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::HandRoyal.Bot.GraphQL.State.GloveInfoEntity, GetUserData_StateQuery_GetUserData_OwnedGloves_GloveInfo> getUserData_StateQuery_GetUserData_OwnedGloves_GloveInfoFromGloveInfoEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getUserData_StateQuery_GetUserData_OwnedGloves_GloveInfoFromGloveInfoEntityMapper = getUserData_StateQuery_GetUserData_OwnedGloves_GloveInfoFromGloveInfoEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getUserData_StateQuery_GetUserData_OwnedGloves_GloveInfoFromGloveInfoEntityMapper));
        }

        public GetUserData_StateQuery_GetUserData_UserData Map(global::HandRoyal.Bot.GraphQL.State.UserDataEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetUserData_StateQuery_GetUserData_UserData(entity.Id, entity.Name, entity.RegisteredGloves, entity.EquippedGlove, entity.SessionId, entity.Balance, MapIGetUserData_StateQuery_GetUserData_OwnedGlovesArray(entity.OwnedGloves, snapshot));
        }

        private global::System.Collections.Generic.IReadOnlyList<global::HandRoyal.Bot.GraphQL.IGetUserData_StateQuery_GetUserData_OwnedGloves?>? MapIGetUserData_StateQuery_GetUserData_OwnedGlovesArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var gloveInfos = new global::System.Collections.Generic.List<global::HandRoyal.Bot.GraphQL.IGetUserData_StateQuery_GetUserData_OwnedGloves?>();
            foreach (global::StrawberryShake.EntityId? child in list)
            {
                gloveInfos.Add(MapIGetUserData_StateQuery_GetUserData_OwnedGloves(child, snapshot));
            }

            return gloveInfos;
        }

        private global::HandRoyal.Bot.GraphQL.IGetUserData_StateQuery_GetUserData_OwnedGloves? MapIGetUserData_StateQuery_GetUserData_OwnedGloves(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("GloveInfo", global::System.StringComparison.Ordinal))
            {
                return _getUserData_StateQuery_GetUserData_OwnedGloves_GloveInfoFromGloveInfoEntityMapper.Map(snapshot.GetEntity<global::HandRoyal.Bot.GraphQL.State.GloveInfoEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class GetUserData_StateQuery_GetUserData_OwnedGloves_GloveInfoFromGloveInfoEntityMapper : global::StrawberryShake.IEntityMapper<global::HandRoyal.Bot.GraphQL.State.GloveInfoEntity, GetUserData_StateQuery_GetUserData_OwnedGloves_GloveInfo>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetUserData_StateQuery_GetUserData_OwnedGloves_GloveInfoFromGloveInfoEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetUserData_StateQuery_GetUserData_OwnedGloves_GloveInfo Map(global::HandRoyal.Bot.GraphQL.State.GloveInfoEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetUserData_StateQuery_GetUserData_OwnedGloves_GloveInfo(entity.Id, entity.Count);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class GetSession_StateQuery_Session_Metadata_SessionMetadataFromSessionMetadataEntityMapper : global::StrawberryShake.IEntityMapper<global::HandRoyal.Bot.GraphQL.State.SessionMetadataEntity, GetSession_StateQuery_Session_Metadata_SessionMetadata>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetSession_StateQuery_Session_Metadata_SessionMetadataFromSessionMetadataEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetSession_StateQuery_Session_Metadata_SessionMetadata Map(global::HandRoyal.Bot.GraphQL.State.SessionMetadataEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetSession_StateQuery_Session_Metadata_SessionMetadata(entity.Id, entity.Organizer, entity.Prize, entity.MaximumUser, entity.MinimumUser, entity.RemainingUser, entity.StartAfter, entity.MaxRounds, entity.RoundLength, entity.RoundInterval, entity.InitialHealthPoint, entity.NumberOfGloves, entity.Users);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class GetSession_StateQuery_Session_Players_PlayerFromPlayerEntityMapper : global::StrawberryShake.IEntityMapper<global::HandRoyal.Bot.GraphQL.State.PlayerEntity, GetSession_StateQuery_Session_Players_Player>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetSession_StateQuery_Session_Players_PlayerFromPlayerEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetSession_StateQuery_Session_Players_Player Map(global::HandRoyal.Bot.GraphQL.State.PlayerEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetSession_StateQuery_Session_Players_Player(entity.Id, entity.Gloves, entity.State);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class GetJoinableSessions_StateQuery_Sessions_Metadata_SessionMetadataFromSessionMetadataEntityMapper : global::StrawberryShake.IEntityMapper<global::HandRoyal.Bot.GraphQL.State.SessionMetadataEntity, GetJoinableSessions_StateQuery_Sessions_Metadata_SessionMetadata>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetJoinableSessions_StateQuery_Sessions_Metadata_SessionMetadataFromSessionMetadataEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetJoinableSessions_StateQuery_Sessions_Metadata_SessionMetadata Map(global::HandRoyal.Bot.GraphQL.State.SessionMetadataEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetJoinableSessions_StateQuery_Sessions_Metadata_SessionMetadata(entity.Id);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class GraphQLClientEntityIdFactory : global::StrawberryShake.IEntityIdSerializer
    {
        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()
        {
            Indented = false
        };
        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)
        {
            global::System.String __typename = obj.GetProperty("__typename").GetString()!;
            return __typename switch
            {
                "UserData" => ParseUserDataEntityId(obj, __typename),
                "GloveInfo" => ParseGloveInfoEntityId(obj, __typename),
                "SessionMetadata" => ParseSessionMetadataEntityId(obj, __typename),
                "Player" => ParsePlayerEntityId(obj, __typename),
                _ => throw new global::System.NotSupportedException()};
        }

        public global::System.String Format(global::StrawberryShake.EntityId entityId)
        {
            return entityId.Name switch
            {
                "UserData" => FormatUserDataEntityId(entityId),
                "GloveInfo" => FormatGloveInfoEntityId(entityId),
                "SessionMetadata" => FormatSessionMetadataEntityId(entityId),
                "Player" => FormatPlayerEntityId(entityId),
                _ => throw new global::System.NotSupportedException()};
        }

        private global::StrawberryShake.EntityId ParseUserDataEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatUserDataEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseGloveInfoEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatGloveInfoEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseSessionMetadataEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatSessionMetadataEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParsePlayerEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatPlayerEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class GraphQLClientStoreAccessor : global::StrawberryShake.StoreAccessor
    {
        public GraphQLClientStoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories) : base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)
        {
        }
    }
}

namespace Microsoft.Extensions.DependencyInjection
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public static partial class GraphQLClientServiceCollectionExtensions
    {
        public static global::StrawberryShake.IClientBuilder<global::HandRoyal.Bot.GraphQL.State.GraphQLClientStoreAccessor> AddGraphQLClient(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>
            {
                ConfigureClient(sp, serviceCollection, strategy);
                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::HandRoyal.Bot.GraphQL.State.GraphQLClientStoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::HandRoyal.Bot.GraphQL.CreateUserQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::HandRoyal.Bot.GraphQL.CreateSessionQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::HandRoyal.Bot.GraphQL.JoinSessionQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::HandRoyal.Bot.GraphQL.SubmitMoveQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::HandRoyal.Bot.GraphQL.PickUpQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::HandRoyal.Bot.GraphQL.PickUpManyQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::HandRoyal.Bot.GraphQL.RegisterMatchingQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::HandRoyal.Bot.GraphQL.CancelMatchingQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::HandRoyal.Bot.GraphQL.GetUserDataQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::HandRoyal.Bot.GraphQL.TransactionResultQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::HandRoyal.Bot.GraphQL.UnsignedTransactionQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::HandRoyal.Bot.GraphQL.GetSessionQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::HandRoyal.Bot.GraphQL.GetUserScopedSessionQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::HandRoyal.Bot.GraphQL.GetJoinableSessionsQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::HandRoyal.Bot.GraphQL.StageTransactionMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::HandRoyal.Bot.GraphQL.OnTipChangedSubscription>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::HandRoyal.Bot.GraphQL.OnSessionChangedSubscription>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::HandRoyal.Bot.GraphQL.GraphQLClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::HandRoyal.Bot.GraphQL.IGraphQLClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            return new global::StrawberryShake.ClientBuilder<global::HandRoyal.Bot.GraphQL.State.GraphQLClientStoreAccessor>("GraphQLClient", services, serviceCollection);
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClient(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.WebSockets.IWebSocketConnection>(services, sp =>
            {
                var sessionPool = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.WebSockets.ISessionPool>(parentServices);
                return new global::StrawberryShake.Transport.WebSockets.WebSocketConnection(async ct => await sessionPool.CreateAsync("GraphQLClient", ct));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>
            {
                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("GraphQLClient"));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::HandRoyal.Bot.GraphQL.State.UserDataEntity, global::HandRoyal.Bot.GraphQL.GetUserData_StateQuery_GetUserData_UserData>, global::HandRoyal.Bot.GraphQL.State.GetUserData_StateQuery_GetUserData_UserDataFromUserDataEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::HandRoyal.Bot.GraphQL.State.GloveInfoEntity, global::HandRoyal.Bot.GraphQL.GetUserData_StateQuery_GetUserData_OwnedGloves_GloveInfo>, global::HandRoyal.Bot.GraphQL.State.GetUserData_StateQuery_GetUserData_OwnedGloves_GloveInfoFromGloveInfoEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::HandRoyal.Bot.GraphQL.State.SessionMetadataEntity, global::HandRoyal.Bot.GraphQL.GetSession_StateQuery_Session_Metadata_SessionMetadata>, global::HandRoyal.Bot.GraphQL.State.GetSession_StateQuery_Session_Metadata_SessionMetadataFromSessionMetadataEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::HandRoyal.Bot.GraphQL.State.PlayerEntity, global::HandRoyal.Bot.GraphQL.GetSession_StateQuery_Session_Players_Player>, global::HandRoyal.Bot.GraphQL.State.GetSession_StateQuery_Session_Players_PlayerFromPlayerEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::HandRoyal.Bot.GraphQL.State.SessionMetadataEntity, global::HandRoyal.Bot.GraphQL.GetJoinableSessions_StateQuery_Sessions_Metadata_SessionMetadata>, global::HandRoyal.Bot.GraphQL.State.GetJoinableSessions_StateQuery_Sessions_Metadata_SessionMetadataFromSessionMetadataEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::HandRoyal.Bot.GraphQL.TxStatusSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::HandRoyal.Bot.GraphQL.SessionStateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::HandRoyal.Bot.GraphQL.PlayerStateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::HandRoyal.Bot.GraphQL.MatchStateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::HandRoyal.Bot.GraphQL.EffectTypeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UUIDSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LocalDateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LocalDateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LocalTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.JsonSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("Hex"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("BlockHash"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::HandRoyal.Bot.GraphQL.ICreateUserResult>, global::HandRoyal.Bot.GraphQL.State.CreateUserResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::HandRoyal.Bot.GraphQL.ICreateUserResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::HandRoyal.Bot.GraphQL.ICreateUserQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::HandRoyal.Bot.GraphQL.ICreateUserResult>, global::HandRoyal.Bot.GraphQL.State.CreateUserBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::HandRoyal.Bot.GraphQL.ICreateUserResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::HandRoyal.Bot.GraphQL.ICreateUserResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::HandRoyal.Bot.GraphQL.ICreateUserResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::HandRoyal.Bot.GraphQL.CreateUserQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::HandRoyal.Bot.GraphQL.ICreateUserQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::HandRoyal.Bot.GraphQL.CreateUserQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::HandRoyal.Bot.GraphQL.ICreateSessionResult>, global::HandRoyal.Bot.GraphQL.State.CreateSessionResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::HandRoyal.Bot.GraphQL.ICreateSessionResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::HandRoyal.Bot.GraphQL.ICreateSessionQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::HandRoyal.Bot.GraphQL.ICreateSessionResult>, global::HandRoyal.Bot.GraphQL.State.CreateSessionBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::HandRoyal.Bot.GraphQL.ICreateSessionResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::HandRoyal.Bot.GraphQL.ICreateSessionResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::HandRoyal.Bot.GraphQL.ICreateSessionResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::HandRoyal.Bot.GraphQL.CreateSessionQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::HandRoyal.Bot.GraphQL.ICreateSessionQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::HandRoyal.Bot.GraphQL.CreateSessionQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::HandRoyal.Bot.GraphQL.IJoinSessionResult>, global::HandRoyal.Bot.GraphQL.State.JoinSessionResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::HandRoyal.Bot.GraphQL.IJoinSessionResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::HandRoyal.Bot.GraphQL.IJoinSessionQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::HandRoyal.Bot.GraphQL.IJoinSessionResult>, global::HandRoyal.Bot.GraphQL.State.JoinSessionBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::HandRoyal.Bot.GraphQL.IJoinSessionResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::HandRoyal.Bot.GraphQL.IJoinSessionResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::HandRoyal.Bot.GraphQL.IJoinSessionResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::HandRoyal.Bot.GraphQL.JoinSessionQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::HandRoyal.Bot.GraphQL.IJoinSessionQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::HandRoyal.Bot.GraphQL.JoinSessionQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::HandRoyal.Bot.GraphQL.ISubmitMoveResult>, global::HandRoyal.Bot.GraphQL.State.SubmitMoveResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::HandRoyal.Bot.GraphQL.ISubmitMoveResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::HandRoyal.Bot.GraphQL.ISubmitMoveQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::HandRoyal.Bot.GraphQL.ISubmitMoveResult>, global::HandRoyal.Bot.GraphQL.State.SubmitMoveBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::HandRoyal.Bot.GraphQL.ISubmitMoveResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::HandRoyal.Bot.GraphQL.ISubmitMoveResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::HandRoyal.Bot.GraphQL.ISubmitMoveResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::HandRoyal.Bot.GraphQL.SubmitMoveQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::HandRoyal.Bot.GraphQL.ISubmitMoveQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::HandRoyal.Bot.GraphQL.SubmitMoveQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::HandRoyal.Bot.GraphQL.IPickUpResult>, global::HandRoyal.Bot.GraphQL.State.PickUpResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::HandRoyal.Bot.GraphQL.IPickUpResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::HandRoyal.Bot.GraphQL.IPickUpQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::HandRoyal.Bot.GraphQL.IPickUpResult>, global::HandRoyal.Bot.GraphQL.State.PickUpBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::HandRoyal.Bot.GraphQL.IPickUpResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::HandRoyal.Bot.GraphQL.IPickUpResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::HandRoyal.Bot.GraphQL.IPickUpResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::HandRoyal.Bot.GraphQL.PickUpQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::HandRoyal.Bot.GraphQL.IPickUpQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::HandRoyal.Bot.GraphQL.PickUpQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::HandRoyal.Bot.GraphQL.IPickUpManyResult>, global::HandRoyal.Bot.GraphQL.State.PickUpManyResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::HandRoyal.Bot.GraphQL.IPickUpManyResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::HandRoyal.Bot.GraphQL.IPickUpManyQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::HandRoyal.Bot.GraphQL.IPickUpManyResult>, global::HandRoyal.Bot.GraphQL.State.PickUpManyBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::HandRoyal.Bot.GraphQL.IPickUpManyResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::HandRoyal.Bot.GraphQL.IPickUpManyResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::HandRoyal.Bot.GraphQL.IPickUpManyResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::HandRoyal.Bot.GraphQL.PickUpManyQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::HandRoyal.Bot.GraphQL.IPickUpManyQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::HandRoyal.Bot.GraphQL.PickUpManyQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::HandRoyal.Bot.GraphQL.IRegisterMatchingResult>, global::HandRoyal.Bot.GraphQL.State.RegisterMatchingResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::HandRoyal.Bot.GraphQL.IRegisterMatchingResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::HandRoyal.Bot.GraphQL.IRegisterMatchingQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::HandRoyal.Bot.GraphQL.IRegisterMatchingResult>, global::HandRoyal.Bot.GraphQL.State.RegisterMatchingBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::HandRoyal.Bot.GraphQL.IRegisterMatchingResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::HandRoyal.Bot.GraphQL.IRegisterMatchingResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::HandRoyal.Bot.GraphQL.IRegisterMatchingResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::HandRoyal.Bot.GraphQL.RegisterMatchingQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::HandRoyal.Bot.GraphQL.IRegisterMatchingQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::HandRoyal.Bot.GraphQL.RegisterMatchingQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::HandRoyal.Bot.GraphQL.ICancelMatchingResult>, global::HandRoyal.Bot.GraphQL.State.CancelMatchingResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::HandRoyal.Bot.GraphQL.ICancelMatchingResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::HandRoyal.Bot.GraphQL.ICancelMatchingQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::HandRoyal.Bot.GraphQL.ICancelMatchingResult>, global::HandRoyal.Bot.GraphQL.State.CancelMatchingBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::HandRoyal.Bot.GraphQL.ICancelMatchingResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::HandRoyal.Bot.GraphQL.ICancelMatchingResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::HandRoyal.Bot.GraphQL.ICancelMatchingResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::HandRoyal.Bot.GraphQL.CancelMatchingQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::HandRoyal.Bot.GraphQL.ICancelMatchingQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::HandRoyal.Bot.GraphQL.CancelMatchingQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::HandRoyal.Bot.GraphQL.IGetUserDataResult>, global::HandRoyal.Bot.GraphQL.State.GetUserDataResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::HandRoyal.Bot.GraphQL.IGetUserDataResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::HandRoyal.Bot.GraphQL.IGetUserDataQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::HandRoyal.Bot.GraphQL.IGetUserDataResult>, global::HandRoyal.Bot.GraphQL.State.GetUserDataBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::HandRoyal.Bot.GraphQL.IGetUserDataResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::HandRoyal.Bot.GraphQL.IGetUserDataResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::HandRoyal.Bot.GraphQL.IGetUserDataResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::HandRoyal.Bot.GraphQL.GetUserDataQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::HandRoyal.Bot.GraphQL.IGetUserDataQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::HandRoyal.Bot.GraphQL.GetUserDataQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::HandRoyal.Bot.GraphQL.ITransactionResultResult>, global::HandRoyal.Bot.GraphQL.State.TransactionResultResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::HandRoyal.Bot.GraphQL.ITransactionResultResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::HandRoyal.Bot.GraphQL.ITransactionResultQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::HandRoyal.Bot.GraphQL.ITransactionResultResult>, global::HandRoyal.Bot.GraphQL.State.TransactionResultBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::HandRoyal.Bot.GraphQL.ITransactionResultResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::HandRoyal.Bot.GraphQL.ITransactionResultResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::HandRoyal.Bot.GraphQL.ITransactionResultResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::HandRoyal.Bot.GraphQL.TransactionResultQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::HandRoyal.Bot.GraphQL.ITransactionResultQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::HandRoyal.Bot.GraphQL.TransactionResultQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::HandRoyal.Bot.GraphQL.IUnsignedTransactionResult>, global::HandRoyal.Bot.GraphQL.State.UnsignedTransactionResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::HandRoyal.Bot.GraphQL.IUnsignedTransactionResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::HandRoyal.Bot.GraphQL.IUnsignedTransactionQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::HandRoyal.Bot.GraphQL.IUnsignedTransactionResult>, global::HandRoyal.Bot.GraphQL.State.UnsignedTransactionBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::HandRoyal.Bot.GraphQL.IUnsignedTransactionResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::HandRoyal.Bot.GraphQL.IUnsignedTransactionResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::HandRoyal.Bot.GraphQL.IUnsignedTransactionResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::HandRoyal.Bot.GraphQL.UnsignedTransactionQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::HandRoyal.Bot.GraphQL.IUnsignedTransactionQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::HandRoyal.Bot.GraphQL.UnsignedTransactionQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::HandRoyal.Bot.GraphQL.IGetSessionResult>, global::HandRoyal.Bot.GraphQL.State.GetSessionResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::HandRoyal.Bot.GraphQL.IGetSessionResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::HandRoyal.Bot.GraphQL.IGetSessionQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::HandRoyal.Bot.GraphQL.IGetSessionResult>, global::HandRoyal.Bot.GraphQL.State.GetSessionBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::HandRoyal.Bot.GraphQL.IGetSessionResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::HandRoyal.Bot.GraphQL.IGetSessionResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::HandRoyal.Bot.GraphQL.IGetSessionResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::HandRoyal.Bot.GraphQL.GetSessionQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::HandRoyal.Bot.GraphQL.IGetSessionQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::HandRoyal.Bot.GraphQL.GetSessionQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::HandRoyal.Bot.GraphQL.IGetUserScopedSessionResult>, global::HandRoyal.Bot.GraphQL.State.GetUserScopedSessionResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::HandRoyal.Bot.GraphQL.IGetUserScopedSessionResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::HandRoyal.Bot.GraphQL.IGetUserScopedSessionQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::HandRoyal.Bot.GraphQL.IGetUserScopedSessionResult>, global::HandRoyal.Bot.GraphQL.State.GetUserScopedSessionBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::HandRoyal.Bot.GraphQL.IGetUserScopedSessionResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::HandRoyal.Bot.GraphQL.IGetUserScopedSessionResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::HandRoyal.Bot.GraphQL.IGetUserScopedSessionResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::HandRoyal.Bot.GraphQL.GetUserScopedSessionQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::HandRoyal.Bot.GraphQL.IGetUserScopedSessionQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::HandRoyal.Bot.GraphQL.GetUserScopedSessionQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::HandRoyal.Bot.GraphQL.IGetJoinableSessionsResult>, global::HandRoyal.Bot.GraphQL.State.GetJoinableSessionsResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::HandRoyal.Bot.GraphQL.IGetJoinableSessionsResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::HandRoyal.Bot.GraphQL.IGetJoinableSessionsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::HandRoyal.Bot.GraphQL.IGetJoinableSessionsResult>, global::HandRoyal.Bot.GraphQL.State.GetJoinableSessionsBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::HandRoyal.Bot.GraphQL.IGetJoinableSessionsResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::HandRoyal.Bot.GraphQL.IGetJoinableSessionsResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::HandRoyal.Bot.GraphQL.IGetJoinableSessionsResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::HandRoyal.Bot.GraphQL.GetJoinableSessionsQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::HandRoyal.Bot.GraphQL.IGetJoinableSessionsQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::HandRoyal.Bot.GraphQL.GetJoinableSessionsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::HandRoyal.Bot.GraphQL.IStageTransactionResult>, global::HandRoyal.Bot.GraphQL.State.StageTransactionResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::HandRoyal.Bot.GraphQL.IStageTransactionResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::HandRoyal.Bot.GraphQL.IStageTransactionMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::HandRoyal.Bot.GraphQL.IStageTransactionResult>, global::HandRoyal.Bot.GraphQL.State.StageTransactionBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::HandRoyal.Bot.GraphQL.IStageTransactionResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::HandRoyal.Bot.GraphQL.IStageTransactionResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::HandRoyal.Bot.GraphQL.IStageTransactionResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::HandRoyal.Bot.GraphQL.StageTransactionMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::HandRoyal.Bot.GraphQL.IStageTransactionMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::HandRoyal.Bot.GraphQL.StageTransactionMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::HandRoyal.Bot.GraphQL.IOnTipChangedResult>, global::HandRoyal.Bot.GraphQL.State.OnTipChangedResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::HandRoyal.Bot.GraphQL.IOnTipChangedResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::HandRoyal.Bot.GraphQL.IOnTipChangedSubscription>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::HandRoyal.Bot.GraphQL.IOnTipChangedResult>, global::HandRoyal.Bot.GraphQL.State.OnTipChangedBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::HandRoyal.Bot.GraphQL.IOnTipChangedResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::HandRoyal.Bot.GraphQL.IOnTipChangedResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.WebSockets.IWebSocketConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::HandRoyal.Bot.GraphQL.IOnTipChangedResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::HandRoyal.Bot.GraphQL.OnTipChangedSubscription>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::HandRoyal.Bot.GraphQL.IOnTipChangedSubscription>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::HandRoyal.Bot.GraphQL.OnTipChangedSubscription>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::HandRoyal.Bot.GraphQL.IOnSessionChangedResult>, global::HandRoyal.Bot.GraphQL.State.OnSessionChangedResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::HandRoyal.Bot.GraphQL.IOnSessionChangedResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::HandRoyal.Bot.GraphQL.IOnSessionChangedSubscription>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::HandRoyal.Bot.GraphQL.IOnSessionChangedResult>, global::HandRoyal.Bot.GraphQL.State.OnSessionChangedBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::HandRoyal.Bot.GraphQL.IOnSessionChangedResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::HandRoyal.Bot.GraphQL.IOnSessionChangedResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.WebSockets.IWebSocketConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::HandRoyal.Bot.GraphQL.IOnSessionChangedResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::HandRoyal.Bot.GraphQL.OnSessionChangedSubscription>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::HandRoyal.Bot.GraphQL.IOnSessionChangedSubscription>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::HandRoyal.Bot.GraphQL.OnSessionChangedSubscription>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::HandRoyal.Bot.GraphQL.State.GraphQLClientEntityIdFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::HandRoyal.Bot.GraphQL.GraphQLClient>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::HandRoyal.Bot.GraphQL.IGraphQLClient>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::HandRoyal.Bot.GraphQL.GraphQLClient>(sp));
            return services;
        }

        private sealed class ClientServiceProvider : System.IServiceProvider, System.IDisposable
        {
            private readonly System.IServiceProvider _provider;
            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}
